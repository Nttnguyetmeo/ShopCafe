@page
@model MLunarCoffee.Pages.Service.PrescriptionMedicine.PrescriptionMedicineModel
@{
    if (@Model.layout == "none") Layout = null;
}
@Html.AntiForgeryToken()

<div class="container-fluid p-0">
    <div class="row">
        <div class="col-12 px-0">
            <!--Master-->
            <div class="card card-plain" id="PrescriptionMedicineList">
                <div class="vtcardheader card-header pb-0">
                    <div class="left">
                        <h6 class="mb-0">@Local["Danh sách đơn thuốc"]</h6>
                        <p class="text-sm mb-0">@Local["Đơn thuốc điều trị"]</p>
                    </div>
                    <div class="right">
                        <button id="Prescription_btnAdd" class="btn bg-gradient-primary btn-sm _tab_control_ mt-1 mb-0 " data-tab="add_combo_service" onclick="event.preventDefault();return AddNewPrescriptionMedicine()">@Local["Thêm mới"]</button>
                        <button class="btn btn-dark btn-sm mt-1 mb-0 _tab_control_" data-tab="export_excel" onclick="event.preventDefault();return exportData();">@Local["Xuất"]</button>
                    </div>
                </div>
                <div class="card-body pt-1">
                    <div class="vtcondition">
                        <a class="sign" data-open="@Local[" Hiển thị"]" data-close="@Local[" Thu gọn"]" data-bs-toggle="collapse" aria-expanded="true"></a>
                        <div class="fulllap collapse collapsesticky show">
                            <div class="row px-2">
                                <div class="field col-12 mt-2 px-1 col-md-3">
                                    <input id="filterPrescription" type="text" placeholder="eg .@Local[" Tìm kiếm"]" onkeyup="event.preventDefault();return Prescription_OnKeyupPres();" autocomplete="off" class="form-control">
                                </div>
                                <div class="field col-12 mt-2 px-1 col-md-3">
                                    <div class="input-group">
                                        <div type="text" class="text-primary input-group-text text-gradient">@Local["Tổng"] </div>
                                        <span class="form-control font-weight-bolder" id="lbTotal">0</span>
                                    </div>
                                </div>                                
                            </div>
                        </div>
                    </div>
                    <div class="m-0 my-3 mobile-responsive">
                        <div id="loaderList" class="waitingdiv text-center" style="display: none;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <table id="dtContentPrescriptionMedicine" class="table vt-table mb-0">
                            <thead class="hiddenCollapse">
                                <tr role="row">
                                    <th class="d-none">ID</th>
                                    <th style="width: 50px;">@Local["#"]</th>
                                    <th style="min-width:150px">@Local["Đơn thuốc"]</th>
                                    <th class="text-center">@Local["Giá"]</th>
                                    <th style="min-width:200px">@Local["Thuốc"]</th>
                                    <th class="Prescription_thHandle" style="width: 60px;">@Local["Xóa"]</th>
                                </tr>
                            </thead>
                            <tbody id="dtContentPrescriptionMedicineBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>



            <!--Detail-->
            <div id="PrescriptionMedicineDetail" style="display:none;">
            </div>
        </div>
    </div>

</div>



<script>

    let DataPres;
    let DataPresDetail;

    $(document).ready(function () {
        Prescription_LoadData();
        Prescription_Event();
    });

    function Prescription_Event() {

        $('#dtContentPrescriptionMedicine tbody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[1].innerHTML);
            Prescription_DeletePres(ID)
        });

        $('#dtContentPrescriptionMedicine tbody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[1].innerHTML);
            Prescription_Detail(ID)
        });


        $('#dtContentPrescriptionMedicine tbody').on('click', '.show-detail-medic', function () {
            $(".detail-medicine").addClass("d-none");
            $(this).parent().find(".detail-medicine").removeClass("d-none")
        });
    }

    async function Prescription_LoadData() {
        new Promise((resolve, reject) => {
            AjaxLoad(url = "/Service/PrescriptionMedicine/PrescriptionMedicine/?handler=LoadData"
                , data = {}, async = true, error = null
                , success = function (result) {
                    if (result != "[]") {
                        let data = JSON.parse(result);
                        DataPres = data.Table;
                        DataPresDetail = data.Table1;
                        Prescription_RenderData(DataPres, DataPresDetail, 'dtContentPrescriptionMedicineBody');
                    }
                    else {

                    }
                },
                before = function () {
                    $("#dtContentMaterial").hide();
                    $("#loaderList").show();
                },
                complete = function (e) {
                    $("#dtContentMaterial").show();
                    $("#loaderList").hide();
                }
            );
            resolve();
        })
    }

    function Prescription_RenderData(data, dataDetail, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    let item = data[i];
                    let dataPreDetail = dataDetail.filter((word) => { return word.ID == item.ID });
                    let tr = `
                        <tr role="row" class="rowService vt-number" data-id="${item.ID}">
                            <td class="d-none">${item.ID}</td>
                            <td class="vt-number-order text-center"></td>
                            <td>
                                <a class="text-dark d-block">${item.Code}</a>
                                <a class="buttonEditClass text-dark fw-bold d-inline-block border-bottom border-dark cursor-pointer" href="#">${item.Name}</a>
                                <span class="d-block text-secondary content_line_clamp">${item.Note}</span>
                            </td>
                            <td>
                                ${formatNumber(item.Amount)}
                            </td>
                            <td>
                                ${Prescription_RenderData_ListView(dataPreDetail)}
                            </td>
                            <td class="text-center Prescription_rowBtnHandle">
                                <button class="buttonGrid _tab_control_" data-tab="delete_combo_service" value="${item.ID}">
                                    <i class="buttonDeleteClass vtt-icon vttech-icon-delete"></i>
                                </button>
                            </td>
                        </tr>
                    `
                    stringContent += tr;
                }
            }
            document.getElementById(id).innerHTML = stringContent;
            Count_Up("lbTotal", data.length);
            Checking_TabControl_Permission();
        }

    }

    function Prescription_RenderData_ListView(data) {
        let result = "";
        if (data && data.length != 0) {
            for (let i = 0; i < data.length; i++) {
                let item = data[i];
                result += `
                    <tr>
                        <td>
                            <p class="text-sm mb-0">${i + 1}. ${item.ProductName}</p>
                        </td>
                        <td>
                            <p class="text-sm mb-0"> ${item.Quantity}  ${item.Unit}</p>
                        </td>
                        <td>
                            <p class="text-sm mb-0">${formatNumber(item.Price)}</p>
                        </td>
                        <td>
                            <p class="text-sm mb-0">${item.Dosage1 + ' ' + item.Dosage2 + ' ' + item.Dosage3}</p>
                        </td>
                    </tr>
                `
            }
        }
        result = `
                <div class="table-responsive p-0">
                    <a class="show-detail-medic">@Local["Chi tiết"]</a>
                    <table class="table align-items-center justify-content-center mb-0 detail-medicine d-none">
                        <thead>
                            <tr>
                            <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">@Local["Tên thuốc"]</th>
                            <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2" style="min-width: 70px;">@Local["Số lượng"]</th>
                            <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">@Local["Đơn giá"]</th>
                            <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">@Local["Liều dùng"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${result}
                        </tbody>
                    </table>
                </div>`
        return result;
    }

    function AddNewPrescriptionMedicine() {
        Prescription_OpenDetail();
        $("#PrescriptionMedicineDetail").load("/Service/PrescriptionMedicine/PrescriptionMedicineDetail/?ver=" + versionofWebApplication, function () {
            $("#PrescriptionMedicineDetail").show();
        });
        return false;
    }

    function Prescription_Detail(ID) {
        Prescription_OpenDetail();
        $("#PrescriptionMedicineDetail").load("/Service/PrescriptionMedicine/PrescriptionMedicineDetail/?PrescriptionMedicineID=" + ID + "&ver=" + versionofWebApplication, function () {
            $("#PrescriptionMedicineDetail").show();
        });
        return false;
    }

    function Prescription_OpenDetail() {
        $("#PrescriptionMedicineList").hide();
    }

    function Prescription_CancelDetail() {
        $("#PrescriptionMedicineDetail").show();
        document.getElementById('#PrescriptionMedicineDetail')
    }

    function Prescription_DeletePres(id) {
        const promise = notiConfirm();
        promise.then(function () { ExecuteDeleteSerivice(id); }, function () { });
    }

    function ExecuteDeleteSerivice(id) {
        AjaxLoad(url = "/Service/PrescriptionMedicine/PrescriptionMedicine/?handler=DeleteItem"
            , data = {
                id: id
            }
            , async = true
            , error = null
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    Prescription_LoadData();
                    syslog_ser('d', result);
                } else {
                    notiError_SW();
                }
            });
    }
    function Prescription_OnKeyupPresAsync() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                let search = xoa_dau($('#filterPrescription').val().toLowerCase()).trim();
                let data = DataPres.filter(function (item) {
                    if (xoa_dau(item["Name"]).toLowerCase().includes(search) || xoa_dau(item["Code"]).toLowerCase().includes(search))
                        return true;
                    return false;
                });
                if (data != undefined && data != null) {
                    Prescription_RenderData(data, DataPresDetail, "dtContentPrescriptionMedicineBody");
                    ColorSearchFilterText(search, "rowService");
                }
                resolve()
            });
        })
    }
    async function Prescription_OnKeyupPres() {
        $("#dtContentPrescriptionMedicine").hide();
        $("#loaderList").show();
        await Prescription_OnKeyupPresAsync();
        $("#dtContentPrescriptionMedicine").show();
        $("#loaderList").hide();
        return false;
    }
    function exportData () {
        exportToExcel("dtContentPrescriptionMedicine", Outlang['Danh_sach_toa_thuoc']);
        syslog_ser('e', '');
        return false;
    }
</script>
