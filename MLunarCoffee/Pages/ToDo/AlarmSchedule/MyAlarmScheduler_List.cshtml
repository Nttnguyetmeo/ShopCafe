@page
@model SourceMain.Pages.ToDo.AlarmSchedule.MyAlarmScheduler_ListModel
@{
}

<div class="container-fluid py-3 px-0">
    <div class="row">
        <div class="col-12">
            <!--Master-->
            <div class="card" id="####">
                <div class="row">
                    <div class="col-3 col-xl-1 col-md-2 text-center">
                        <!-- #region navigation -->
                        <ul class="nav nav-pills nav-fill p-1 bg-transparent" role="tablist" id="AS_Listtype">
                        </ul>
                        <!-- #endregion -->
                    </div>
                    <div class="col-9 col-xl-11 col-md-10 ps-0">
                        <div class="card-body pt-0 ps-4" id="AS_Other">
                            <div class="tab-content">
                                <div class="tab-pane fade active show">
                                    <div class="row px-2">
                                        <div class="col-12 col-md-12 col-xl-12 pt-0">
                                            <div class="card-header p-1 pb-0">
                                                <div class="row">
                                                    <div class="col-8 d-flex">
                                                        <div class="d-flex flex-column justify-content-center">
                                                            <h6 class="mb-0 text-sm" id="AS_HeaderName"></h6>
                                                        </div>
                                                    </div>
                                                    <div class="col-4">
                                                        <span class="btn bg-gradient-primary btn-sm mt-1 mb-0 float-end" onclick="event.preventDefault();AS_Add();">Thêm Mới</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="m-0 my-3 mobile-responsive">
                                            <table id="AS_Table" class="table vt-table mb-0">
                                                <thead class="hiddenCollapse">
                                                    <tr role="row">
                                                        <th class="d-none">ID</th>
                                                        <th data-languagestatic="no">#</th>
                                                        <th data-languagestatic="time">Time</th>
                                                        <th data-languagestatic="content">Content</th>
                                                        <th data-languagestatic="staff">Staff</th>
                                                        <th>Active</th>
                                                        <th data-languagestatic="delete">Delete</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="AS_Body_Content">
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="card-body pt-2 AS_Today" id="AS_Today">
                            <div class="row form3">
                                <div class="col-12 col-sm-6 col-xl-3 p-1">
                                    <div class="input-group">
                                        <div type="text" class="text-primary input-group-text text-gradient">Total</div>
                                        <span class="form-control font-weight-bolder" id="AS_Total_All">0</span>
                                    </div>
                                </div>
                                <div class="col-12 col-sm-6 col-xl-3 p-1">
                                    <div class="input-group">
                                        <div type="text" class="text-primary input-group-text text-gradient">Done</div>
                                        <span class="form-control font-weight-bolder" id="AS_Total_Done">0</span>
                                    </div>
                                </div>
                                <div class="col-12 col-sm-6 col-xl-3 p-1">
                                    <div class="form-check ps-0">
                                        <input id="AS_DateFilter" class="flatpickr form-control" type="text" placeholder="Select Date.." autocomplete="off" onchange="event.preventDefault();return LoadAlrmList_Scheduler()" />
                                    </div>
                                </div>
                                <div class="col-12 col-sm-6 col-xl-3 p-1">
                                    <div class="ui fluid search selection dropdown" id="ScheduleStatusID" onchange="event.preventDefault();return LoadAlrmList_Scheduler()">
                                        <input type="hidden" name="ScheduleStatusID" />
                                        <input class="search" autocomplete="off" tabindex="0" />
                                        <div class="default text">Chọn Trạng Thái</div>
                                        <div id="AS_LoadCbb_Status" class="menu" tabindex="-1">
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="row pe-2 mt-1 form3">
                                <div class="row">
                                    <div class="col-12 col-md-6 col-xl-6 p-2">
                                        <div class="card" id="#">
                                            <div class="card-header p-3 pb-0">
                                                <div class="row">
                                                    <div class="col-8 d-flex">
                                                        <div>
                                                            <img id="todo_avatar" class="avatar avatar-sm me-2" alt="avatar image" >
                                                        </div>
                                                        <div class="d-flex flex-column justify-content-center">
                                                            <h6 class="mb-0">Work List</h6>
                                                            <p class="text-sm" data-fontchanged="true">Danh sách việc cần làm và được giao</p>
                                                        </div>
                                                    </div>
                                                    <div class="col-4">
                                                        <span class="btn bg-gradient-primary btn-sm mt-1 mb-0 float-end" onclick="event.preventDefault();AS_Add();">Thêm List</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card-body p-3" id="AS_Current_Progress_Todo">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-12 col-md-6 col-xl-6 p-1">
                                        <div class="card" id="#">
                                            <div class="card-header pb-2">
                                                <div class="d-lg-flex">
                                                    <div class="w-50 col-auto my-auto">
                                                        <div class="h-100">
                                                            <h6 data-languagestatic="no" class="mb-0">Detail</h6>
                                                            <p data-languagestatic="no" class="text-sm mb-0">Detail of conversation list</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <section id="current_detail_progress_alarm_todo">
                                                <div class="container pt-4">
                                                    <div class="row">
                                                        <div class="col-md-12 col-lg-12 col-xl-12 mb-4 mb-md-0 pb-3 px-2">
                                                            <div class="card">
                                                                <div class="card-body pt-3">
                                                                    <ul class="list-unstyled mb-0">
                                                                        <li class="border-bottom">
                                                                            <a class="d-flex justify-content-between">
                                                                                <div class="pt-0">
                                                                                    <p class="fw-bold mb-0 text-info text-sm" id="AS_Detail_CreatedName"></p>
                                                                                    <p class="small text-dark text-sm font-weight-bold" id="AS_Detail_Title"></p>
                                                                                </div>
                                                                                <div class="d-flex text-xs">
                                                                                    <i class="text-info far fa-clock pe-1" aria-hidden="true"></i>
                                                                                    <p class="text-xs text-info mb-1" id="AS_Detail_CreatedDay"></p>
                                                                                </div>
                                                                            </a>
                                                                            <p class="small text-muted" id="AS_Detail_Content"></p>
                                                                        </li>
                                                                    </ul>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div id="AS_Detail_ContentCheck_List">
                                                        </div>
                                                        <div class="col-md-12 col-lg-12 col-xl-12">
                                                            <ul class="list-unstyled" id="AS_Detail_Comment">
                                                            </ul>
                                                            <div>
                                                                <div class="d-flex mt-4 chat-form col-12 col-sm-12 ms-2">
                                                                    <div class="flex-grow-1 my-auto">
                                                                        <form>
                                                                            <textarea class="form-control" placeholder="Type your message" rows="2" name="message-to-send" id="message-to-send"></textarea>
                                                                        </form>
                                                                        <div class="text-danger text-sm d-inline ps-2" id="AS_Text_Show_Message_Master"></div>
                                                                    </div>
                                                                    <div class="flex-shrink-0 my-auto">
                                                                        <button type="button" class="border-0 text-md text-gradient text-info mb-0 me-3" onclick="event.preventDefault();return AS_Detail_Insert_Comment();">
                                                                            <i class="text-md text-gradient text-info fas fa-paper-plane"></i>
                                                                            Send
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </section>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
        let _StatusScheduler_List;
        let _AlarmScheduler_List;
        let _AlarmScheduler_List_timeline;
        let _AlarmScheduler_List_extension;
        let CurrentEmployeeID;
        let CurrentTypeChoose;
        let DataMain_Scheduler_Alarm = [];
        let dateFrom_Scheduler;
        let dateTo_Scheduler;
        let currentFlagToRaiseEvent = 0;
        let CurrentDetailChoose_EmpWork;
        let CurrentDetailChoose_EmpCreated;
        let CurrentDetailChoose_Date;
        let CurrentDetailChoose_ID;
        let CurrentCheckList = [];
        function EventLinkClick_TypeAlarmScheduler() {
            $(".listitem_child").on('click', function (event) {
                CurrentTypeChoose = $(this).attr("data-type");
                AS_Render_ByType();
            });
        }
        function AS_TypeName_FromID(type) {
            let typeName = '';
            switch (Number(type)) {
                case 1:
                    typeName = 'Fixed Date'
                    break;
                case 2:
                    typeName = 'Daily';
                    break;
                case 3:
                    typeName = 'Weekly';
                    break;
                case 4:
                    typeName = 'Monthly';
                    break;
                default:
                    break;
            }
            return typeName;
        }
        function AS_Render_ByType() {
            if (CurrentTypeChoose == "0") {
                $('#AS_Today').show();
                $('#AS_Current_Progress_Todo').show();
                $('#current_detail_progress_alarm_todo').show();
                $('#AS_Other').hide();
                AS_Detail_Render_ActionNow_List(DataMain_Scheduler_Alarm, "AS_Current_Progress_Todo");
                TriggerFirstLink_Detail();
            }
            else {
                $('#AS_Today').hide();
                $('#AS_Current_Progress_Todo').hide();
                $('#current_detail_progress_alarm_todo').hide();
                $('#AS_Other').show();
                document.getElementById('AS_HeaderName').innerHTML = AS_TypeName_FromID(CurrentTypeChoose);
                AS_Render_Alarm_Detail_List(_AlarmScheduler_List_timeline, "AS_Body_Content");
            }

            let x = document.getElementsByClassName("listitem_child");
            for (i = 0; i < x.length; i++) {
                if (CurrentTypeChoose == x[i].attributes["data-type"].value) {
                    //Navi
                    //x[i].style.background = "#e9ecef";
                }
                else {
                    x[i].style.background = "white";
                }
            }
        }
        function TriggerFirstLink() {
            let x = document.getElementsByClassName("listitem_child");
            for (i = 0; i < x.length; i++) {
                if (CurrentTypeChoose == x[i].attributes["data-type"].value) {
                    AS_Render_ByType();
                    i = x.length;
                }
            }
        }
        function AS_Create_DataMain_Initialize() {
            DataMain_Scheduler_Alarm = [];
            for (var date = dateFrom_Scheduler; date <= dateTo_Scheduler; date.setDate(date.getDate() + 1)) {
                let dateIndex = new Date(date)
                let dayofweek = dateIndex.getDay();
                let dayofDate = dateIndex.getDate();
                for (i = 0; i < _AlarmScheduler_List_timeline.length; i++) {
                    let type = _AlarmScheduler_List_timeline[i].type;
                    let id = _AlarmScheduler_List_timeline[i].id;
                    let havingInTimeline = 0;
                    let StatusEx = 0;
                    let title = "";
                    let Content = "";
                    let Hour = "";
                    let IsNew = 0;
                    let CountComment = 0;
                    if (_AlarmScheduler_List_timeline[i].status == "1") {
                        switch (type) {
                            case 1: if (dateIndex.getTime() === StringYMDTODate(_AlarmScheduler_List_timeline[i].date).getTime()) havingInTimeline = 1;
                                break;
                            case 2: if (dateIndex.getTime() >= StringYMDTODate(_AlarmScheduler_List_timeline[i].dateCreated).getTime()) havingInTimeline = 1;
                                break;
                            case 3: if (dateIndex.getTime() >= StringYMDTODate(_AlarmScheduler_List_timeline[i].dateCreated).getTime() && dayofweek == _AlarmScheduler_List_timeline[i].dayofweek)
                                havingInTimeline = 1;
                                break;
                            case 4: if (dateIndex.getTime() >= StringYMDTODate(_AlarmScheduler_List_timeline[i].dateCreated).getTime() && dayofDate == _AlarmScheduler_List_timeline[i].day)
                                havingInTimeline = 1;
                                break;
                            default: break;
                        }
                    }
                    if (havingInTimeline == 1) {
                        title = _AlarmScheduler_List_timeline[i].title;
                        Hour = _AlarmScheduler_List_timeline[i].hour;
                        Content = _AlarmScheduler_List_timeline[i].content;
                        let _ex = CheckingInExtension(id, dateIndex);
                        if (_ex != null) {
                            StatusEx = _ex.status;
                            CountComment = _ex.countComment;
                            IsNew = _ex.isNew;
                        }
                        let el = {};
                        el.ID = id;
                        el.Status = StatusEx;
                        el.Title = title;
                        el.Content = Content;
                        el.Hour = Hour;
                        el.CountComment = CountComment;
                        el.IsNew = IsNew;
                        el.EmpWork = _AlarmScheduler_List_timeline[i].empWork;
                        el.EmpCreate = _AlarmScheduler_List_timeline[i].empCreate;
                        el.CreatedName = _AlarmScheduler_List_timeline[i].createdName;
                        el.CreatedWorkName = _AlarmScheduler_List_timeline[i].createdWorkName;
                        el.Date = ConvertDateTimeUTC_DMY(dateIndex);
                        el.Color = (StatusEx == "1") ? 'white' : 'white';
                        el.BackColor = (StatusEx == "1") ? '#00508d' : '#662f78';
                        el.TotalCheck = (_AlarmScheduler_List_timeline[i].checklist != "")
                            ? (JSON.parse(_AlarmScheduler_List_timeline[i].checklist).length)
                            : 0;
                        DataMain_Scheduler_Alarm.push(el);

                    }
                }
            }
            AS_Render_ByType();
        }
        function AS_Detail_Render_ActionNow_List(data, id) {
            let StatusEx = $('#ScheduleStatusID').dropdown('get value');
            let dt;
            if (StatusEx != 2) {
                dt = data.filter(word => word.Status == StatusEx);
            } else {
                dt = data;
            }
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                let dr = "";
                let totalStatus_1 = 0;
                let totalStatus_all = 0;
                if (dt && dt.length > 0) {
                    for (var i = 0; i < dt.length; i++) {
                        let item = dt[i];
                        totalStatus_1 = totalStatus_1 + Number(item.Status);
                        dr = AS_Render_Each_Segment_Action_Detail(
                            item.ID, item.Hour, item.Title, item.Content
                            , item.CreatedName, item.Status, item.Date
                            , item.IsNew, item.CountComment
                            , item.EmpWork, item.EmpCreate, item.CreatedWorkName, item.TotalCheck
                        );
                        stringContent = stringContent + dr;
                    }
                    totalStatus_all = data.length;
                }
                document.getElementById(id).innerHTML = stringContent;
                //document.getElementById(id).innerHTML = '<div class="ui feed timeline">' + stringContent + '</div>';
                Count_Up("AS_Total_All", data.length);
                Count_Up("AS_Total_Done", totalStatus_1);
            }
            //SettingHeightDiv();
            AS_Detail_EventLink_Click();
            AS_Hover_List_Detail();
        }
        function SettingHeightDiv() {
           // RefreshNiceScroll();
            var wH = $(window).height();
            $('#AS_Current_Progress_Todo').css({ height: (wH - 150) });
            $('#AS_Today').css({height: (wH - 90)});
            //DeclareNiceScroll('AS_Current_Progress_Todo');
            //DeclareNiceScroll('current_detail_progress_alarm_todo');
            //DeclareNiceScroll('AS_Chat_History');
            $('#current_detail_progress_alarm_todo').css({ height: (wH - 150) });
            $('#AS_Other').css({ height: (wH - 70) });
            //RefreshNiceScroll();
        }
        function TriggerFirstLink_Detail() {
            let x = document.getElementsByClassName("listitem_detail");
            if (x != undefined && x.length >= 0 && x[0] != undefined) {
                CurrentDetailChoose_EmpWork = x[0].attributes["data-emp-work"].value;
                CurrentDetailChoose_EmpCreated = x[0].attributes["data-emp-created"].value;
                CurrentDetailChoose_Date = x[0].attributes["data-date"].value;
                CurrentDetailChoose_ID = x[0].attributes["data-id"].value;
                AS_Detail_Load_Scheduler();
                //Frist time load
                x[0].style.background = "#e9ecef";
            }
        }
        function TriggerLink_Detail_POINT() {
            let x = document.getElementsByClassName("listitem_detail");
            if (x != undefined && x.length >= 0) {
                for (i = 0; i < x.length; i++) {
                    if (x[i].attributes["data-date"].value == CurrentDetailChoose_Date && x[i].attributes["data-id"].value == CurrentDetailChoose_ID) {
                        x[i].style.background = "#e9ecef";
                    }
                }
            }
        }

        function AS_Detail_EventLink_Click() {
            $(".listitem_detail").on('click', function (event) {
                CurrentDetailChoose_EmpWork = $(this).attr("data-emp-work");
                CurrentDetailChoose_EmpCreated = $(this).attr("data-emp-created");
                CurrentDetailChoose_Date = $(this).attr("data-date");
                CurrentDetailChoose_ID = $(this).attr("data-id");
                AS_Detail_Load_Scheduler();
                let x = document.getElementsByClassName("listitem_detail");
                for (i = 0; i < x.length; i++) {
                    if (CurrentDetailChoose_Date == x[i].attributes["data-date"].value && CurrentDetailChoose_ID == x[i].attributes["data-id"].value) {
                        x[i].style.background = "#e9ecef";
                    }
                    else {
                        x[i].style.background = "white";

                    }
                }
            });
            $(".imagelistitem_detail").on('click', function (event) {
                let date = $(this).attr("data-date");
                let id = $(this).attr("data-id");
                let status = $(this).attr("data-status");
                status = (status == "0") ? 1 : 0;
                AjaxLoad(url = "/ToDo/AlarmSchedule/MyAlarmScheduler_List/?handler=ChangeStatus"
                    , data = {
                        id: id
                        , date: date
                        , status: status,
                    }, async = true, error = null
                    , success = function (result) {
                        if (result != "0") {
                            AS_Execute_DataMain_ChangeStatus(id, date, status);
                            AS_Detail_Load_Scheduler();
                        }
                    });
            });

        }
        function AS_Detail_Load_Scheduler() {
            AjaxLoad(url = "/ToDo/AlarmSchedule/MyAlarmScheduler_List/?handler=LoadSchedulerDetail"
                , data = {
                    date: CurrentDetailChoose_Date,
                    id: CurrentDetailChoose_ID
                }, async = true, error = null
                , success = function (result) {
                    if (result != "0") {
                        let data = JSON.parse(result);
                        let contentDetail = data.Table;
                        let commentDetail = data.Table1;
                        CurrentCheckList = (contentDetail[0].DataCheckList != "") ? JSON.parse(contentDetail[0].DataCheckList) : "";
                        document.getElementById('AS_Detail_Title').innerHTML = contentDetail[0]['Title'];
                        document.getElementById('AS_Detail_Content').innerHTML = contentDetail[0]['Content'];
                        document.getElementById('AS_Detail_CreatedName').innerHTML = contentDetail[0]['CreatedName'];
                        document.getElementById('AS_Detail_CreatedDay').innerHTML = ConvertDateTimeUTC(contentDetail[0]['CreatedDate']);
                        AS_Render_Detail_CheckList(CurrentCheckList, 'AS_Detail_ContentCheck_List');
                        AS_Render_Detail_Comment_List(commentDetail, 'AS_Detail_Comment');
                        AS_EventClick_CheckList_Detail();
                    }
                });
        }
        function AS_Detail_Insert_Comment() {
            let content = ($('#message-to-send').val()).trim();
            let title = document.getElementById('AS_Detail_Title').innerHTML;
            if (content.length < 2) document.getElementById('AS_Text_Show_Message_Master').innerHTML = "The content is too short";
            else {
                $('#message-to-send').val('');
                document.getElementById('AS_Text_Show_Message_Master').innerHTML = "";
                AjaxLoad(url = "/ToDo/AlarmSchedule/MyAlarmScheduler_List/?handler=InsertCommentDetail"
                    , data = {
                        date: CurrentDetailChoose_Date
                        , id: CurrentDetailChoose_ID
                        , empwork: CurrentDetailChoose_EmpWork
                        , empcreated: CurrentDetailChoose_EmpCreated
                        , title: title
                        , content: content
                    }, async = true, error = null
                    , success = function (result) {
                        if (result != "0") {
                            AS_Execute_DataMain_Insert_Comment();
                            AS_Detail_Load_Scheduler();
                        }
                    });
            }

        }
        //#region // Execute DataMain
        function AS_Execute_DataMain_Insert_Comment() {
            for (i = 0; i < DataMain_Scheduler_Alarm.length; i++) {
                if (DataMain_Scheduler_Alarm[i].ID == CurrentDetailChoose_ID
                    && DataMain_Scheduler_Alarm[i].Date == CurrentDetailChoose_Date) {
                    DataMain_Scheduler_Alarm[i].CountComment = DataMain_Scheduler_Alarm[i].CountComment + 1;
                    DataMain_Scheduler_Alarm[i].IsNew = 0;
                }
            }
            AS_Detail_Render_ActionNow_List(DataMain_Scheduler_Alarm, "AS_Current_Progress_Todo");
            TriggerLink_Detail_POINT();
        }
        function AS_Execute_DataMain_ChangeStatus(id, date, status) {
            for (i = 0; i < DataMain_Scheduler_Alarm.length; i++) {
                if (DataMain_Scheduler_Alarm[i].ID == id
                    && DataMain_Scheduler_Alarm[i].Date == date) {
                    DataMain_Scheduler_Alarm[i].Status = Number(status);
                }
            }
            AS_Detail_Render_ActionNow_List(DataMain_Scheduler_Alarm, "AS_Current_Progress_Todo");
            TriggerLink_Detail_POINT();
        }

        //#endregion
        function AS_Render_Detail_CheckList(data, id) {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                let dr = "";
                if (data && data.length > 0) {
                    for (var i = data.length - 1; i >= 0; i--) {
                        let item = data[i];
                        dr =
                            '<div class="form-check" >'
                            + '<input type="checkbox" data-id="' + item.id + '" class="checkTask_CheckList form-check-input" '
                            + ((item.state == 1) ? 'checked' : '')
                            + '>'
                            + '<span class="form-check-label">' + item.name +'</span>'
                            + '</div>';

                        stringContent = stringContent + dr;
                    }

                }
                document.getElementById(id).innerHTML = stringContent;
            }
        }
        function AS_EventClick_CheckList_Detail() {
            $(".checkTask_CheckList").on('click', function (event) {
                let id = $(this).attr("data-id");
                for (i = 0; i < CurrentCheckList.length; i++) {
                    if (Number(id) == Number(CurrentCheckList[i].id)) {
                        CurrentCheckList[i].state = (this.checked ? 1 : 0)
                        AjaxLoad(url = "/ToDo/AlarmSchedule/MyAlarmScheduler_List/?handler=UpdateCheckList"
                            , data = {
                                id: CurrentDetailChoose_ID,
                                data: JSON.stringify(CurrentCheckList)
                            }, async = true, error = null
                            , success = function (result) {

                            });
                    }
                }
            });
        }

    function AS_Render_Detail_Comment_List (data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            let dr = "";
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    let item = data[i];
                    if (item.IsMe == "1") {
                        dr =
                            '<li class="d-flex justify-content-between mb-4 col-12 col-md-12">'
                            + '<i class="far fa-comments rounded-circle d-flex align-self-start me-3 shadow-1-strong ms-2" width="60"></i>'
                            + '<div class="card bg-light card-content me-2">'
                            + '<div class="card-header d-flex justify-content-between p-3">'
                            + '<p class="fw-bold mb-0 text-sm"><i class="fas fa-circle pe-2 text-info text-sm"></i>' + item.CreatedName + '</p>'
                            + '<small class="text-muted text-xs mb-0 "><i class="far fa-clock pe-1"></i>' + ConvertDateTimeToStringDMY_HM(item.CreatedDate) + '</small>'
                            + '</div>'
                            + '<div class="card-body">'
                            + '<p class="mb-0 text-sm">'
                            + item.Content + '</p>'
                            + '</div>'
                            + '</div>'
                            + '</li>'


                    }
                    else {
                        dr =
                            '<li class="d-flex justify-content-between mb-4 ms-2">'
                        +'<div class="card w-100">'
                        +' <div class="card-header d-flex justify-content-between p-3">'
                        + '<p class="fw-bold mb-0 text-sm"><i class="fas fa-circle pe-2 text-success text-sm"></i>' + item.CreatedName + '</p>'
                        + '<small class="text-muted text-xs mb-0"><i class="far fa-clock pe-1"></i>' + ConvertDateTimeToStringDMY_HM(item.CreatedDate) + '</small>'
                        +' </div> '
                        +' <div class="card-body"> '
                        +' <p class="mb-0 text-sm">'+ item.Content +'</p>  '
                        +' </div>'
                        +'</div> '
                        +' <i class="far fa-comments rounded-circle d-flex align-self-start ms-3 shadow-1-strong me-2" width="60"></i> '
                        +'</li> '
                    }
                    stringContent = stringContent + dr;
                }
            }
            document.getElementById(id).innerHTML = stringContent;
            document.getElementById('AS_Text_Show_Message_Master').innerHTML = "";
        }
        //SettingHeightDiv();
    }
        function AS_Hover_List_Detail() {
            $(".listitem_detail").hover(function () {
                let currentcolor = rgb2hex($(this).css("background-color"));
                if (currentcolor != "#e9ecef") $(this).css("background-color", "#ced4da");
            }, function () {
                let currentcolor = rgb2hex($(this).css("background-color"));
                 if (currentcolor != "#e9ecef") $(this).css("background-color", "transparent");

            });
        }
        function AS_Render_Each_Segment_Action_Detail(id, hour, title, content, createdname
            , status, date, isnew, countcomment, empwork, empcreate, createdWorkName, totalCheck) {

            let datenow = new Date();
            let isSameDate = (StringYMDTODate(date).getTime() == (new Date(datenow.getFullYear(), datenow.getMonth(), datenow.getDate())).getTime())
                ? 0 : 1;
            let resulf =
                '<div class="timeline timeline-one-side" data-timeline-axis-style="dotted">'
                + '<div class="timeline-block mb-3">'
                + '<span class="timeline-step">'
                + ((status == "1")
                    ? '<i data-status="' + status + '" data-date="' + date + '" data-id="' + id + '" class="imagelistitem_detail vtt-icon vttech-icon-check"></i>'
                    : '<i data-status="' + status + '" data-date="' + date + '" data-id="' + id + '" class="imagelistitem_detail vtt-icon vttech-icon-uncheck"></i>')
                + '</span>'
                + '<div class="timeline-content">'
                + '<div class="listitem_detail px-2 py-2" data-emp-work="'
                + empwork + '" data-date="' + date + '" data-id="' + id + '" data-emp-created="' + empcreate + '">'
                + '<h6 class="text-dark text-sm font-weight-bold mb-0">' + title + ' </h6>'
                + '<p class="text-secondary font-weight-bold text-xs mt-1 mb-0">' + ((isSameDate == 1) ? ('<small class="dateScheduler">' + ConvertStringYMD_DMY(date) + '<small class="ps-1">' + hour + '</small>' + '</small>') : '') + '</p>'
                + '</div>'
                + '<p class="text-sm mt-3 mb-2">'
                + content + '</p>'
                + '</div>'

                + '<div class="d-lg-flex">'
                + '<div class="w-50 col-auto footer-timeline">'
                + '<div class="h-100">'
                + ((isnew == "1") ? '<a class="text-sm text-danger"><i class="fas fa-bell pe-1 text-sm text-danger"></i>Reply</a>'
                    : '<a class="text-sm"><i class="fas fa-bell pe-1 text-sm"></i>Reply</a>')
                + '<span class="badge badge-sm bg-gradient-info mx-2">' + countcomment + '  Message' + '</span>'
                + '<span class="badge badge-sm bg-gradient-info ps-2">' + totalCheck + '  CheckList' + '</span>'
                + '</div>'
                + '</div>'
                + '<div class="ms-auto my-auto mt-1">'
                + ((empwork == empcreate)
                    ? '<span class="right floated"><i class="fas fa-forward text-danger text-sm"></i> <a class="date text-sm">' + createdWorkName + '</a></span>'
                    : '<span class="right floated"> <a class="date pe-2 text-sm">' + createdname + '</a><i class="fas fa-forward text-danger text-sm"></i> <a class="date ps-1 text-sm">' + createdWorkName + '</a></span>'
                )
                + '</div>'
                + '</div>'



                + '</div>'
                + '</div>'
            return resulf;
        }
        function CheckingInExtension(id, date) {
            let foundid = -1;
            for (var j = 0; j < _AlarmScheduler_List_extension.length; j++) {
                if (_AlarmScheduler_List_extension[j].alarmID == id
                    && StringYMDTODate(_AlarmScheduler_List_extension[j].date).getTime() === date.getTime()) {
                    foundid = j;
                    j = _AlarmScheduler_List_extension.Length;
                }
            }

            if (foundid != -1) return _AlarmScheduler_List_extension[foundid];
            else return null;
        }
        function AS_Render_Alarm_Detail_List(data, id) {
            data = data.filter(word => word["type"] == CurrentTypeChoose);
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let tr =
                            '<td class="d-none">' + item.id + '</td>'
                            + '<td class="vt-number-order"></td>'
                            + '<td>'
                            + (item.editButton != 1 ? AS_Render_Each_Segment_Type(item.type, item.hour, item.day, item.date, item.dayofweek) : '<a href="" class="buttonEditClass text-decoration-underline">' + AS_Render_Each_Segment_Type(item.type, item.hour, item.day, item.date, item.dayofweek) + '</a>')
                            + '</td>'
                            + '<td>' + '<span class="text-dark font-weight-bold text-md">' + item.title + '</span><br>'
                            + item.content
                            + '</td>'
                            + '<td>'
                            + ((item.empWork == item.empCreate)
                                ? '<i class="fas fa-forward text-danger"></i> <span class="text-md">' + item.createdWorkName + '</span>'
                                : '<span class="text-md pe-1">' + item.createdName + '</span> <i class="fas fa-forward text-danger"></i> <span class="text-md">' + item.createdWorkName + '</span>')
                            + '</td>'
                            + '<td class="text-center">'
                            + (item.type != 1
                                ? (item.status == 1 ? '<button class="buttonGrid"><i class="buttonActiveClass vtt-icon vttech-icon-check"></i></button>'
                                    : '<button class="buttonGrid"><i class="buttonActiveClass vtt-icon vttech-icon-uncheck"></i></button>')
                                : '<i class="imgGrid vtt-icon vttech-icon-uncheck"></i>')
                            + '</td>'
                            + '</td>'
                            + '<td class="text-center">'
                            + (item.deleteButton != 1 ? '' : '<button class="buttonGrid"><i  class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>')
                            + '</td>'
                        stringContent = stringContent + '<tr  class="vt-number">' + tr + '</tr>';
                    }
                }
                document.getElementById(id).innerHTML = stringContent;
            }
            //SettingHeightDiv();
        }
        function AS_Render_Each_Segment_Type(type, hour, day, date, dayofweek) {
            let typeName = '';
            switch (type) {
                case 1:
                    typeName = 'Date ' + ConvertStringYMD_DMY(date);
                    break;
                case 2:
                    typeName = 'Daily';
                    break;
                case 3:
                    typeName = AS_Render_Each_Segment_Dayofweek(dayofweek) + ' Weekly';
                    break;
                case 4:
                    typeName = 'Date ' + day + ' Monthly';
                    break;
                default:
                    break;
            }
            hour = '<span>' + hour + '</span>';
            typename = '<span>' + typeName + '</span>';
            let resulf = '<span>' + hour + ' | ' + typeName + '</span>'
            return resulf;
        }
        function AS_Render_Each_Segment_Dayofweek(dayofweek) {
            let resulf = '';
            switch (dayofweek) {
                case 0:
                    resulf = 'Sunday ';//'Chủ Nhật';
                    break;
                case 1:
                    resulf = 'Monday ';//'Thứ Hai';
                    break;
                case 2:
                    resulf = 'Tuesday ';//'Thứ Ba';
                    break;
                case 3:
                    resulf = 'Wednesday ';//'Thứ Tư';
                    break;
                case 4:
                    resulf = 'Thursday'//'Thứ Năm';
                    break;
                case 5:
                    resulf = 'Friday ';//'Thứ Sáu';
                    break;
                case 6:
                    resulf = 'Saturday ';//'Thứ Bảy';
                    break;
                default:
                    break;
            }
            return resulf;
        }
        function AS_Render_List_Type(data, id) {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                let dr = "";
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        if (i == 0) CurrentTypeChoose = item.type;
                        dr =
                            '<li class="nav-item" role="presentation">'
                             + '<a title="' + item.title + '" class="nav-link cursor-pointer item listitem_child" data-type="' + item.type + '" data-bs-toggle="pill" role ="tab">' + item.text + '</a>';
                            + '</li>'
                        stringContent = stringContent + dr;

                        //<img src="' + item.img + '" style="display: inline;width: 20px;">
                    }
                }

                document.getElementById(id).innerHTML = stringContent;
                EventLinkClick_TypeAlarmScheduler();
                AS_Hover_List();
            }

        }
        function AS_Hover_List() {
            $(".listmaster_render").hover(function () {
                let currentcolor = rgb2hex($(this).css("background-color"));
                if (currentcolor != "#e9ecef") $(this).css("background-color", "#8392ab47");
            }, function () {
                let currentcolor = rgb2hex($(this).css("background-color"));
                if (currentcolor != "#e9ecef") $(this).css("background-color", "transparent");

            });
        }
         $(document).ready(function () {
          @*   $('#AS_Total_All').html(" " + 0);
             $('#AS_Total_Done').html(" " + 0);*@
            $(".flatpickr").flatpickr({
                mode: "range",
                dateFormat: 'd-m-Y',
                enableTime: false,
            });
            var date = new Date();
            var firstDay = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            var lastDay = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            $("#AS_DateFilter").val(formatDateClient(firstDay) + ' to ' + formatDateClient(lastDay));

            CurrentEmployeeID = '@Model._CurrentEmployeeID';
            AS_Load_List();
            currentFlagToRaiseEvent = 1;
            LoadAlrmList_Scheduler();
            TriggerFirstLink();
            $('#AS_Table tbody').on('click', '.buttonDeleteClass', function (event) {
                let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
                AS_Delete(ID);
            });
            $('#AS_Table tbody').on('click', '.buttonEditClass', function (event) {
                let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
                AS_Edit(ID);
                event.preventDefault();
            });
            $('#AS_Table tbody').on('click', '.buttonActiveClass', function (event) {
                let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
                AS_Execute_Active(ID);
                event.preventDefault();
            });
        });
        function AS_Load_List() {
            AjaxLoad(url = "/ToDo/AlarmSchedule/MyAlarmScheduler_List/?handler=Initialize"
                , data = {
                }, async = true, error = null
                , success = function (result) {
                    _StatusScheduler_List = JSON.parse(result);

                    Load_Combo(_StatusScheduler_List, "AS_LoadCbb_Status", true);
                    $("#ScheduleStatusID").dropdown("refresh");
                    $("#ScheduleStatusID").dropdown("set selected", Number(_StatusScheduler_List[0].ID));
                });
            AjaxLoad(url = "/ToDo/AlarmSchedule/MyAlarmScheduler_List/?handler=InitializeDate"
                , data = {
                }, async = true, error = null
                , success = function (result) {
                    _AlarmScheduler_List = JSON.parse(result);

                    AS_Render_List_Type(_AlarmScheduler_List, "AS_Listtype");
                });

        }
        function LoadAlrmList_Scheduler() {
            if (currentFlagToRaiseEvent == 1) {
                let date = $('#AS_DateFilter').val() ? $('#AS_DateFilter').val() : new Date()
                AjaxLoad(url = "/ToDo/AlarmSchedule/MyAlarmScheduler_List/?handler=LoadScheduler"
                    , data = {
                        empid: CurrentEmployeeID,
                        date: date
                    }, async = true, error = null
                    , success = function (result) {
                        if (result != "0") {
                            let data = JSON.parse(result);
                            //debugger
                            _AlarmScheduler_List_timeline = JSON.parse(data[0]);
                            _AlarmScheduler_List_extension = JSON.parse(data[1]);
                            let da = data[2];
                            dateFrom_Scheduler = StringYMDTODate(da);
                            da = data[3];
                            dateTo_Scheduler = StringYMDTODate(da);
                            let _data = _AlarmScheduler_List_timeline.filter(word => word["status"] == 1);
                            if (_data.length == 0) {
                                $('#current_detail_progress_alarm_todo').hide();
                            }
                            else {
                                $('#current_detail_progress_alarm_todo').show();
                            }
                            AS_Create_DataMain_Initialize();
                        }
                    });
            }
        }
        function AS_Execute_Delete(CurrentID) {
            AjaxLoad(url = "/ToDo/AlarmSchedule/MyAlarmScheduler_List/?handler=DeleteItem"
                , data = {
                    CurrentID: CurrentID
                }, async = true, error = null
                , success = function (result) {
                    if (result == "1") {
                        notiSuccess();
                        //DeleteItemAlarmCookie(CurrentID, 1);
                        LoadAlrmList_Scheduler();
                        AS_Render_ByType();
                    } else {
                        notiError_SW();
                    }
                });
        }
        function AS_Delete(id) {
            const promise = notiConfirm();
            promise.then(function () { AS_Execute_Delete(id); }, function () { });
        }
        function AS_Add() {
            $("#DetailModal_Content").html('');
            $("#DetailModal_Content").load("/Todo/AlarmSchedule/AlarmScheduleDetail?CurrentType=" + CurrentTypeChoose + "&ver=" + versionofWebApplication);
            $('#DetailModal').modal('show');
            return false;
        }
        function AS_Edit(CurrentID) {
            $("#DetailModal_Content").html('');
            $("#DetailModal_Content").load("/Todo/AlarmSchedule/AlarmScheduleDetail?CurrentID=" + CurrentID + "&ver=" + versionofWebApplication);
            $('#DetailModal').modal('show');
            return false;
        }
        function AS_Execute_Active(CurrentID) {
            AjaxLoad(url = "/ToDo/AlarmSchedule/MyAlarmScheduler_List/?handler=ActiveItem"
                , data = {
                    CurrentID: CurrentID
                }, async = true, error = null
                , success = function (result) {
                    if (result != "0") {
                        notiSuccess();
                        UpdateAlarmCookie(JSON.parse(result)[0], 1);
                        LoadAlrmList_Scheduler();
                        AS_Render_ByType();
                    } else {
                        notiError_SW();
                    }
                });
        }
</script>
<style>
    .imagelistitem_detail {
    cursor: pointer;
    }
    .listitem_detail {
        cursor: pointer;
        border-radius: 12px;
    }
    .footer-timeline {
        margin-left: 44px;
    }
    .detail-comment {
        background-color: #eee;
        border-radius: 15px;
    }

    .row {
        --bs-gutter-x: none !important;
    }

    .card-content {
        width: -webkit-fill-available !important;
    }
    .moving-tab .nav-link:hover:not(.active) {
        color: white !important;
    }

    .moving-tab .nav-link {
        background: none !important;
        box-shadow: none !important;
        display: none !important;
    }

    .nav.nav-pills .nav-item {
        z-index: 0 !important;
    }

    .nav {
        display: block;
        flex-wrap: wrap;
        margin-top: 9px;
        margin-left: 9px;
        list-style: none;
    }
    .dateScheduler {
        padding-right: 10px;
        font-size: 11px;
        font-weight: 300;
        font-style: italic;
    }
    .listmaster_render {
        color: #2b0239 !important;
        font-size: 13px !important;
        text-align: center;
        width: 100%;
        font-weight: 800 !important;
        font-style: unset;
    }

    #AS_Detail_ContentCheck_List {
        max-height: 150px;
        overflow-y: auto;
        padding-top: 5px;
        padding-left: 10px;
        margin-bottom: 10px;
    }

    #AS_Detail_Content {
        max-height: 150px;
        overflow-y: auto;
    }
</style>

<script>css_require('/assests/dist/css/chat-page.css');</script>
