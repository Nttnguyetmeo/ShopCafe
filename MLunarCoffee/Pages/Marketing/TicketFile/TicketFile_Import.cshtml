@page
@model MLunarCoffee.Pages.Marketing.TicketFile.TicketFile_ImportModel
@{
    Layout = null;
}
<div class="row position-relative">
    <div id="TIMainProgress" class="col-12">
        <div class="card mb-3 card-plain border border-1">
            <div class="card-body p-3 form3" id="tiform3">
                <div class="row px-2">
                    <div class="col-12 col-md-12 col-xl-12 p-1">
                        <div class="card h-100 card-plain border-1 border-dashed">
                            <div class="card-body d-flex flex-column justify-content-center text-center">
                                <i class="fa fa-plus text-secondary mb-3" aria-hidden="true"></i>
                                <h5 class=" text-secondary"> @Local["Tải file"] (.xlsx /.xls) </h5>
                                <input type="file" placeholder="eg . @Local["Tải file"]" id="inputImportTicket" onchange="event.preventDefault();return TicketImport_HandleFile(event)" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" />
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-12 col-xl-12 p-1">
                        <div class="row pt-0 pb-3 px-2">
                            <div class="field col-12 p-1">
                                <label>@Local["Tên tệp"]</label>
                                <input id="txtFileName" class="form-control" name="name" type="text" placeholder="eg. @Local["Tên tệp"]" />
                            </div>
                            <div class="field col-12 p-1">
                                <label>@Local["Nguồn"]</label>
                                <div class="ui fluid search selection dropdown form-control" id="sourceType">
                                    <input type="hidden" name="sourceType" />
                                    <input class="search" autocomplete="off" tabindex="0" />
                                    <div class="default text">eg. @Local["Nguồn"]</div>
                                    <div id="cbbsourceType" class="menu" tabindex="-1">
                                    </div>
                                </div>
                            </div>
                            <div class="field col-12 p-1">
                                <label>@Local["Nhân viên"] marketing</label>
                                <div class="ui fluid search selection dropdown form-control" id="EmployeeMarID">
                                    <input type="hidden" name="sourceType" />
                                    <input class="search" autocomplete="off" tabindex="0" />
                                    <div class="default text">eg. @Local["Nhân viên"]</div>
                                    <div id="cbbEmployeeMar" class="menu" tabindex="-1">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 p-1">
                        <div id="TicketFileImport_InfoRecord" style="display:none;">
                            <span id="txtTotalRecord" class="badge badge-lg bg-gradient-success mt-2 me-2"></span>
                            <span id="txtTotalFailure" class="badge badge-lg bg-gradient-danger mt-2 me-2"></span>
                        </div>
                    </div>
                    <div class="col-12 p-1">
                        <p class="text-sm mb-0 text-danger fw-bold">@Local["Số ticket tải lên tối đa"]: <span id="txtTotalMaximumAllow"></span> </p>
                        <p class="text-sm mb-0 text-secondary">@Local["Số điện thoại phải là ký tự số. Nếu trường tên không có, hệ thống tự lấy số điện thoại làm tên. Dữ liệu bị trùng sẽ không được tải lên. Định dạng tệp tải lên"] .xlsx /.xls</p>
                    </div>
                </div>
                <div id="TIProgress" class="card card-plain border d-none mt-2">
                    <div class="card-body">
                        <div class="progress-wrapper ">
                            <div class="progress-info">
                                <div class="progress-percentage">
                                    <span class="font-weight-bold text-gradient text-primary">
                                        <span id="TIProgress_Percent">0</span>%
                                        <span>
                                            <span>(</span>
                                            <span id="TIProgress_TotalSuccess">0</span>
                                            <span>/</span>
                                            <span id="TIProgress_TotalAll">0</span>
                                            <span>)</span>
                                        </span>
                                    </span>
                                </div>
                            </div>
                            <div class="progress progress-lg">
                                <div id="TIProgress_Value" class="bg-gradient-primary h-100 mt-0 progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="d-flex mt-2 flex-column gap-1">
                    <div class="d-flex align-items-center">
                        <span class="text-sm text-dark pe-2">@Local["Hướng dẫn"]</span>
                        <span class="align-items-center d-flex" onclick="return TicketImport_ViewDataFields();">
                            <i class="fas fa-info-circle text-xs cursor-pointer pe-2 text-primary"></i>
                            <a class="text-sm border-bottom border-primary m-0 me-3" href="#">@Local["Thông tin"]</a>
                        </span>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="text-sm text-dark pe-2">@Local["Lấy mẫu"]</span>
                        <i class="fas text-xs text-primary pe-2 fa-download"></i>
                        <a href="/Teamplate/Teamplate.xlsx" class="text-sm border-bottom m-0 me-3 border-primary" target="_blank">@Local["Mặc định"]</a>
                        <i class="fas text-xs text-primary pe-2 fa-download"></i>
                        <a onclick="return TIDownloadTemplate()" class="text-sm border-bottom text-sm m-0 me-1 border-primary">@Local["Tùy chọn"]</a>
                    </div>
                </div>
            </div>

            <div class="card-footer">
                <div class="action_Save">
                    <div class="text-danger text-gradient text-sm font-weight-bold me-2" id="textShowMessageImport"></div>
                    <div class="action_Save-Content">
                        <a id="btnTicketExecute" form="tiform3" class="btn bg-gradient-primary m-0 btn-sm" onclick="event.stopPropagation(); return TicketImport_Execute()">@Local["Tải tệp lên"]</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require('/js/comon/Import.js');</script>

<script type="text/javascript">

    //#region // Init
    var TIPTemplate = [];
    var TIPCols;
    var TIPColsDefault = {
        Created: {
            Validation: {Name: "regExp", Value: /(([1][9]|[2][0-9])[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},
            ReplaceNull: {isReplace: 1, ColName: "", Value: ""},
            Warning: {Name: 'regExp', Value: '[0-9]{4}-(1[0-2]{1}|0[1-9]{1})-(0[1-9]{1}|[12]|3[01]{1})'}
        },
        //Tên không được rỗng nếu tên rỗng sẽ lấy sđt gán qua
        Name: {
            Validation: {Name: "empty", Value: ""}
            , ReplaceNull: {isReplace: 1, ColName: "Phone", Value: "Name"}
            , Warning: {Name: '', Value: ''}
        },
        Phone: {
            Validation: {Name: "regExp", Value: /^\d{8,}$/}
            , ReplaceNull: {isReplace: 1, ColName: "", Value: ""}
            , Warning: {Name: 'regExp', Value: '^(0|(84))[0-9]{9,16}$'}
        },
        Facebook: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: 'regExp', Value: '(facebook.com)'}
        },
        Email: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            ,Warning: {Name: '', Value: ''}
        },
        Address: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: '', Value: ''}
        },
        ServiceCare: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: '', Value: ''}
        },
        Birthday: {
            Validation: {Name: "regExp", Value: /(([1][9]|[2][0-9])[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/}
            , ReplaceNull: {isReplace: 1, ColName: "Value", Value: "1900-01-01"}
            , Warning: {Name: 'regExp', Value: '[0-9]{4}-(1[0-2]{1}|0[1-9]{1})-(0[1-9]{1}|[12]|3[01]{1})'}
        },
        Gender: {
            Validation: {Name: "regExp", Value: /m|f/}
            , ReplaceNull: {isReplace: 1, ColName: "Value", Value: "m"}
            , Warning: {Name: '', Value: ''}
        },
        Area: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: '', Value: ''}
        },
        TimeSlot: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: '', Value: ''}
        },
        Symbol: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: '', Value: ''}
        },
        Campaign: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: '', Value: ''}
        },
        ADS: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: '', Value: ''}
        },
        Note: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: '', Value: ''}
        },
        Gclid: {
            Validation: {Name: "", Value: ""}
            , ReplaceNull: {isReplace: 0, ColName: "", Value: ""}
            , Warning: {Name: '', Value: ''}
        },
    };
    var TIPDataExcelImport = [];
    let TIPMaxImportTicket = 5000;
    let TIPGender = {
        "m": {
            "ID": 60,
            "Name": "@Local["Nam"]"
        },
        "f": {
            "ID": 61,
            "Name": "@Local["Nữ"]"
        },
        "u": {
            "ID": 0,
            "Name": ""
        }
    }
    let TIProgressTotalSuccess = 0;
    let TIProgressTotalAll = 0;
    let TIProgressFileName = '';

    $(document).ready(function () {
        ToolPopper();
        TicketImport_SetDefault();
        TicketImport_Init();
        TIGetTemplate();
        CheckPermissionControlInPage(sys_PerControlMH, '@Model.CurrentPath');
    });
    async function TicketImport_SetDefault() {
        return new Promise((resolve, reject) => {
            $("#dtTableExecelImport").hide();
            $('#txtTotalMaximumAllow').text(formatNumber(TIPMaxImportTicket));
        })
    }
    async function TicketImport_Init() {
        return new Promise((resolve, reject) => {
            AjaxLoad(url = "/Marketing/TicketFile/TicketFile_Import/?handler=InitializeCombo"
                , data = {}
                , async = true
                , error = function () { notiError_SW(); }
                , success = function (result) {
                    if(result != '[]'){
                        let data = JSON.parse(result);
                        let dataSource = data.Source;
                        let dataEmployee = data.Employee;

                        Load_Combo(dataSource, "cbbsourceType", true);
                        Load_Combo(dataEmployee, "cbbEmployeeMar", true);
                        $("#EmployeeMarID").dropdown('refresh')
                        $("#EmployeeMarID").dropdown('set selected', sys_userID_Main);

                    }
                }
            );
        })
    }

    //#endregion

    //#region // Handle File Excel
    function TicketImport_HandleFile(e) {
        if (e.target.files.length > 0) {
            TIPDataExcelImport = [];
            TIProgressFileName = e.target.files[0].name;
            $("#filename").html(TIProgressFileName);
            $("#txtFileName").val(e.target.files[0].name);
            $("#TicketFileImport_InfoRecord").hide();
            $("#TIProgress").addClass('d-none');
            $("#TIProgress_Value").css({'width': '0%'});
            $("#btnTicketExecute").prop("disabled", false);

            handleFileImport(e, TIPCols, fnfinish = TicketImport_HandleFile_Finish
                , TIPMaxImportTicket);
        }
    }
    function TicketImport_HandleFile_Finish (data) {
        $("#textShowMessageImport").html("");
        $("#dtTableExecelImportBody").html("");
        $("#dtTableExecelImport").show();
        if (data.result == "success") {
            let datas = [];
            for ([key, value] of Object.entries(data.data)) {
                if (TIPGender[value.Gender]) {
                    value.GenderID = TIPGender[value.Gender].ID;
                } else {
                    value.GenderID = 61;
                }
                value.NameNoSign = (xoa_dau(value.Name)).toLowerCase();
                datas.push(value);
            }
            TIPDataExcelImport = datas;
            var total = TIPDataExcelImport.length;
            var failure = 0;
            for (let i = 0; i < TIPDataExcelImport.length; i++) {
                let dtSta = TIPDataExcelImport[i].Status;
                dtSta = dtSta.filter((item) => {return (item["iserr"] == 1)});
                if (dtSta && dtSta.length > 0) failure += 1;
            }

            $("#TicketFileImport_InfoRecord").show();
            $('#txtTotalRecord').html("@Local["Tổng dữ liệu tải lên"]: " + formatNumber(total));
            $('#txtTotalFailure').html("@Local["Dữ liệu thất bại"]: " + formatNumber(failure));
            if (typeof TFM_ViewTable === 'function') {
                $("#TFM_DetailContent").load('/Marketing/TicketFile/TicketFile_ImportTable?ver=' + versionofWebApplication,
                    () => {
                        TFM_ViewTable(TIProgressFileName);
                        if (typeof TIT_Reload === 'function') TIT_Reload($('#txtFileName').val());
                    }
                )
            }
        }
        else {
            $("#textShowMessageImport").html(data.data);
        }
    }
    //#endregion

    //#region // Execute
    function TicketImport_Execute() {
        let dataFilter = [];
        if (TIPDataExcelImport && TIPDataExcelImport.length > 0) {
            for (let i = 0; i < TIPDataExcelImport.length; i++) {
                let item = TIPDataExcelImport[i];
                let Err = item["Status"].filter((ite) => {return (ite["iserr"] == 1)}).length;
                if (Err == 0) {
                    dataFilter.push(item);
                }
            }
        }
        if (dataFilter && dataFilter.length != 0) {
            const promise = notiConfirm("@Local["Bạn có muốn tải lên"] " + formatNumber(dataFilter.length) + ' Ticket?');
            promise.then(function () {
                TicketImport_ExecuteMaster();
            }, function () { });
        }
        else {
            notiWarning("@Local["Không có dữ liệu để tải lên"]!")
        }
        return false;
    }
    function TicketImport_ExecuteMaster() {

        var sourceID = Number($('#sourceType').dropdown('get value')) ? Number($('#sourceType').dropdown('get value')) : 0;
        var dataLength = Number(TIPDataExcelImport.length) ? Number(TIPDataExcelImport.length) : 0;
        var userMar = Number($('#EmployeeMarID').dropdown('get value')) ? Number($('#EmployeeMarID').dropdown('get value')) : 0;
        var isDuplicate = Number($('#TIT_AllowDuplicate').dropdown('get value')) ? Number($('#TIT_AllowDuplicate').dropdown('get value')) : 0;

        var fileName = $('#txtFileName').val();
        $('#tiform3').form('validate form');
        if (sourceID == 0 || dataLength == 0 || fileName === "") {
            $("#textShowMessageImport").html("@Local["Kiểm tra dữ liệu, tên file hoặc chưa chọn nguồn"]!");
        }
        else {
            $("#textShowMessageImport").html("");
            if ($('#tiform3').form('is valid')) {
                AjaxLoad(url = "/Marketing/TicketFile/TicketFile_Import/?handler=ExcuteData"
                    , data = {
                        'sourceID': sourceID.toString(),
                        'fileName': fileName.toString(),
                        'userMar': userMar
                    }
                    , async = true
                    , error = function () { notiError_SW(); }
                    , success = function (result) {
                        if (result != "0") {
                            $("#TIProgress").removeClass('d-none');
                            $("#TableExecelImport").hide();
                            TicketImport_ExecuteEach(Number(result), TIPDataExcelImport, sourceID, userMar, isDuplicate);
                        }
                        else {
                            notiError_SW();
                        }
                    }
                    , sender = null
                    , before = function (e) {

                    }
                    , complete = function (e) {

                    }
                );
            }
        }
        return false;
    }
    async function TicketImport_ExecuteEach(id, data, source, userMar, isDuplicate) {
        return new Promise((resolve, reject) => {

            $("#btnTicketExecute").prop("disabled", true);
            var dataTicket = [];
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    let Err = item["Status"].filter((ite) => {return (ite["iserr"] == 1)}).length;
                    if (Err == 0) {
                        delete item["Status"];
                        dataTicket.push(item);
                    }
                }
            }

            TIProgressTotalAll = dataTicket.length;
            var dataSlice = sliceIntoChunks(dataTicket, 100);
            $("#TIProgress_TotalAll").html(formatNumber(TIProgressTotalAll));
            if (dataSlice && dataSlice.length != 0) {
                var promisesTicket = [];
                for (var i = 0; i < dataSlice.length; i++) {
                    promisesTicket.push(TicketImport_ExecuteItem(id, dataSlice[i], source, userMar, isDuplicate, i));
                }
                Promise.all(promisesTicket).then((values) => {
                    notiSuccessMess("@Local["Tải lên thành công"] " + formatNumber(TIProgressTotalSuccess) + '/' + formatNumber(TIProgressTotalAll));
                    $("#TIProgress").addClass("d-none");
                    $("#inputImportTicket").val("");
                    $("#txtFileName").val("");
                    $("#sourceType").dropdown("clear");
                    $("#TIProgress_Percent").html(0);
                    $("#TIProgress_TotalSuccess").html(formatNumber(0));
                    $("#TicketFileImport_InfoRecord").hide();
                    TIProgressTotalSuccess = 0;
                    TIProgressTotalAll = 0;
                    TIPDataExcelImport = [];
                    if (typeof TF_IM_Load === 'function') TF_IM_Load();
                    if (typeof TFM_ViewTableClose === 'function') TFM_ViewTableClose();
                }).catch(() => {
                    $("#TicketFileImport_InfoRecord").hide();
                    notiSuccessMess("@Local["Tải lên thành công"] " + formatNumber(TIProgressTotalSuccess) + '/' + formatNumber(TIProgressTotalAll));
                    $("#TIProgress").addClass("d-none");
                    if (typeof TF_IM_Load === 'function') TF_IM_Load();
                    if (typeof TFM_ViewTableClose === 'function') TFM_ViewTableClose();
                    TIProgressTotalSuccess = 0;
                    TIProgressTotalAll = 0;
                    $("#btnTicketExecute").prop("disabled", false);
                })
            }
            else {

            }
        });
    }
    async function TicketImport_ExecuteItem(id, data, source, userMar, isDuplicate, index) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                AjaxLoad(url = "/Marketing/TicketFile/TicketFile_Import?handler=ExcuteDataItem&ver=" + index
                    , data = {
                        'data': JSON.stringify(data),
                        'importID': id,
                        'source': source,
                        'userMar': userMar ?? 0,
                        'isDuplicate': isDuplicate ?? 0
                    }
                    , async = true
                    , error = function () { notiError_SW(); reject([]); }
                    , success = function (result) {
                        if (result != "0") {
                            var dataImport = JSON.parse(result);
                            if (dataImport && dataImport.length != 0 && dataImport[0].ISCOMPLETE == 1) {
                                var TotalImport = dataImport[0].TOTAL;
                                TIProgressTotalSuccess += TotalImport;
                                var precent = ((TIProgressTotalSuccess / TIProgressTotalAll) * 100).toFixed(0)
                                $("#TIProgress_Percent").html(precent);
                                $("#TIProgress_TotalSuccess").html(formatNumber(TIProgressTotalSuccess));
                                $("#TIProgress_Value").css({
                                    'width': precent + '%'
                                })
                            }
                            resolve();
                        }
                        else {
                            notiError("@Local["Tải lên thất bại"]!");
                            reject([]);
                        }
                    }
                    , sender = null
                    , before = function (e) {
                    }
                    , complete = function (e) {
                    }
                );
            }, 300)
        });
    }
    //#endregion

    //#region // Template
    async function TIGetTemplate (type = 'Ticket_Import') {
        return new Promise((resolve, reject) => {
            AjaxLoad(url = "/Marketing/TicketFile/TicketFile_Import/?handler=GetTeamplate"
                , data = {'type': type}
                , async = true
                , error = function () {notiError_SW();}
                , success = function (result) {
                    if (result != "[]" && result != "0") {
                        let data = JSON.parse(result);
                        TIPCols = TITemplateCol(data);
                        TIPTemplate = [data
                            .filter(v => v.IsRequired == 1)
                            .reduce((pre, arr) => {
                                pre[arr.Name] = decodeHtml("@Local["Tên cột"]: " + arr.Value + "\r\n"
                                    + (arr.TypeData != '' ? ('@Local["Định dạng"]: ' + arr.TypeData + '\r\n') : "")
                                    + (arr.ExampleValue != '' ? ('@Local["Giá trị mẫu"]: ' + arr.ExampleValue) : ""));
                                return pre;
                            }, {'STT': 1})];

                        resolve(result);
                    }
                    else {
                        TIPCols = TIPColsDefault;
                        resolve([]);
                    }
                }
                , sender = null
                , before = function (e) { }
                , complete = function (e) { }
            );
        })
    }
    function TITemplateCol (data) {
        let cols = TIPColsDefault;
        if (data != undefined && data.length != 0) {
            cols = {};
            let colitem = [];
            for (let m = 0; m < data.length; m++) {
                colitem = data[m];
                let colvalue = {};
                colvalue.Validation = {
                    "Name" : colitem.ValidationName,
                    "Value": colitem.ValidationValue,
                    "ColName": colitem.Value,
                    "ColFormat": colitem.TypeData,
                    "ColExam": colitem.ExampleValue
                };
                colvalue.ReplaceNull = {
                    "isReplace": colitem.isReplace,
                    "ColName": colitem.ReplaceCol,
                    "Value": colitem.ReplaceValue
                };
                colvalue.Warning = {
                    "Name": colitem.WarningName,
                    "Value": colitem.WarningValue
                };
                cols[colitem.Name] = colvalue;
            }
        }
        return cols;
    }
    function TIDownloadTemplate () {
        if (TIPTemplate != undefined && TIPTemplate.length!=0) {

            let worksheet = XLSX.utils.json_to_sheet(TIPTemplate);
            var workbook = XLSX.utils.book_new()
            XLSX.utils.book_append_sheet(workbook, worksheet, 'sheet1')
            const max_width = TIPTemplate.map(e => {wch: e.length});
            worksheet["!cols"] = max_width;
            XLSX.writeFile(workbook, 'Template.xls');
        }
    }
    function TicketImport_ViewDataFields(){
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Marketing/TicketFile/TicketFile_File_ViewDataFields?ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }
    //#endregion
</script>

<script>js_require('/js/main.js');</script>
<script>js_require('/js/customjs/custom-validation.js');</script>

<style>

    .upload-btn-wrapper {
        position: relative;
        overflow: hidden;
        display: inline-block;
    }

        .upload-btn-wrapper input[type=file] {
            font-size: 100px;
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            cursor: pointer;
        }

    #inputImportTicket {
        height: 100%;
        position: absolute;
        width: 100%;
        left: 0;
        cursor: pointer;
        opacity: 0;
    }

    .error_importrow {
        background: #c0a7a74f;
        color: #db2828;
    }

    .hiden {
        display: none;
    }
</style>

