@page
@model MLunarCoffee.Pages.Marketing.Call.HistoryCallByPhoneModel
@{
    Layout = null;
}

<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require('/js/LogCallCenter/LogCallGeneral.js');</script>
<div class="text-center">
    <button class="btn bg-gradient-primary btn-sm _tab_control_" data-tab="load_tab_audio" id="HCPB_loadLogPhone" onclick="event.preventDefault();return HCBP_ClickToShow();">@Local["Nhấn để tải"]</button>
</div>
<div class="border-0 p-4 mx-3 mb-3 bg-gray-100 border-radius-md text-center" style="display:none" id="HCBP_EmptyDiv">
    @Local["Không có dữ liệu"]
</div>
<div id="HCBP_Container" style="display: none">
    <div class="card-header pb-0 px-3 pt-2">
        <div class="d-flex">
            <div class="w-100">
                <div class="row ms-1">
                    <div class="col px-0 mx-2 me-3">
                        <div class="input-group flex-nowrap rounded-end position-relative">
                            <div class="input-group-text py-0 px-3 position-relative ">
                                <div id="HCBP_DateCall_MaxLimit" class="px-2 rounded-2 bg-gradient-primary text-white" style="border-radius: 10px !important;" title="" data-bs-toggle="tooltip" data-bs-original-title="Giới hạn ngày">
                                    <div class="text-sm">7</div>
                                </div>
                            </div>
                            <input class="flatpickr form-control input-group-text text-start flatpickr-input active" id="HCBP_DateCall" type="text" placeholder="Chọn ngày.." readonly="readonly">
                        </div>
                    </div>
                </div>
            </div>
            <div class="ms-2 col-auto my-auto flex-grow-0">
                <div class="h-100">
                    <div class="d-flex me-2 mt-lg-0 mt-3">
                        <button id="HCBP_ButtonView" class="btn bg-gradient-primary mb-0" style="min-width: 100px;" onclick="HCPB_LoadLogByPhone()">
                            OK
                        </button>
                        <button id="HCBP_ButtonReset" class="btn bg-gradient-dark ms-2 mb-0" style="min-width: 100px;" onclick="HCBP_Refresh()">@Local["Đặt lại"]</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-lg-flex mt-3">
            <div class="col-auto my-auto d-flex ms-2">
                <div class="pt-2  ms-auto">
                    <ul class="pagination">
                        <li class="page-item ">
                            <a id="HCPB_btnBackPage" class="page-link" onclick="event.preventDefault();return HCPB_LoadPageBack();" href="javascript:;">
                                <i class="fa fa-angle-left"></i>
                                <span class="sr-only"></span>
                            </a>
                        </li>
                        <li class="page-item active">
                            <a id="HCPB_currentPage" class="page-link">1</a>
                        </li>
                        <li class="page-item">
                            <a id="HCPB_btnNextPage" class="page-link" onclick="event.preventDefault();return HCPB_LoadPageNext();" href="javascript:;">
                                <i class="fa fa-angle-right"></i>
                                <span class="sr-only"></span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="ms-auto my-auto d-flex">
                <!-- #region button -->
                <div class="border-dashed border-1 border-secondary border-radius-md d-inline-flex ms-2 px-2 align-items-center justify-content-center " style="height: 33px;">
                    <h6 class="text-primary text-gradient mb-0 ">@Local["Tổng cuộc gọi"]</h6>
                    <h6 id="HCPB_totalCall" class="text-dark mt-2 ps-2">0</h6>
                </div>
                <div class="border-dashed border-1 border-secondary border-radius-md d-inline-flex ms-2 px-2 align-items-center justify-content-center " style="height: 33px;">
                    <h6 class="text-primary text-gradient mb-0 ">@Local["Thành công"]</h6>
                    <h6 id="HCPB_totalCallSuccess" class="text-dark mt-2 ps-2">0</h6>
                </div>
                <div class="border-dashed border-1 border-secondary border-radius-md d-inline-flex ms-2 px-2 align-items-center justify-content-center " style="height: 33px;">
                    <h6 class="text-primary text-gradient mb-0 ">@Local["Tổng phút"]</h6>
                    <h6 id="HCPB_totalTime" class="text-dark mt-2 ps-2">0</h6>
                </div>
                <div class="my-auto d-flex align-items-center">
@*                    <div class="icon-hover mx-1" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="@Local["Tải lại"]">
                        <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer" onclick="event.preventDefault(); return HCPB_LoadLogByPhone()"></i>
                    </div>*@
                    <div class="icon-hover mx-1" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="@Local["Xuất excel"]">
                        <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel" onclick="event.preventDefault(); return HCBP_exportData()" data-checkper="1"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card-body m-0 table-responsive">
        <div id="waiting_list_call" class="waitingdiv text-center" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div id="HCBP_dtTableArea" style="margin-top: 0px;">
            <table class="table vt-table mb-0" id="dtContentLog">
                <thead>
                    <tr role="row">
                        <th>#</th>
                        <th>@Local["Từ"]</th>
                        <th>@Local["Gọi đến"]</th>
                        <th>@Local["Nhân viên"]</th>
                        <th>@Local["Loại"]</th>
                        <th>@Local["Thời lượng"]</th>
                        <th>@Local["Tình trạng"]</th>
                        <th>@Local["Ngày gọi"]</th>
                        <th>@Local["Giờ gọi"]</th>
                        <th class="no-sort">@Local["Tệp ghi âm"]</th>
                    </tr>
                </thead>
                <tbody id="HCPB_dtContentLogBody">
                </tbody>
            </table>
        </div>
    </div>
</div>

<script type="text/javascript">
    var employeeName = '';
    var HCPB_totalCallSuccess = 0;
    var HCPB_currentPage = 1;
    var extCurrent = 0;
    var ser_dtConnectCall = "";
    var ser_phone1 = "";
    var ser_phone2 = "";
    var HCBP_dateFrom;
    var HCBP_dateTo;
    var HCPB_totalTime = 0;
    let dataExt = {};
    $(document).ready(function () {
        let typeScript = '@Model._Type_LinkJS';
        if (typeScript != '' && typeScript != '#') {
            js_require_notasync(typeScript, true);
        }

        ser_dtConnectCall = JSON.parse(_dtConnectCall)[0];
        ser_phone1 = decrypt_phone("@Model._Phone1");
        ser_phone2 = decrypt_phone("@Model._Phone2");

        HCBP_InitDateCall();
        ToolPopper();
        Checking_TabControl_Permission();
    });

    function HCBP_InitDateCall(){
        //DATE PICKER
        let firstDay = new Date();
        let lastDay = new Date();
        firstDay.setDate(firstDay.getDate() - 7); // minus the date
        HCBP_dateFrom = formatDateClient(firstDay);
        HCBP_dateTo = formatDateClient(lastDay);
        $("#HCBP_DateCall").flatpickr({
            mode: "range",
            dateFormat: 'd-m-Y',
            enableTime: false,
            maxDate: new Date(),
            onClose: function (selectedDates, dateStr, instance) {
                if (selectedDates.length == 1) {
                    instance.setDate([selectedDates[0], selectedDates[0]], true);
                }
                else if (selectedDates.length != 1) {
                    var diffDays = Math.abs(selectedDates[1] - selectedDates[0]) / (1000 * 60 * 60 * 24);
                    if (diffDays > 7) instance.setDate([selectedDates[0], selectedDates[0]], true);
                }
            }
        });
        $("#HCBP_DateCall").val(formatDateClient(firstDay) + ' to ' + formatDateClient(lastDay));
    }



    function HCPB_LoadLogByPhone() {
        HCPB_currentPage = 1;
        $("#HCPB_currentPage").html(HCPB_currentPage);
        CallLog_LoadCombo();
    }

    function CallLog_LoadCombo() {
        let date = $('#HCBP_DateCall').val() ? $('#HCBP_DateCall').val() : new Date();
        if (date.includes(" to ")) {
            date = date.replace(" to ", "#");
            HCBP_dateFrom = date.split('#')[0];
            HCBP_dateTo = date.split('#')[1];
        }
        else {
            HCBP_dateFrom = date;
            HCBP_dateTo = date;
        }
        AjaxLoad(url = "/Marketing/Call/HistoryCallByPhone/?handler=LoadExtension"
            , data = {}
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    dataExt = data.reduce((pre, arr) => {
                        pre[(arr.Ext).toString()] = arr;
                        return pre;
                    }, {})
                }
                CallLog_ViewDetail();
            }
        );

    }

    async function CallLog_ViewDetail() {
        return new Promise((resolve, reject) => {
            if (ser_dtConnectCall != undefined && ser_dtConnectCall.length != 0) {
                $('#HCPB_dtContentLogBody').html('')
                $("#waiting_list_call").show();
                $("#HCBP_ButtonView").addClass('disabled');
                $("#HCBP_ButtonReset").addClass('disabled');
                HCPB_CallLog_ViewDetailAsync();
            } else {
                //notiWarning("@Local["Callcenter không kết nối"]!");
            }
            resolve();
        })
    }

    function HCPB_Render_Call_Log_Execute(data) {
        if (data != undefined && data != null && data.length != 0) {
            HCPB_Render_Call_Log(data, "HCPB_dtContentLogBody");
            $('#HCPB_totalCallSuccess').html(HCPB_totalCallSuccess);
            $('#HCPB_totalTime').html(secondsToHms(HCPB_totalTime));
            Checking_TabControl_Permission();
        }

        $("#waiting_list_call").hide();
        $("#HCBP_ButtonView").removeClass('disabled');
        $("#HCBP_ButtonReset").removeClass('disabled');
        if (data.length == 0) {
            $("#HCPB_btnNextPage").parent().addClass('disabled');
        } else {
            $("#HCPB_btnNextPage").parent().removeClass('disabled');
        }
    }

    async function HCPB_CallLog_ViewDetailAsync() {
        return new Promise((resolve, reject) => {
            setTimeout(
                async () => {
                    var data = [];
                    var data1 = [];
                    var data2 = [];

                    if (ser_phone1.toString() != '' && typeof LoadLogCall_ByPhoneEx == 'function')
                        data1 = await LoadLogCall_ByPhoneEx(ser_dtConnectCall, HCBP_dateFrom, HCBP_dateTo, ser_phone1.toString(), HCPB_currentPage, 'phone', HCPB_Render_Call_Log_Execute);
                    if (ser_phone2.toString() != '' && typeof LoadLogCall_ByPhoneEx == 'function')
                        data2 = await LoadLogCall_ByPhoneEx(ser_dtConnectCall, HCBP_dateFrom, HCBP_dateTo, ser_phone2.toString(), HCPB_currentPage, 'phone', HCPB_Render_Call_Log_Execute);

                    data = data.concat(data1);
                    data = data.concat(data2);

                    HCPB_totalCallSuccess = 0;
                    HCPB_totalTime = 0;
                    $("#HCPB_dtContentLogBody").html('');
                    if (data != undefined && data != null && data.length != 0) {
                        HCPB_Render_Call_Log_Execute(data)
                    } else {       
                        $("#HCBP_ButtonView").removeClass('disabled');
                        $("#HCBP_ButtonReset").removeClass('disabled');
                        $("#HCPB_btnNextPage").parent().addClass('disabled');
                    }
                    if (HCPB_currentPage == 1) {
                        $("#HCPB_btnBackPage").parent().addClass('disabled');
                    }

                    $("#waiting_list_call").hide();
                    resolve()
                }
                , 100)
        })
    }
    function HCPB_Render_Call_Log(data, id)
    {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    let item = data[i];
                    if (item.status != undefined && item.status == 'SUCCESS') {
                        HCPB_totalCallSuccess = HCPB_totalCallSuccess + 1;
                        HCPB_totalTime = HCPB_totalTime + Number(item.duration)
                    }
                    let waitingAudio = ((item.duration > 0)
                        ? ('<div class="HCPB_Audio_Waitingdiv text-center">'
                            + '<div class="spinner-border spinner-border-sm text-primary" role="status">'
                            + '<span class="sr-only">Loading...</span>'
                            + '</div>'
                            + '<span>@Local["Đang tải"]</span>'
                            + '</div>')
                        : '');
                    let tr =
                        '<td data-sortvalue="' + Number(i + 1) + '">' + (i + 1) + '</td>'
                        + '<td class="_tab_control_" data-tab="phone_customer">' + item.from + '</td>'
                        + '<td class="_tab_control_" data-tab="phone_customer" >' + item.to + '</td>'
                        + '<td>' + HCPB_HCPB_Render_Call_Log_GetEmployee(item.from, item.to) + '</td>'                      
                        + '<td>' + item.direction + '</td>'
                        + ((item.recordUrl != 'null' && item.recordUrl != '')
                            ? ('<td><a target="_blank" href="' + item.recordUrl + '">' + secondsToHms(item.duration) + '</a></td>')
                            : ('<td id="HCPB_AudioDownload_' + ConvertDateTimeToTimeSpan(item.start) + '">' + secondsToHms(item.duration) + '</td>'))
                        + '<td>' + item.state + '</td>'
                        + '<td data-sortvalue="' + (new Date(item.start)).getTime() + '">' + yyyyMMddHHMMM_ddMMyyyy(item.start) + '</td>'
                        + '<td>' + yyyyMMddHHMMM_HHMM(item.start) + '</td>'
                        + ((item.recordUrl != 'null' && item.recordUrl != '')
                            ? ('<td><audio style="min-width: 250px; height: 35px;" controls> <source src="' + item.recordUrl + '" type="audio/wav"></audio></td>')
                            : '<td id="HCPB_Audio_' + ConvertDateTimeToTimeSpan(item.start) + '">'
                            + waitingAudio
                            + '</td>')
                    stringContent = stringContent + '<tr>' + tr + '</tr>';
                }
                HCPB_ReloadAudio(data);
                $('#HCPB_totalCall').html((data.length));
            }
            else {
                $('#HCPB_totalCall').html(0);
            }
            myNode.innerHTML = stringContent;
        }
    }

    async function HCPB_ReloadAudio(allbound)
    {
        new Promise(resolve =>
        {
            setTimeout(async () =>
            {
                if (ser_dtConnectCall?.Type != 10) {
                    $('.HCPB_Audio_Waitingdiv').addClass("d-none");
                    resolve();
                    return;
                }
                let count = 0;
                var dtAudio = [];
                let urlRecord = ser_dtConnectCall?.LinkDownloadAudio ?? "";
                let data1, data2;
                while (dtAudio.length <= 0 && count < 3) {
                    if (ser_phone1.toString() != '')
                        data1 = await LogCallGeneral_LoadAudio(ser_dtConnectCall, HCBP_dateFrom, HCBP_dateTo, ser_phone1.toString());
                    if (ser_phone2.toString() != '')
                        data2 = await LogCallGeneral_LoadAudio(ser_dtConnectCall, HCBP_dateFrom, HCBP_dateTo, ser_phone2.toString());

                    dtAudio = dtAudio.concat(data1);
                    dtAudio = dtAudio.concat(data2);
                    count++;
                }
                if (dtAudio.length > 0 && allbound) {
                    for (var i = 0; i < allbound.length; i++) {
                        let element = {};
                        let item = allbound[i];
                        if (item.duration <= 0) continue;
                        let result = dtAudio.filter(word => { return word && word["start_time"] == item.start});
                        if (result.length > 0) {
                            let record = result[0]?.filepath != "" ? urlRecord + result[0]?.filepath : "";
                            let audio = '<audio style="min-width: 250px; height: 35px;" controls> <source src="' + record + '" type="audio/wav"></audio>'
                            let audioDownload = '<a target="_blank" href="' + record + '">' + secondsToHms(item.duration) + '</a>'
                            $("#HCPB_Audio_" + ConvertDateTimeToTimeSpan(item.start))?.html(audio);
                            $("#HCPB_AudioDownload_" + ConvertDateTimeToTimeSpan(item.start))?.html(audioDownload);
                        }
                    }
                }
                else {
                    notiWarning('@Local["Không tải được tệp ghi âm"]')
                    $('.HCPB_Audio_Waitingdiv').addClass("d-none");
                }
                $('.HCPB_Audio_Waitingdiv').html("@Local["Tệp không tồn tại"]");
                resolve();
            }, 100)
        })
    }

    function HCPB_HCPB_Render_Call_Log_GetEmployee(from, to) {
        try {
            let result = "";
            if (from && dataExt[from] != undefined) {
                result = dataExt[from].Name;
            }
            else if (to && dataExt[to] != undefined) {
                result = dataExt[to].Name;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    function HCPB_LoadPageNext() {
        HCPB_currentPage += 1;
        $("#HCPB_currentPage").html(HCPB_currentPage);
        CallLog_ViewDetail();
        $("#HCPB_btnBackPage").parent().removeClass('disabled');
    }

    function HCPB_LoadPageBack() {
        if (HCPB_currentPage != 1) {
            HCPB_currentPage -= 1;
            $("#HCPB_currentPage").html(HCPB_currentPage);
            CallLog_ViewDetail();
        } else {
            $("#HCPB_btnBackPage").parent().addClass('disabled');
        }
    }

    function HCBP_Refresh() {
        HCBP_InitDateCall();
        HCPB_LoadLogByPhone();
    }

    function HCBP_exportData(){
        exportToExcel("dtContentLog", `${Outlang["Sys_lich_su_goi"]} ${HCBP_dateFrom}-${HCBP_dateTo}`);
        return false;
    }

    function HCBP_ClickToShow() {   
        $("#HCPB_loadLogPhone").hide();
        $("#HCBP_Container").show();
        HCPB_AuthorApi();
        HCPB_LoadLogByPhone();
    }

    function HCPB_AuthorApi()
    {
        if (ser_dtConnectCall != undefined && ser_dtConnectCall.length != 0) {
            if (typeof LogCallGeneral_Author === "function")
                LogCallGeneral_Author(ser_dtConnectCall);

        } else {
            $("#HCBP_Container").hide();
            $("#HCBP_EmptyDiv").show();
            notiWarning("@Local["Callcenter không kết nối"]!");
        }
    }
</script>



