@page
@model MLunarCoffee.Pages.Account.Fund.ClosingEntryHistory
@{
    if (@Model.layout == "none") Layout = null;
}
@Html.AntiForgeryToken()

<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require_notasync('/assets/js/plugins/chartjs.min.js', true);</script>


<div class="row">
    <div class="col px-0">
        <div class="card card-plain" id="ClosingMasterArea">
            <div class="vtcardheader card-header pb-0">
                <div class="left">
                    <h6 class="mb-0">@Local["Sổ quỹ - chốt sổ"]</h6>
                    <p class="text-sm mb-0">@Local["Tối đa thời gian chốt sổ quỹ là 30 ngày"]</p>
                </div>
                <div class="right overflow-unset">
                    <div class="wrap overflow-unset w-100">
                        <div class="wrapblock overflow-unset w-100">
                            <div class="vtcondition w-100">
                                <a class="sign" data-open="@Local["Hiển thị"]" data-close="@Local["Thu gọn"]" data-bs-toggle="collapse" aria-expanded="true"></a>
                                <div class="fulllap collapse collapsesticky show">
                                    <div class="row m-0">
                                        <div class="col-12 col-sm-4 col-lg-5 p-0 py-1 pe-sm-1">
                                            <div class="me-2 ui fluid search selection dropdown form-control" id="ClosingBranchID" onchange="ClosingEntry_Load()">
                                                <input type="hidden" name="branch" />
                                                <input class="search" autocomplete="off" tabindex="0" />
                                                <div class="default text">eg .@Local["Chi nhánh"]</div>
                                                <div id="cecbbBranch" class="menu" tabindex="-1">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-12 col-sm-8 col-lg-7 p-0 py-1 ps-sm-1">
                                            <input id="ClosingDate" class="flatpickr form-control" type="text" placeholder="eg .@Local["Ngày"]" style=" min-width: 170px;" onchange="ClosingEntry_Load()" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="wrapblock">
                            <button class=" btn btn-dark my-0" style="width: 200px;" onclick="event.preventDefault();return ClosingEntry_DefaultTime();">
                                @Local["Tải lại"]
                            </button>
                        </div>
                    </div>
                </div>        
            </div>
            <div class="card-body pt-2 pb-0">
                <div class="row">
                    <div class="col-md-6 col-lg-3 col-12 mt-4 mt-lg-0">
                        <div class="col-w-200 text-center mt-3 mx-auto position-relative" style="min-height: 200px;">
                            <div class="chart position-absolute top-50 start-50 translate-middle">
                                <canvas id="LockChart" class="chart-canvas" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-5 col-12 mt-4 mt-lg-0">
                        <div class="flex-grow-1 ">
                            <div class="m-2">
                                <span class="d-inline text-sm  ">
                                    @Local["Sổ quỹ"] - @Local["Từ ngày"]
                                    <span class="text-primary fw-bold d-inline" id="ClosingRangeFrom"></span>
                                    @Local["Đến ngày"]
                                    <span class="text-primary fw-bold d-inline" id="ClosingRangeTo"></span>
                                </span>
                            </div>
                            <div class="table-responsive m-4 mx-0 ms-n2">
                                <table class="table align-items-center mb-0">
                                    <tbody id="LockChartList">
                                    </tbody>
                                </table>
                            </div>
                            <div class="d-flex bg-gray-100 border-radius-lg p-3">
                                <h4 class="my-auto">
                                    <span id="ClosingAmount" class="text-dark fs-4  d-block me-1"></span>
                                    <span class="d-block text-dark text-sm">@Local["Tổng sổ quỹ"]</span>
                                </h4>
                                <button id="ClosingLockNew" class="ms-auto btn bg-gradient-primary btn-sm my-2 _tab_control_"
                                        data-tab="account_closing_entry" onclick="event.preventDefault();return ClosingDetail_New();">
                                    @Local["Chốt"]
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 col-lg-4 col-12 mt-4 mt-lg-0">
                        <div id="LastLockArea" class="card h-100">
                            <div class="card-header p-3 pb-0 position-relative">
                                <div>
                                    <div class="d-flex col-auto my-auto">
                                        <div class="d-flex">
                                            <img id="CloseLastImg" src="/default.png" class="avatar avatar-sm me-2" alt="avatar image" >
                                        </div>
                                        <div class="d-flex flex-column justify-content-center">
                                            <a id="CloseLastCode" class="lockitem cursor-pointer mb-0 text-sm"></a>
                                            <p id="CloseLastTime" class="text-sm my-0" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="@Local["Thông tin tạo"]" aria-describedby="tooltip111455"></p>
                                        </div>
                                    </div>
                                    <div class="position-absolute end-4 top-10 mt-1">
                                        <i id="CloseLastDelete" class="cursor-pointer text-sm fas fa-minus-circle text-danger"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body p-3 pb-0 pt-1">
                                <p id="CloseLastNote" class="text-sm mt-2"></p>
                                <ul class="list-unstyled mx-auto">
                                    <li class="d-flex">
                                        <p class="mb-0 text-sm">@Local["Tổng"]</p>
                                        <span id="CloseLastAmount" class="text-dark fw-bold ms-auto"></span>
                                    </li>
                                    <li> <hr class="horizontal dark my-2"></li>
                                    <li class="d-flex mt-2">
                                        <p class="mb-0 text-sm">@Local["Tiền mặt"]</p>
                                        <span id="CloseLastCash" class="text-dark fw-bold ms-auto"></span>
                                    </li>
                                    <li class="d-flex mt-2">
                                        <p class="mb-0 text-sm">@Local["Chuyển khoản"]</p>
                                        <span id="CloseLastTrans" class="text-dark fw-bold ms-auto"></span>
                                    </li>
                                    <li class="d-flex mt-2">
                                        <p class="mb-0 text-sm">@Local["POS"]</p>
                                        <span id="CloseLastPOS" class="text-dark fw-bold ms-auto"></span>
                                    </li>
                                    <li class="d-flex mt-2">
                                        <p class="mb-0 text-sm">@Local["Khác"]</p>
                                        <span id="CloseLastOther" class="text-dark fw-bold ms-auto"></span>
                                    </li>
                                </ul>
                            </div>
                            <ul class="list-group  p-3" id="ClosingContent" style=" max-height: 100px; overflow-y: auto; ">
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row px-2 position-relative">
                    <div id="ClosingValue_Wait" class="waitingdiv text-center position-absolute top-0 start-50 translate-middle-x" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">@Local["Đang tải"]...</span>
                        </div>
                    </div>
                    <div class="d-lg-flex">
                        <div class="col-auto my-auto">
                        </div>
                        <div class="ms-auto my-auto d-flex ">
                            <div class="d-flex align-items-center me-2" id="tab_teeth_type">
                                <div>
                                    <div class="ui dropdown text-dark fw-bold text-sm border-0" id="ClosingValue_MethodID" onchange="ClosingValue_Change();" tabindex="0">
                                        <i class="dropdown icon"></i>
                                        <input type="hidden" value="3">
                                        <div class="text">@Local["Hình thức"]</div>
                                        <div id="ClosingValue_cbbMethod" class="menu" tabindex="-1">
                                            <div class="item" data-value="1">@Local["Tiền mặt"]</div>
                                            <div class="item" data-value="2">@Local["Chuyển khoản"]</div>
                                            <div class="item" data-value="3">@Local["POS"]</div>
                                            <div class="item" data-value="4">@Local["Khác"]</div>
                                            <div class="item active selected" data-value="0">@Local["Hình thức"]</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="icon-hover mx-1" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="@Local["Xuất excel"]" aria-describedby="tooltip111455">
                                <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel" onclick="event.preventDefault(); return ClosingValue_Export()" data-checkper="1"></i>
                            </div>
                        </div>
                    </div>
                    <div class="m-0 my-3 mobile-responsive">
                        <table class="table vt-table mb-0" id="ClosingValue_Content">
                            <thead>
                                <tr>
                                    <th rowspan="2">@Local["#"]</th>
                                    <th colspan="4">@Local["Chi tiết"]</th>
                                    <th colspan="2">@Local["Thu"]/@Local["Chi"]</th>
                                    <th colspan="4">@Local["Hình thức"]</th>
                                    <th rowspan="2">@Local["Tồn"]</th>
                                </tr>
                                <tr>
                                    <th style="min-width:120px">@Local["Thời gian"]</th>
                                    <th>@Local["Chứng từ"]</th>
                                    <th>@Local["Loại"]</th>
                                    <th>@Local["Khách hàng"]</th>
                                    <th>@Local["Thu"]</th>
                                    <th>@Local["Chi"]</th>
                                    <th>@Local["Tiền mặt"]</th>
                                    <th>@Local["Chuyển khoản"]</th>
                                    <th>@Local["POS"]</th>
                                    <th>@Local["Khác"]</th>
                                </tr>
                            </thead>
                            <tbody id="ClosingValue_ContentBody">
                            </tbody>
                        </table>
                    </div>
                    <button class="btnsysmore btn btn-secondary w-100 p-1  position-relative" onclick="ClosingValue_RenderMore()">
                        @Local["Xem thêm"]
                    </button>
                </div>            
                
            </div>
        </div>
        <div id="ClosingDetailArea" class="row">
        </div>
    </div>
</div>s



    

<script type="text/javascript">
    let ClosingFlag = 0;
    let DataUser;
    let DataEntry = [];
    let DataEntryMain;
    let IndexEntry = 0;
    let Entry_Amount = 0, Entry_AmountCash = 0, Entry_AmountTrans = 0, Entry_AmountPOS = 0, Entry_AmountOther = 0;

    $(document).ready(function () {
        ToolPopper();
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data) {
                DataUser = data[0];
                $("#ClosingValue_MethodID").dropdown("refresh");
                $("#ClosingValue_MethodID").dropdown("set selected", "0");
                ClosingEntry_Initial();
            });
    });

    //#region // Master


    function ClosingEntry_Initial() {

        AjaxLoad(url = "/Account/Fund/ClosingEntryHistory/?handler=Initialize"
            , data = {}, async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    let DataBranch = JSON.parse(result);
                    Load_Combo(DataBranch, "cecbbBranch", true);
                    $("#ClosingBranchID").dropdown("refresh");
                    $("#ClosingBranchID").dropdown("set selected", Number(@Model._branchID));
                    ClosingFlag = 1;
                    ClosingEntry_DefaultTime()
                }
            });
    }
    function ClosingEntry_DefaultTime() {
        $("#ClosingDate").flatpickr({
            dateFormat: 'd-m-Y H:i:s',
            enableTime: true,
            defaultDate: new Date(),
            maxDate: new Date()
        });
        ClosingEntry_Load();
    }
    function ClosingEntry_Load() {
        if (ClosingFlag == 1) {

            var branchid = (Number($('#ClosingBranchID').dropdown('get value')) ? Number($('#ClosingBranchID').dropdown('get value')) : 0);
            let date = $('#ClosingDate').val() ? $('#ClosingDate').val() : new Date();
            AjaxLoad(url = "/Account/Fund/ClosingEntryHistory/?handler=LoadHistory"
                , data = { date: date, branchid: branchid }, async = true, error = null
                , success = function (result) {
                    if (result != "0") {
                        let data = JSON.parse(result);
                        if (data != undefined && data.length != 0) {

                            ClosingEntry_HistoryRender(data, 'ClosingContent');

                            let lastlock = data[0];
                            $("#CloseLastImg").attr('src', lastlock.CreatedAvatar != '' ? lastlock.CreatedAvatar : Master_Default_Pic);
                            $("#CloseLastCode").html(lastlock.Code);

                            $("#CloseLastCode").attr('data-id', lastlock.ID);
                            $("#CloseLastNote").html(lastlock.Content);
                            $("#CloseLastAmount").html(formatNumber(lastlock.Amount));
                            $("#CloseLastCash").html(formatNumber(lastlock.AmountCash));
                            $("#CloseLastTrans").html(formatNumber(lastlock.AmountTrans));
                            $("#CloseLastPOS").html(formatNumber(lastlock.AmountPOS));
                            $("#CloseLastOther").html(formatNumber(lastlock.AmountOther));
                            $("#CloseLastTime").html(GetDateTime_String_DMYHM(lastlock.DateLock) + ' ' + lastlock.CreatedName);
                            if (lastlock.IsEdit == 0) $('#CloseLastDelete').hide();
                            else {
                                $('#CloseLastDelete').show();
                                $("#CloseLastDelete").attr('data-id', lastlock.ID);
                            }
                            $('#LastLockArea').removeClass('d-none');
                        }
                        else {
                            $('#LastLockArea').addClass('d-none');
                        }

                    }
                }, sender = null
            );
            ClosingValue_LoadChart(date, branchid);
            ClosingValue_Load(date, branchid);
        }
    }
    function ClosingValue_LoadChart(date, branchid) {
        new Promise((resolve, reject) => {
            AjaxLoad(url = "/Account/Fund/ClosingEntryHistory/?handler=LoadTotal"
                , data = { date: date, branchid: branchid }, async = true, error = null
                , success = function (result) {
                    if (result != "0") {
                        let datas = JSON.parse(result);
                        ClosingValue_Fill(datas.Table[0]);
                        ClosingValue_FillChart(datas.Table1[0]);
                    }
                }
            );
            resolve();
        });
    }
    async function ClosingValue_Load(date, branchid) {
        new Promise((resolve, reject) => {
            AjaxLoad(url = "/Account/Fund/ClosingEntryHistory/?handler=LoadDetail"
                , data = { date: date, branchid: branchid }, async = true, error = null
                , success = function (result) {
                    if (result != "0") {
                        let data = JSON.parse(result);
                        DataEntryMain = data;
                        $("#ClosingValue_ContentBody").empty();
                        IndexEntry = 0;
                        Entry_Amount = 0, Entry_AmountCash = 0, Entry_AmountTrans = 0, Entry_AmountPOS = 0, Entry_AmountOther = 0;
                        DataEntry = sliceIntoChunks(JSON.parse(JSON.stringify(data)), 500);
                        fnRenderBlock(DataEntry[IndexEntry], "ClosingValue_ContentBody"
                            , blocknum = 100
                            , fnrender = ClosingValue_Render
                            , fnsuccess = null
                        );

                    }
                },
                sender = null,
                before = function (e) {
                    $("#ClosingValue_Wait").show();
                },
                complete = function (e) {
                    $("#ClosingValue_Wait").hide();
                }
            );
            resolve();
        });
    }
    function ClosingValue_RenderMore() {
        IndexEntry = IndexEntry + 1;
        fnRenderBlock(DataEntry[IndexEntry] ?? [], "ClosingValue_ContentBody"
            , blocknum = 100
            , fnrender = ClosingValue_Render
            , fnsuccess = null
        );
    }

    async function ClosingEntry_HistoryRender(data, id) {
        new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    for (var i = 1; i < data.length; i++) {
                        let item = data[i];
                        let objuser = Fun_GetObject_ByID(DataUser, item.Created_By);


                        let tr =
                            ` <li  class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
                                                <div class="d-flex ms-2 align-items-center">
                                                    <div class="icon icon-shape icon-sm me-3 text-center">
                                                         <img class="avatar avatar-sm m-0" src="${objuser.Avatar}" alt="label-image">
                                                    </div>
                                                    <div class="d-flex flex-column">
                                                        <a  data-id="${item.ID}" class="cursor-pointer lockitem text-primary text-sm mb-0">${item.Code}</a>
                                                         <h6 class="text-dark text-sm mb-0">${GetDateTime_String_DMYHM(item.DateLock) + ' ' + objuser.Name}</h6>
                                                    </div>
                                                </div>

                                            </li>
                                            `;
                        stringContent = stringContent + tr;
                    }
                }
                myNode.innerHTML = stringContent;
            }
            ClosingEntry_Event();
            resolve();
        });
    }
    function ClosingEntry_Event() {
        $('.lockitem').unbind('click').click(function () {
            let id = $(this).attr('data-id');
            $('#ClosingMasterArea').hide();
            $("#ClosingDetailArea").empty();
            $("#ClosingDetailArea").load("/Account/Fund/ClosingEntryView?CurrentID=" + id);
            $('#ClosingDetailArea').show();
        });
        $('#CloseLastDelete').unbind('click').click(function () {
            let id = $(this).attr('data-id');
            const promise = notiConfirm();
            promise.then(function () { ClosingEntry_HandleDelete(id); }, function () { });


        });
    }
    function ClosingEntry_HandleDelete(id) {

        AjaxLoad(url = "/Account/Fund/ClosingEntryHistory/?handler=DeleteItem"
            , data = { "CurrentID": id }, async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    syslog_acc('d', val = result);
                    ClosingEntry_DefaultTime();
                }
                else {
                    notiError_SW();
                }
            }, sender = null
        );
    }
    //#endregion

    //#region // Value
    async function ClosingValue_Fill(info) {
        new Promise((resolve, reject) => {
            setTimeout(() => {
                if (info != undefined) {

                    if (!info.DateFrom.includes('1900')) $("#ClosingRangeFrom").html(GetDateTime_String_DMYHMSS(info.DateFrom))
                    else $("#ClosingRangeFrom").html('');
                    if (!info.DateTo.includes('1900')) $("#ClosingRangeTo").html(GetDateTime_String_DMYHMSS(info.DateTo))
                    else $("#ClosingRangeTo").html('');
                    if (Number(info.IsLockNew == 0)) {
                        $('#ClosingLockNew').prop('disabled', true);
                        $('#ClosingLockNew').addClass('opacity-1');
                    }
                    else {
                        $('#ClosingLockNew').prop('disabled', false);
                        $('#ClosingLockNew').removeClass('opacity-1');
                    }

                }
            }, 100);
            resolve();
        });
    }
    async function ClosingValue_FillChart(data) {
        new Promise((resolve, reject) => {
            if (data != undefined) {
                $("#ClosingAmount").html(formatNumberToMilion(data.Total));
                let datarepot = [];
                let e = {}, e1 = {}, e2 = {}, e3 = {};
                e.Name = decodeHtml('@Local["Tiền mặt"]'); e.Amount = data.Cash;
                datarepot.push(e);
                e1.Name = decodeHtml('@Local["Chuyển khoản"]'); e1.Amount = data.Trans;
                datarepot.push(e1);
                e2.Name = decodeHtml('@Local["POS"]'); e2.Amount = data.POS;
                datarepot.push(e2);
                e3.Name = decodeHtml('@Local["Khác"]'); e3.Amount = data.Other;
                datarepot.push(e3);

                ReportPie_Description(datarepot, 'Name', 'Amount', 'LockChartList');
                rp_pie("LockChart", datarepot, 'Name', 'Amount');
            }
            resolve();
        });
    }
    async function ClosingValue_Render(data, id) {
        new Promise((resolve, reject) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {

                    let stringContent = '';
                    if (data && data.length > 0) {
                        for (var i = 0; i < data.length; i++) {
                            let item = data[i];
                            let type = ClosingValue_RenderInout(item.Type, Number(item.Amount));
                            let inamount = type == 'in' ? item.Amount : 0;
                            let outamount = type == 'out' ? item.Amount : 0;
                            let classname = item.Type == 9 ? 'detail vt-number text-white bg-gradient-info' : 'detail vt-number';

                            if (item.Type != 9) {
                                classname = classname + ((item.AmountCash != 0) ? ' cash' : '');
                                classname = classname + ((item.AmountTransfer != 0) ? ' trans' : '');
                                classname = classname + ((item.AmountPOS != 0) ? ' pos' : '');
                                classname = classname + ((item.AmountCash != 0 && item.AmountTransfer != 0 && item.AmountPOS != 0) ? ' other' : '');
                                Entry_Amount = Entry_Amount + inamount - outamount;
                                Entry_AmountCash = Entry_AmountCash + (item.AmountCash == 0 ? 0 : inamount) - (item.AmountCash == 0 ? 0 : outamount);
                                Entry_AmountTrans = Entry_AmountTrans + (item.AmountTransfer == 0 ? 0 : inamount) - (item.AmountTransfer == 0 ? 0 : outamount);
                                Entry_AmountPOS = Entry_AmountPOS + (item.AmountPOS == 0 ? 0 : inamount) - (item.AmountPOS == 0 ? 0 : outamount);
                                //Entry_AmountOther = Entry_AmountOther + (item.AmountCash != 0 ? 0 : inamount) - (item.AmountCash != 0 ? 0 : outamount);
                            }
                            else {
                                Entry_Amount = item.Amount;
                                Entry_AmountCash = item.AmountCash;
                                Entry_AmountTrans = item.AmountTransfer;
                                Entry_AmountPOS = item.AmountPOS;
                                //Entry_AmountOther = item.Amount - item.AmountCash;
                            }
                            let amountOther = item.Amount - item.AmountCash - item.AmountTransfer - item.AmountPOS;
                            let tr =
                                `   <td class="vt-number-order"></td>
                                                    <td>${ConvertDateTimeUTC_DMYHM(item.Date)}</td>
                                                    <td>${item.Code}</td>
                                                    <td>${ClosingValue_RenderType(item.Type)}</td>
                                                    <td>${item.CustCode}</td>
                                                    <td>${inamount == 0 ? '' : formatNumber(inamount)}</td>
                                                    <td>${outamount == 0 ? '' : formatNumber(outamount)}</td>
                                                    <td>${item.AmountCash == 0 ? '' : formatNumber(item.AmountCash)}</td>
                                                    <td>${item.AmountTransfer == 0 ? '' : formatNumber(item.AmountTransfer)}</td>
                                                    <td>${item.AmountPOS == 0 ? '' : formatNumber(item.AmountPOS)}</td>
                                                    <td>${(amountOther == 0) ? '' : formatNumber(amountOther)}</td>
                                                    <td>${formatNumber(Entry_Amount)}</td>
                                                `;
                            stringContent += '<tr class="' + classname + '" role="row">' + tr + '</tr>';
                        }
                        Entry_AmountOther = Entry_Amount - Entry_AmountCash - Entry_AmountTrans - Entry_AmountPOS;
                    }
                    myNode.insertAdjacentHTML('beforeend', stringContent);
                }
                resolve();
            }, 100);

        });
    }
    function ClosingValue_RenderInout(type, amount) {
        if (type == 0 || type == 1 || type == 2 || type == 3) {
            //if (amount >= 0) return 'in';
            //else return 'out';
            return 'in';
        }
        else if (type == 5 || type == 6 || type == 7 || type == 8 || type == 10) return 'out';
        else if (type == 4) return 'in';
        else return '';
    }
    function ClosingValue_RenderType(type) {
        switch (type) {
            case 0:
                return decodeHtml('@Local["Dịch vụ"]');
                break;
            case 1:
                return decodeHtml('@Local["Tiền cọc"]');
                break;
            case 2:
                return decodeHtml('@Local["Thẻ trả trước"]');
                break;
            case 3:
                return decodeHtml('@Local["Thuốc"]');
                break;
            case 4:
                return decodeHtml('@Local["Thu khác"]');
                break;
            case 5:
                return decodeHtml('@Local["Chi khác"]');
                break;
            case 6:
                return decodeHtml('@Local["Labo"]');
                break;
            case 7:
                return decodeHtml('@Local["Nhà cung cấp"]');
                break;
            case 8:
                return decodeHtml('@Local["Người giới thiệu"]')
                break;
            case 9:
                return decodeHtml('@Local["Đầu kỳ"]');
                break;
            case 10:
                return decodeHtml('@Local["Tiền cọc"] - @Local["Nhà cung cấp"]');
                break;
        }
    }
    function ClosingValue_Export() {
        var dataHeader = {
            "#": ["@Local["#"]", (value, { }, index) => { return index + 1; }],
            "Date": ["@Local["Thời gian"]", (v) => { return ConvertDateTimeUTC_DMYHM(v) }],
            "Code": ["@Local["Chứng từ"]"],
            "Type": ["@Local["Loại"]", (v) => { return ClosingValue_RenderType(v) }],
            "CustCode": ["@Local["Khách hàng"]"],
            "THU": ["@Local["Thu"]", (v, { Type, Amount }) => {
                let type = ClosingValue_RenderInout(Type, Number(Amount))
                if (type == 'in') return Amount;
                else return 0;
            }],
            "CHI": ["@Local["Chi"]", (v, { Type, Amount }) => {
                let type = ClosingValue_RenderInout(Type, Number(Amount))
                if (type == 'out') return Amount;
                else return 0;
            }],
            "cash": ["@Local["Tiền mặt"]", (v, { AmountCash }) => { return AmountCash }],
            "transfer": ["@Local["Chuyển khoản"]", (v, { AmountTransfer }) => { return AmountTransfer }],
            "pos": ["@Local["POS"]", (v, { AmountPOS }) => { return AmountPOS }],
            "orther": ["@Local["Khác"]", (v, { Amount, AmountCash, AmountTransfer, AmountPOS }) => { return Amount - AmountCash - AmountTransfer - AmountPOS }]
        }
        exportJsonToExcel(Outlang['Danh_sach_thu_chi'], DataEntryMain, dataHeader);
        syslog_acc('e', val = '');
    }
    function ClosingValue_Change() {
        let val = $("#ClosingValue_MethodID").dropdown("get value") ? Number($("#ClosingValue_MethodID").dropdown("get value")) : 0;
        if (val == 0) $('#ClosingValue_ContentBody .detail').removeClass('d-none');
        else $('#ClosingValue_ContentBody .detail').addClass('d-none');
        if (val == 1) $('#ClosingValue_ContentBody .cash').removeClass('d-none');
        if (val == 2) $('#ClosingValue_ContentBody .trans').removeClass('d-none');
        if (val == 3) $('#ClosingValue_ContentBody .pos').removeClass('d-none');
        if (val == 4) $('#ClosingValue_ContentBody .other').removeClass('d-none');
    }
    //#endregion

    //#region // Detail And Other
    function ClosingDetail_New() {
        $('#ClosingMasterArea').hide();
        $("#ClosingDetailArea").empty();
        $("#ClosingDetailArea").load("/Account/Fund/ClosingEntryLock");
        $('#ClosingDetailArea').show();
    }
    function ClosingDetail_Cancel() {
        $('#ClosingDetailArea').empty();
        $('#ClosingDetailArea').hide();
        $('#ClosingMasterArea').show();
    }
    function ReportPie_Description(data, name, number, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            let TotalPaid = 0;
            let TotalPer = 0;
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    TotalPaid += Number(data[i][number]);
                }

                for (let j = 0; j < data.length; j++) {
                    let item = data[j];
                    let percent = (j != data.length - 1) ? ((TotalPaid != 0) ? (Number(item[number]) * 100 / TotalPaid).toFixed(2) : 0) : (100 - TotalPer).toFixed(2);
                    TotalPer += !isNaN(Number(percent)) ? Number(percent) : 0;
                    let _color = colorChart[j % colorChart.length];

                    let tr = '<td>'
                        + '<div class="d-flex px-2 py-0">'
                        + '<span class="badge me-3" style="padding: 10px;border: 2px solid ' + _color + ';background-color:' + _color + '78"> </span>'
                        + '<div class="d-flex flex-column justify-content-center">'
                        + '<h6 class="mb-0 text-sm">' + item[name] + '</h6>'
                        + '</div>'
                        + '</div>'
                        + '</td>'
                        + '<td class="align-middle text-end text-sm">'
                        + '<span class="text-md pe-2 text-dark fw-bold">' + formatNumberToMilion(item[number]) + ' </span>'
                        + '<span class="text-md" style="color:' + _color + '"> ' + percent + ' % </span>'

                        + '</td>'

                    stringContent = stringContent + '<tr>' + tr + '</tr>';
                }
            }
            document.getElementById(id).innerHTML = stringContent;
        }
    }
    //#endregion
</script>


<script>js_require('/js/main.js')</script>

