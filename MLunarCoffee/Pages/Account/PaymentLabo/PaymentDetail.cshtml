@page
@model MLunarCoffee.Pages.Account.PaymentLabo.PaymentDetail
@{
    Layout = null;
}
@Html.AntiForgeryToken()

<div class="card">
    <div id="InsDetail_MainContent" class="d-none  row m-2">
        <div class="col-md-5 col-xl-4 mt-md-0 mt-4">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-lg-flex">
                        <div class="col-auto my-auto">
                            <div class="h-100">
                                <h6 class="mb-0">@Local["Thanh toán"]</h6>
                                <p class="text-sm mb-0">@Local["Thanh toán cho nhà cung cấp"]</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-body pt-2 ">
                    <div class="row px-1">
                        <div class="field col-12 px-1 mt-2">
                            <label>@Local["Chi nhánh"]</label>
                            <div class="ui fluid search selection dropdown form-control" id="InsDetail_Branch">
                                <input type="hidden" name="branch" />
                                <i class="dropdown icon"></i>
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">@Local["Chi nhánh"]</div>
                                <div id="cbbInsDetail_Branch" class="menu" tabindex="-1">
                                </div>
                            </div>
                        </div>

                        <div class="field col-12 col-xl-6 px-1 mt-2">
                            <label>@Local["Hình thức thanh toán"]</label>
                            <div class="ui fluid search selection dropdown form-control" id="InsDetail_Method" onchange="event.preventDefault(); InsDetail_changePayMethod();">
                                <input type="hidden" name="paymentMethod" />
                                <i class="dropdown icon"></i>
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg. @Local["Phương thức"]</div>
                                <div id="cbbInsDetail_Method" class="menu" tabindex="-1">
                                </div>
                            </div>
                        </div>
                        <div class="field col-12 col-xl-6 p-1">
                            <label>@Local["Chi tiết"]</label>
                            <div class="ui fluid search selection dropdown disabled form-control" id="InsDetail_MethodType">
                                <input type="hidden" name="paymentMethodType" class="input payment" />
                                <i class="dropdown icon"></i>
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg .@Local["Chi tiết"]</div>
                                <div id="InsDetail_CbbMethodType" class="menu" tabindex="-1">
                                </div>
                            </div>
                        </div>
                        <div id="InsDetail_DateDiv" class="field col-12 col-xl-12 px-1 mt-2 d-none">
                            <label>@Local["Ngày tạo"]</label>
                            <input id="InsDetail_Date" class="form-control flatpickr" type="text" placeholder="eg .@Local["Ngày"]" />
                        </div>
                        <div class="field col-12 col-xl-12 px-1 mt-2">
                            <label>@Local["Tổng tiền"]</label>
                            <input id="InsDetail_Amount" type="text" class="form-control money" />
                        </div>
                        <div class="field col-12 col-xl-12 px-1 mt-2">
                            <label>@Local["Nội dung"]</label>
                            <textarea class="form-control" id="InsDetail_Content" placeholder="eg .@Local["Nội dung"]" rows="3" name="content" />
                        </div>
                    </div>


                </div>


            </div>
        </div>
        <div class="col-md-7 col-xl-8">

            <div class="row mt-3 mt-lg-0 mx-0 p-2">
                <div class="row align-items-center">
                    <div class="col-sm-auto mt-2 my-auto">
                        <div class="h-100">
                            <h5 id="InsDetail_Name" class="mb-1 font-weight-bolder">
                            </h5>
                            <div class="d-flex">
                                <p id="InsDetail_Code" class="mb-0 text-dark text-sm"> </p>
                                <p class="text-dark mx-2 mb-0 text-sm">@Local["Công nợ"]: </p>
                                <p id="InsDetail_Depit" class="mb-0 text-dark text-sm"> </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-auto ms-sm-auto mt-sm-0 mt-3 d-flex">
                        <div id="InsbtnAuto" class="d-none">
                            <label class="form-check-label mb-0">
                                <small>@Local["Tự động"]</small>
                            </label>
                            <div class="form-check form-switch ms-2">
                                <input id="InsDetailAuto" class="form-check-input" type="checkbox" checked="">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="pt-4 ps-0">
                    <ul id="InsDetailList" class="list-group">
                    </ul>
                    <a id="InsbtnMore" class="btnsysmore d-flex justify-content-center cursor-pointer w-100 p-1 mt-1 text-xs d-none" onclick="InsDetail_LoadToPay()">@Local["Xem thêm"]</a>
                </div>
                <div class="my-3">
                    <div class="d-lg-flex">
                        <div class="ms-auto my-auto mt-1">
                            <div id="accdetail_check" class="text-center text-md text-dark" style="min-width: 250px;">
                                <span class="text-sm text-dark font-weight-bold my-2 d-block">@Local["Xác nhận"]</span>
                                <div id="accdetail_checkdiv" class="border-dashed border-1 border-secondary border-radius-md my-3" style="height: 100px;">
                                    <img id="accdetail_checkimg" class="d-none" style="height: 100px;" src="">
                                </div>
                                <span id="accdetail_checkname" class="text-sm text-dark font-weight-bold"></span>
                                <div id="accdetail_checkdate" class="text-center text-sm text-dark"></div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>
    <div id="InsDetail_MainEmpty" class="d-none p-5">
        <div class="mx-auto text-center">
            <h2>@Local["Không có dữ liệu"]</h2>
            <p>@Local["Nhà cung cấp này hiện không có công nợ"]</p>
        </div>
    </div>
    <div class="fixed-botombutton pe-2  mb-3">
        <div class="action_Save">
            <div class="action_Save-Content">
                <div class="text-danger text-gradient text-sm font-weight-bold" id="InsDetail_ShowMessage"></div>
                <button id="InsbtnDelete" onclick="InvoiceDetailDelete()" type="button" class="btn bg-gradient-danger mt-2 me-2 d-none">@Local["Xóa"]</button>
                <button onclick="InvoiceDetailCancel()" class="btn btn-secondary">@Local["Đóng"]</button>
                <button id="InsbtnSave" onclick="InvoiceDetailSave()" type="button" class="btn bg-gradient-primary mt-2 me-2 d-none">@Local["Lưu"]</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var ser_ChooseDateCustomer = '@Model._ChooseDateCustomer';
    var ser_InsDetailID = '@Model.DetailID';
    var ser_InsSupID = '@Model.SupID';
    var InsDepit = 0;
    var InsData = {};
    let InsbeginID = 0;
    var InsDetail_Timer;
    var InsAuto = 1;
    var InsStopEvent = 0;
    var InsError = false;
    var InvoiceDetailedit = 1;
    var accdetail_sign = "";
    let InsDetail_DataMethodType = [];
    $(document).ready(function () {
        InsDetail_Initialize();
    });
    function InsDetail_Initialize () {
        $('.money').divide();
        $("#InsDetail_Date").flatpickr({
            dateFormat: 'd-m-Y H:i',
            enableTime: true,
            defaultDate: new Date(),
            maxDate: new Date()
        });

        if (ser_ChooseDateCustomer == "1") {
            $("#InsDetail_DateDiv").removeClass('d-none');
        }
        AjaxLoad(url = "/Account/PaymentLabo/PaymentDetail/?handler=LoadInitialize"
            , data = {
                "supid": ser_InsSupID
                , "currentid": ser_InsDetailID
            }
            , async = true
            , error = function () {notiError_SW()}
            , success = function (result) {
                let datas = JSON.parse(result);
                let dataBranch = datas.Branch;
                let dataMethod = datas.Method;
                let dataGeneral = datas.General;
                InsDetail_DataMethodType = datas.MethodType;
                let EditButton = dataGeneral[0].EditButton;
                if (EditButton == 0) {
                    InvoiceDetailedit = 0;
                    $('#InsbtnDelete').remove();
                    $('#InsbtnSave').remove();
                }
                Load_Combo(dataBranch, "cbbInsDetail_Branch", true);
                $("#InsDetail_Branch").dropdown("refresh");
                $("#InsDetail_Branch").dropdown("set selected", Master_branchID);

                Load_Combo(dataMethod, "cbbInsDetail_Method", true);
                $("#InsDetail_Method").dropdown("refresh");
                $("#InsDetail_Method").dropdown("set selected", Number(dataMethod[0].ID));

                $("#InsDetail_Name").html(dataGeneral[0].Name);
                $("#InsDetail_Code").html(dataGeneral[0].Code);
                InsDepit = Number(dataGeneral[0].Amount) - Number(dataGeneral[0].Paid);
                $("#InsDetail_Depit").html(formatNumber(InsDepit));
                $("#accdetail_checkdiv").unbind("click").bind('click', function () {
                    if (InvoiceDetailedit == 1) {
                        InvoiceDetail_SignExe(accdetail_sign);
                    }
                });
                if (ser_InsDetailID == 0) {
                    InsDetail_LoadToPay();
                    InsDetail_Event();
                    $('#InsbtnMore').removeClass('d-none');
                    $('#InsbtnAuto').removeClass('d-none').addClass('d-flex');
                }
                else {
                    $('#InsDetail_MainContent').removeClass('d-none');
                    $('#InsbtnDelete').removeClass('d-none');
                    $('#InsbtnSave').removeClass('d-none');
                    $('#InsDetail_Amount').prop('disabled', true);
                    $("#InsDetail_Branch").addClass('disabled');
                    $("#InsDetail_Method").addClass('disabled');
                    $("#InsDetail_Date").prop('disabled', true);
                    $("#InsDetail_Date").addClass('disabled');
                    InsDetail_LoadToUpdate();
                }
            }
        );

    }

    //#region // Update
    async function InsDetail_LoadToUpdate () {
        new Promise((resolve, reject) => {
            AjaxLoad(url = "/Account/PaymentLabo/PaymentDetail/?handler=LoadToUpdate"
                , data = {
                    "detailid": ser_InsDetailID
                }, async = true, error = null
                , success = function (result) {
                    let datas = JSON.parse(result);
                    let data = datas.Table;
                    let dataitem = datas.Table1;
                    InsDetail_ViewRender(dataitem, "InsDetailList");
                    $('#InsDetail_Amount').val(data[0].Amount);
                    $('#InsDetail_Content').val(data[0].Note);
                    $("#InsDetail_Branch").dropdown("refresh");
                    $("#InsDetail_Branch").dropdown("set selected", Number(data[0].Branch_ID));
                    $("#InsDetail_Method").dropdown("refresh");
                    $("#InsDetail_Method").dropdown("set selected", Number(data[0].Method_ID));
                    if (item.Method_ID == 4) {
                        $("#InsDetail_MethodType").dropdown("refresh");
                        $("#InsDetail_MethodType").dropdown("set selected", item.TransferTypeID);
                    }
                    else if (item.Method_ID == 5) {
                        $("#InsDetail_MethodType").dropdown("refresh");
                        $("#InsDetail_MethodType").dropdown("set selected", item.PosTypeID);
                    }
                    else {
                        $("#InsDetail_MethodType").dropdown("refresh");
                        $("#InsDetail_MethodType").dropdown("set selected", item.MedthodDetail);
                    }
                    $('#InsDetail_Date').val(GetDateTime_String_DMYHM(new Date(data[0].PaymentDate)));
                    if (data[0].SignData != "") {
                        $("#accdetail_checkdate").html(ConvertDateTimeUTC_Time_DOWFULLDAY(data[0].SignDate));
                        $("#accdetail_checkname").html(data[0].SignName);
                        $("#accdetail_checkimg").attr("src", data[0].SignData);
                        $("#accdetail_checkimg").removeClass("d-none");
                        accdetail_sign = data[0].SignData;
                    }
                }
            );
            resolve();
        });
    }
    async function InsDetail_ViewRender (data, id) {
        new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                let stringContent = '';
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        stringContent = stringContent +
                            `
                                <li class="px-5  checklist-item   list-group-item border-0 d-flex justify-content-between  border-radius-lg">
                                    <div class="d-flex w-100">
                                        <div class="row col-12 px-2 w-100 align-items-center">
                                            <div class="col-12 col-sm-12 col-md-6 col-xl-4 p-1 flex-grow-1">
                                                <p class="text-sm mb-0 text-secondary">${ConvertDateTimeUTC_DMY(item.DateReceipt)}</p>
                                                <span class="text-sm fw-bold text-dark">${item.Code}</span>
                                            </div>
                                            <div class="col-12 col-sm-12 col-md-6 col-xl-8 p-1 flex-grow-1">
                                                <p class="text-sm mb-0 text-secondary">@Local["Thanh toán"]</p>
                                                <span class="text-sm fw-bold text-dark">${formatNumber(item.Amount)}</span>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <hr class="horizontal dark my-0">
                                `;

                    }
                }
                document.getElementById(id).insertAdjacentHTML("beforeend", stringContent);
            }
            resolve();
        });
    }
    //#endregion

    //#region // Insert
    function InsDetail_LoadToPay () {
        AjaxLoad(url = "/Account/PaymentLabo/PaymentDetail/?handler=LoadToPay"
            , data = {
                "supid": ser_InsSupID,
                "beginid": InsbeginID
            }, async = true, error = null
            , success = function (result) {
                let data = JSON.parse(result);
                if (InsbeginID == 0) {
                    $('#InsDetailList').html('');
                    InsData = {};
                    if (data.length == 0) {
                        $('#InsDetail_MainEmpty').removeClass('d-none');
                    }
                    else {
                        $('#InsDetail_MainContent').removeClass('d-none');
                        $('#InsbtnSave').removeClass('d-none');
                    }
                }
                if (data != undefined && data.length != 0) {
                    InsbeginID = data[data.length - 1].ID;
                    InsDetail_Render(data, "InsDetailList");
                    for (let i = 0; i < data.length; i++) {
                        let element = {};
                        element.ID = data[i].ID;
                        element.Left = Number(data[i].Amount) - Number(data[i].Payment);
                        element.Pay = 0;
                        InsData[data[i].ID] = element;
                    }

                }
                InsDetail_Reset();
                InsDetail_Event();
            }
        );
    }
    function InsDetail_Reset () {
        $('#InsDetail_Amount').removeClass('error');
        $('.payCurrent').removeClass('error');
        if (InsAuto == 1) {
            for ([key, value] of Object.entries(InsData)) {
                value.Pay = 0;
            }
            $('#InsDetail_Amount').val(0);
            $('.payCurrent').val(0);

            $(".payCurrent").each(function (index) {
                InsDetail_SetColor($(this).attr('data-id'), $(this).attr('data-left'), $(this).attr('data-paid'));
            });

            InsDetail_SetColor();

        }
    }
    async function InsDetail_SetColor (_id, _left, _paid) {
        new Promise((resolve, reject) => {
            $('#payitemCurrent_' + _id).removeClass('checklist-item-success checklist-item-warning checklist-item-secondary');
            if (Number(_left) == 0) $('#payitemCurrent_' + _id).addClass('checklist-item-success');
            else if (Number(_paid) != 0)
                $('#payitemCurrent_' + _id).addClass('checklist-item-warning');
            else $('#payitemCurrent_' + _id).addClass('checklist-item-secondary');
            resolve();
        });
    }
    async function InsDetail_Render (data, id) {
        new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                let stringContent = '';
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let amoutleft = item.Amount - item.Payment;

                        let _disabled = (InsAuto == 1) ? 'disabled' : '';
                        stringContent = stringContent +
                            `
                                <li id="payitemCurrent_${item.ID}" class="px-2 payitemCurrent checklist-item   list-group-item border-0 d-flex justify-content-between  border-radius-lg">
                                    <div class="d-flex w-100">
                                        <div class="row px-2 w-100 align-items-center">
                                          <div class="col-12 col-sm-12 col-md-12 col-xl-8 p-1 flex-grow-1">
                                            <div class="ms-4 col-12 row align-items-center">
                                                <div class="col-12 col-sm-12 col-md-4 col-xl-4 ps-1 mt-2 mt-lg-0">
                                                    <p class="text-sm mb-0 text-secondary">${ConvertDateTimeUTC_DMY(item.DateReceipt)}</p>
                                                    <span class="text-sm fw-bold text-dark">${item.Code}</span>
                                                </div>
                                                <div class="col-12 col-sm-12 col-md-4 col-xl-4 ps-1 mt-2 mt-lg-0">
                                                    <p class="text-sm mb-0 text-secondary">@Local["Tổng tiền"]</p>
                                                    <span class="text-sm fw-bold text-dark">${formatNumber(item.Amount)}</span>
                                                </div>
                                                <div class="col-12 col-sm-12 col-md-4 col-xl-4 ps-1 mt-2 mt-lg-0">
                                                    <p class="text-sm mb-0 text-secondary">@Local["Đã thanh toán"]</p>
                                                    <span class="text-sm fw-bold text-dark">${formatNumber(item.Payment)}</span>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-12 col-sm-12 col-md-12 col-xl-4 p-1 flex-grow-1">
                                            <div class="ms-4 input-group flex-nowrap">
                                                <div class="bg-gray-100 input-group-text input-group-text px-2">
                                                    <h6 class="mb-0 text-dark text-sm"><i class="fas fa-dollar-sign"></i></h6>
                                                </div>
                                                <input id="payCurrent_${item.ID}" data-id="${item.ID}" data-paid="${item.Payment}" data-left="${amoutleft}" class="ps-2 form-control money payCurrent" value="0" type="text" ${_disabled}>
                                            </div>
                                        </div>
                                        </div>
                                    </div>

                                </li>
                                <hr class="horizontal dark my-0">
                                `;

                    }
                }
                $('.money').divide();
                document.getElementById(id).insertAdjacentHTML("beforeend", stringContent);
            }
            resolve();
        });
    }
    function InsDetail_Event () {
        $('#InsDetail_Amount').keyup(function () {
            if (InsAuto == 1) {
                clearTimeout(InsDetail_Timer);
                InsDetail_Timer = setTimeout(function (e) {
                    InsDetail_Devide();
                }, 500);
            }
        });
        $('.money').divide();
        $('#InsDetailAuto').unbind('change').change(function () {
            if ($(this).is(':checked')) {
                $('#InsDetail_Amount').prop('disabled', false);
                $('.payCurrent').prop('disabled', true);
                InsAuto = 1;
            }
            else {
                $('#InsDetail_Amount').prop('disabled', true);
                $('.payCurrent').prop('disabled', false);
                InsAuto = 0;
            }
            InsError = false;
            InsDetail_Reset()
        });
        $('.payCurrent').unbind('change').change(function () {
            if (InsAuto == 0 && InsStopEvent == 0) {
                InsStopEvent = 1;
                $('.payitemCurrent').removeClass('error');
                let amount = $(this).val();
                let dataid = Number($(this).attr('data-id'));
                let dataleft = Number($(this).attr('data-left'));
                if (!isNaN(amount) && Number(amount) > 0) {
                    if (amount > dataleft) {
                        InsData[dataid].Pay = dataleft;
                    }
                    else {
                        InsData[dataid].Pay = amount;
                    }
                    $(this).val(InsData[dataid].Pay);
                }
                else {
                    InsData[dataid].Pay = 0;
                    $(this).val(0);
                }
                let totalAmount = 0;
                for ([key, value] of Object.entries(InsData)) {
                    totalAmount = totalAmount + Number(value.Pay);
                }
                $('#InsDetail_Amount').val(totalAmount);
                InsDetail_SetColor(dataid, dataleft, InsData[dataid].Pay);
                $('.money').divide();

                InsStopEvent = 0;
            }
        });

    }
    async function InsDetail_Devide () {
        await new Promise((resolve, reject) => {
            setTimeout(
                () => {
                    InsError = false;
                    $('.payitemCurrent').removeClass('checklist-item-success checklist-item-warning').addClass('checklist-item-secondary');
                    $('#InsDetail_Amount').removeClass('error');
                    let amount = $('#InsDetail_Amount').val();
                    if (!isNaN(amount) && Number(amount) > 0) {
                        amount = Number(amount);
                        if (amount > InsDepit) InsError = true;
                        else {
                            for ([key, value] of Object.entries(InsData)) {
                                value.Pay = 0;
                                if (amount > 0) {
                                    if (amount >= value.Left) {
                                        value.Pay = value.Left;
                                        $('#payitemCurrent_' + key).removeClass('checklist-item-secondary').addClass('checklist-item-success');
                                    }
                                    else {
                                        value.Pay = amount;
                                        $('#payitemCurrent_' + key).removeClass('checklist-item-secondary').addClass('checklist-item-warning');
                                    }

                                    amount = amount - value.Pay;
                                }
                                $('#payCurrent_' + key).val(value.Pay);
                            }
                            if (amount > 0) InsError = true;
                        }
                    }
                    else InsError = true;
                    if (InsError) {
                        $('#InsDetail_Amount').addClass('error');
                    }
                    $('.money').divide();
                    resolve()
                }
            )
        })
    }
    //#endregion
    //#region // Main Event
    function InsDetail_changePayMethod() {
        let MethodID = $("#InsDetail_Method").dropdown("get value") ? Number($("#InsDetail_Method").dropdown("get value")) : 0;
            $("#InsDetail_MethodType").dropdown("clear");
            $("#InsDetail_CbbMethodType").html("");

            let Data = InsDetail_DataMethodType.filter(word => { return word["Type"] == MethodID });
            Load_Combo(Data, "InsDetail_CbbMethodType", true);


            if (Data.length > 0) {
                $("#InsDetail_MethodType").removeClass('disabled');
                $("#InsDetail_MethodType").dropdown("refresh");
                $("#InsDetail_MethodType").dropdown("set selected", Data[0]?.ID);
                $("#InsDetail_MethodType input.payment").attr('name', "paymentMethodType");
            }
            else {
                $("#InsDetail_MethodType").addClass('disabled');
                $("#InsDetail_MethodType input.payment").attr('name', "");
            }
    }
    function InvoiceDetailDelete () {
        const promise = notiConfirm();
        promise.then(function () {InvoiceDetailDeleteExe(ser_InsDetailID);}, function () { });
    }
    function InvoiceDetailDeleteExe (id) {
        AjaxLoad(url = "/Account/PaymentLabo/PaymentDetail/?handler=Delete"
            , data = {
                'detailid': id
            }
            , async = true
            , error = function () {notiError_SW()}
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    syslog_acc('d', result);
                    InvoiceDetailRemove(id);
                }
                else notiError_SW();
            }
            , sender = null
        );
    }
    function InvoiceDetailSave () {

        if (!InsError) {
            let dataDetail = [];
            for ([key, value] of Object.entries(InsData)) {
                let element = {};
                element.ID = Number(key);
                element.Amount = Number(value.Pay);
                dataDetail.push(element);
            }
            let content = $('#InsDetail_Content').val() ? $('#InsDetail_Content').val() : "";
            let branchid = Number($('#InsDetail_Branch').dropdown('get value')) ? Number($('#InsDetail_Branch').dropdown('get value')) : 0;
            let method = Number($('#InsDetail_Method').dropdown('get value')) ? Number($('#InsDetail_Method').dropdown('get value')) : 0;
            let Method_Type = Number($('#InsDetail_MethodType').dropdown('get value')) ? Number($('#InsDetail_MethodType').dropdown('get value')) : 0;
            let TransferTypeID = method == 4 ? Method_Type : 0;
            let PosTypeID = method == 5 ? Method_Type : 0;
            let MedthodDetail = ((method != 4 && method != 5) ? Method_Type : 0);
            let date = $('#InsDetail_Date').val() ? $('#InsDetail_Date').val() : new Date();
            let amount = $('#InsDetail_Amount').val() ? $('#InsDetail_Amount').val() : 0;
            let sign = accdetail_sign;
            $('#InsDetail_Amount').removeClass('error');
            if (!isNaN(amount) && Number(amount) > 0) {
                AjaxLoad(url = "/Account/PaymentLabo/PaymentDetail/?handler=ExcuteData"
                    , data = {
                        'CurrentID': ser_InsDetailID
                        , 'data': JSON.stringify(dataDetail)
                        , 'supid': ser_InsSupID
                        , 'method': method
                        , 'TransferTypeID': TransferTypeID
                        , 'PosTypeID': PosTypeID
                        , 'MedthodDetail': MedthodDetail
                        , 'branchID': branchid
                        , 'dateCreated': date
                        , 'content': content
                        , 'amount': amount
                        , 'sign': sign
                    }
                    , async = true
                    , error = function () {notiError_SW()}
                    , success = function (result) {

                        if (result != "0") {

                            let _r = JSON.parse(result);

                            if (_r[0].RESULT != "0") {
                                notiSuccess();
                                if (ser_InsDetailID == 0) {
                                    syslog_acc('i', _r[0].RESULT);
                                    InvoiceDetailOK(_r[0].ID);
                                }
                                else {
                                    syslog_acc('u', _r[0].RESULT);
                                    InvoiceDetailOK(ser_InsDetailID);
                                }
                            }

                        }
                        else notiError_SW();
                    }
                    , sender = null
                );
            }
            else {
                $('#InsDetail_ShowMessage').html('@Local["Tổng tiền không được nhỏ hơn hoặc bằng 0"]');
                $('#InsDetail_Amount').addClass('error');
            }
        }
    }
    async function InvoiceDetail_SignExe (signdata) {
        await Signature_Action(signdata, 1);
        if (Signature_ResultSignation != "") {
            accdetail_sign = Signature_ResultSignation;
            $("#accdetail_checkimg").attr("src", accdetail_sign);
            $("#accdetail_checkimg").removeClass("d-none");
        }
    }
    //#endregion
</script>

<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require('/js/main.js');</script>
<style>
    #InsDetailList li input[type=text] {
        display: block;
    }

    #InvoiceDetailArea input.error {
        background-color: rgb(255, 216, 216);
    }

    #InsDetailList li.list-group-item:hover {
        background-color: unset !important;
    }
</style>