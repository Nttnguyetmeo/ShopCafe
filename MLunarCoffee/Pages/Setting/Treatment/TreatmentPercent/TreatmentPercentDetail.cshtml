@page
@model MLunarCoffee.Pages.Setting.Treatment.TreatmentPercent.TreatmentPercentDetailModel
@{
    Layout = null;
}
<div class="card">
    <div class="card-header pb-0">
        <div class="d-lg-flex">
            <div class="w-50 col-auto my-auto">
                <div class="h-100">
                    <h6 class="mb-0">@Local["Cấu hình phần trăm điều trị"]</h6>
                    <p class="text-sm mb-0">@Local["Thêm/xóa/sửa phần trăm điều trị"]</p>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body pt-2 ">
        <ul class="list-group px-1" id="TPD_TreatPercentBody">
        </ul>
    </div>
    <div class="mx-3">
        <button class="btn btn-secondary button_chose p-3" onclick="TPDetail_AddNewItem();"></button>
    </div>
    <div class="card-footer fixed-botombutton">
        <div class="action_Save">
            <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
            <div class="action_Save-Content">
                <button class="btn btn-secondary" onclick="TPercent_CloseDetail();">Cancel</button>
                <button type="button" class="btn bg-gradient-primary mt-2 me-2" onclick="TPDetail_Save();">Save</button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    var TPD_DataTreatPercent = {};

    $(document).ready(function () {
        TPDetail_Load();
    })

    //#region //LOAD
    function TPDetail_Load () {
        AjaxLoad(url = "/Setting/Treatment/TreatmentPercent/TreatmentPercentDetail/?handler=LoadData"
            , data = {}
            , async = true
            , error = null
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    if (data && data.length > 0) {

                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let ele = {};
                            let time = (new Date()).getTime();
                            let idrandom = time.toString() + RandomNumber().toString();

                            ele.idUpdate = item.ID;
                            ele.Name = item.Name;
                            ele.Value = item.Value;
                            ele.isNew = 0;
                            ele.isDelete = 0;

                            TPD_DataTreatPercent[idrandom] = ele;
                            TPDetail_RenderEach(ele, idrandom, "TPD_TreatPercentBody");
                        }
                    }
                } else {
                    notiError();
                }
            }
            , sender = null
            , before = function () {}
            , complete = function (e) {}
        );
    }
    //#endregion

    //#region //RENDER

    function TPDetail_RenderEach (item, IDRandom, id) {
        let myNode = document.getElementById(id);
        if (myNode != null) {
            let tr = '';
            tr = `
                <li class="row position-relative li-event pb-2 pt-1" data-id="${IDRandom}">
                    <i class="opacity-3 position-absolute text-gradient text-danger vtt-icon vttech-icon-delete cursor-pointer btn-delete" style="width: 40px;right: 0px;top: 14px;" data-id="${IDRandom}"></i>
                    <div class="row pe-4">
                        <div class="col-12 col-md-6 p-1">
                            <div class="input-group">
                                <span class="input-group-text bg-gray-200">@Local["Tên"]</span>
                                <input type="number" class="form-control event-name ps-2" min="0" data-id="${IDRandom}" value="${item.Name}">
                            </div>
                        </div>
                        <div class="col-12 col-md-6 p-1">
                            <div class="input-group">
                                <span class="input-group-text bg-gray-200">@Local["Phần trăm"]</span>
                                <input type="number" class="form-control event-value ps-2" min="0" data-id="${IDRandom}" value="${item.Value}">
                            </div>
                        </div>
                    </div>
                </li>
            `
            myNode.insertAdjacentHTML('beforeend', tr);
            TPDetail_Event();
        }
    }

    //#endregion

    //#region //EVENT

    function TPDetail_Event () {
        $('#TPD_TreatPercentBody .event-name').unbind('change').change(function () {
            let ID = $(this).attr('data-id');
            TPD_DataTreatPercent[ID].Name = Number($(this).val());
        })
        $('#TPD_TreatPercentBody .event-value').unbind('change').change(function () {
            let ID = $(this).attr('data-id');
            TPD_DataTreatPercent[ID].Value = Number($(this).val());
        })
        $('#TPD_TreatPercentBody .btn-delete').unbind('click').click(function () {
            let ID = $(this).attr('data-id');
            $('#TPD_TreatPercentBody .li-event[data-id="' + ID + '"]').remove();
            TPD_DataTreatPercent[ID].isDelete = 1;
        })
        $('#TPD_TreatPercentBody .btn-delete').unbind('mouseenter').mouseenter(function () {
            $(this).removeClass('opacity-3')
        }).unbind('mouseleave').mouseleave(function () {
            $(this).addClass('opacity-3')
        });
    }

    //#endregion

    //#region //NEW

    function TPDetail_AddNewItem () {
        let ele = {};
        let time = (new Date()).getTime();
        let idrandom = time.toString() + RandomNumber().toString();

        ele.idUpdate = 0;
        ele.Name = 0;
        ele.Value = 0;
        ele.isNew = 1;
        ele.isDelete = 0;

        TPD_DataTreatPercent[idrandom] = ele;
        TPDetail_RenderEach(ele, idrandom, "TPD_TreatPercentBody");
    }

    //#endregion

    //#region //EXECUTED

    function TPDetail_Save () {
        let DataTreat = [];
        let ChekVal = false;
        let ChekPer = true;
        $.each(TPD_DataTreatPercent, function (key, val) {
            if (val.Value == 100 && val.isDelete == 0) ChekVal = true;
            if ((val.Value > 100 || val.Value < 0) && val.isDelete == 0) ChekPer = false;
            DataTreat.push(val);
            
        });        
        let checkDuplicate = TPDetail_CheckDuplicate(DataTreat)
        if (ChekVal == true && ChekPer == true && checkDuplicate == true) {
            AjaxLoad(url = "/Setting/Treatment/TreatmentPercent/TreatmentPercentDetail/?handler=Executed"
                , data = {
                    data: JSON.stringify(DataTreat)
                }
                , async = true
                , error = null
                , success = function (result) {
                    if (result != "0") {
                        TPercent_Load();
                        notiSuccess();
                        TPercent_CloseDetail();
                    } else {
                        notiError();
                    }
                }
                , sender = null
                , before = function () { }
                , complete = function (e) { }
            );
        } else if (ChekVal == false) {
            $('#textShowMessage').html("@Local["Phải có phần trăm điều trị (100%)"]");
        } else {
            $('#textShowMessage').html("@Local["Kiểm tra dữ liệu"]");
        }
    }
    //#endregion
    function TPDetail_CheckDuplicate(data){
        if(data && data.length != 0){
            for(let i = 0 ; i < data.length; i++){
                let item = data[i];
                let dataFilter = data.filter(word => {
                    return ((word['Name'] == item.Name || word['Value'] == item.Value) && (word['isDelete'] == 0))
                })                
                if (dataFilter.length > 1) return false
                
            }
        }
        return true;
    }
</script>
