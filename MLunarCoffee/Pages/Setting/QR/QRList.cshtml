@page
@model MLunarCoffee.Pages.Setting.QR.QRListModel
@{
    Layout = null;
}
<script>js_require_notasync('/js/ThirdParty/QRTemplateAction.js');</script>
<div class="row m-0">
    <div class="col-12 px-0">
        <div class="card card-plain mb-3 d-none" id="QRList_ImportDiv">
            <div class="vtcardheader card-header pb-0 px-2">
                <div class="left">
                    <h6 class="mb-0">
                        @Local["Cấu hình QR"]
                        <i class="cursor-pointer ms-2 mt-3 text-lg text-primary fas fa-angle-up" data-bs-toggle="collapse" href="#QRList_BodyImport" aria-expanded="true"></i>
                    </h6>
                    <p class="text-sm mb-0">@Local["Mẫu import"]</p>
                </div>
            </div>
            <div id="QRList_BodyImport" class="card-body pt-2 px-2 pb-0 collapse collapsesticky show">
                <div id="QRList_HostWaitingDiv" class="position-absolute text-center waitingdiv start-50 top-1" style="display: none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
                <div class="row m-0">
                    <ul class=" bg-white border-radius-lg px-2" id="QRList_importList" style="max-height: calc(100vh - 230px); overflow-y: scroll; ">
                    </ul>
                </div>
            </div>
        </div>
        <div class="card card-plain">
            <div class="vtcardheader card-header pb-0 px-2">
                <div class="left">
                    <h6 class="mb-0">@Local["Cấu hình QR"]</h6>
                    <p class="text-sm mb-0">@Local["Danh sách cấu hình mã QR"]</p>
                </div>
            </div>
            <div class="card-body pt-0 px-2">
                <div class="row px-2 form3" id="QR_Body">
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    let QRList_Minify = "@Model._Minify";
    let QRList_DataMain = [];
    $(document).ready(function () {
        if (QRList_Minify == 1) {
            $('#QRList_ImportDiv').removeClass('d-none')
        }
        else {
            $('#QRList_ImportDiv').addClass('d-none')
        }
        QRList_Load();

    });
    //#region //Load
    function QRList_Load(id = 0) {
        AjaxLoad(url = "/Setting/QR/QRList/?handler=LoadData"
            , data = {
                'id': id
            }
            , async = true
            , error = null
            , success = function (result) {
                if (result != "0") {
                    if (id == 0) {
                        QRList_DataMain = JSON.parse(result);
                        let data = JSON.parse(result);
                        QRList_Render(data, "QR_Body");
                        QRList_LoadDataHost();
                    }
                    else {
                        let data = JSON.parse(result);
                        let ele = $('#QRList_row' + id);
                        if (data && data.length != 0) {
                            QRList_DataMain = QRList_DataMain.reduce((pre, arr) => {
                                if (arr.ID == data[0].ID) arr = data[0];
                                pre.push(arr);
                                return pre;
                            }, []);

                            if (ele.length == 0) {
                                $("#QR_Body")[0].insertAdjacentHTML('beforeend', QRList_RenderEach(data[0]));
                            }
                            else {
                                ele.replaceWith(QRList_RenderEach(data[0]));
                            }
                            QRList_RenderQR(id);
                        }
                        else {

                            QRList_DataMain.filter(word => { return word["ID"] != id });
                            $("#QRList_row" + id).remove();
                        }

                        QRList_Event();
                    }

                } else {
                    notiError_SW();
                }
            }
        );
    }

    async function QRList_LoadDataHost() {
        new Promise(resolve => {
            qrt_getList(
                beforefunc = function () {
                    $('#QRList_HostWaitingDiv').show();
                }
                , successfunc = function (_rr) {
                    if (_rr != "0" && _rr != "") {
                        let data = JSON.parse(_rr);
                        QRList_RenderImport(data, 'QRList_importList');

                    }
                }
                , failurefunc = function () {
                    $('#cti_NonDiv').show();
                    notiError_SW();
                }
                , completefunc = function (e) {
                    $('#QRList_HostWaitingDiv').hide();
                }
            );
            resolve();
        })
    }
    //#endregion

    //#region //Render

    async function QRList_Render (data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (var i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = QRList_RenderEach(item)
                            myNode.insertAdjacentHTML('beforeend', tr);
                            QRList_RenderQR(item.ID);
                        }
                        QRList_Event();
                    }
                }
                resolve();
            }, 30)
        })
    }

    function QRList_RenderEach(item) {
        let tr = '';
        if (item && Object.keys(item).length > 0) {
           tr = `
               <div class="QRList_clsRow card card-plain col-12 col-sm-6 col-xl-4 pe-3 ps-0 my-2" data-id="${item.ID}" id="QRList_row${item.ID}">
                   <div class="card h-100 py-lg-3" id="QR_PrintContent_${item.ID}">
                       <div class="card-body h-100 pb-2">
                           <div class="d-flex justify-content-center">
                               <div class="QR-Code" id="QR_QRCode_${item.ID}"></div>
                           </div>
                           <div class="bg-gray-100 border-0 border-radius-lg mt-3 p-3 text-dark">
                               <div>
                                   <span class="mt-1 text-sm fw-bold " href="#">@Local["Tên"]: </span>
                                   <a class="text-decoration-underline fw-bold mt-1 text-sm QRList_btnEdit " style="word-break: break-all;">${item.Name}</a>
                               </div>
                               <div>
                                   <span class="mt-1 text-sm fw-bold">@Local["Liên kết"]: </span>
                                   <span id="QRList_val${item.ID}" class="mt-1 text-sm QR-Value" data-id="${item.ID}" style="word-break: break-all;">${item.Value}</span>
                               </div>
                               <div>
                                   <span class="mt-1 text-sm fw-bold">@Local["Mô tả"]: </span>
                                   <span class="mt-1 text-sm" style="word-break: break-all;">${item.Note}</span>
                               </div>
                           </div>
                       </div>
                       <div id="QR_ToolDiv${item.ID}" class="bottom-0 d-lg-flex pt-3 mb-3 me-3 mt-auto pe-1">
                           <div class="ms-auto my-auto d-flex">
                               <button class="btn bg-gradient-danger my-0 ms-2 me-1 w-auto btn-print QRList_btnDelete">@Local["Xóa"]</button>
                               <button class="btn bg-gradient-primary my-0 ms-2 me-1 w-auto btn-print QRList_btnClone">@Local["Clone"]</button>
                               <button class="btn bg-gradient-info my-0 ms-2 me-1 w-auto btn-print" data-id="${item.ID}">@Local["In"]</button>
                           </div>
                       </div>
                   </div>
               </div>
           `;
        }
        return tr;
    }

    function QRList_RenderQR (id) {
        try {
            let Value = $(`#QRList_val${id}`).html();

            QR_CODECard = new QRCode(`QR_QRCode_${id}`, {
                text: "abc",
                width: 150,
                height: 150,
                colorDark: "#000000",
                colorLight: "#ffffff",
                correctLevel: QRCode.CorrectLevel.L,
            });
            QR_CODECard.makeCode(decodeHtml(Value));
            $('#QR_QRCode_' + id).removeAttr('title');
        } catch (ex) {
            return '';
        }
    }
    function decodeHtml (html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
    }

    async function QRList_RenderImport(data, id) {
        new Promise((resolve) => {
            let myNode = document.getElementById(id);
            let str = '';
            if (myNode != null) {
                if (data && data.length != 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let dtFilt = QRList_DataMain.filter(word => { return word["Code"].toString() == item.Code });
                        let IsAvai = dtFilt.length > 0 ? "downrow" : "undownrow";
                        str += `
                            <li class="nav-item ${IsAvai} rounded-2 text-dark w-100 text-sm " data-code="${item.Code}">
                                <div class="row col-12">
                                    <div class="col-12 col-lg-3">
                                        <a data-code="${item.Code}" class="cursor-pointer  fw-bold QRList_btnDownload pe-2">
                                        <i class="fas fa-download text-primary cursor-pointer"></i></a>
                                        <i class="fas mardown text-success fw-bold d-none fa-check pe-2"></i>
                                        <span class="text-sm text-dark fw-bold">
                                            ${item.Code}
                                        </span>
                                    </div>
                                    <div class="col-12 col-sm-9 d-flex">
                                        <h6 class="fw-bold text-dark mb-1">${item.Type}</h6>
                                        <a class="cursor-pointer ms-auto d-none QRList_btnDelete opacity-1 "> <i class="fas fa-trash-alt text-lg text-danger "></i></a>
                                    </div>

                                </div>
                                <hr class="horizontal dark">
                            </li>`
                    }
                }
                myNode.innerHTML = str;
                QRList_EventImport();
            }

            resolve();
        })
    }
    //#endregion

    //#region //Event

    function QRList_Event () {
        $("#QR_Body .btn-print").unbind("click").click(function () {
            let ID = Number($(this).attr("data-id"));
            fn_Print(printedid = "QR_PrintContent_" + ID
                , beforefun = function () {
                    $(`QR_ToolDiv${ID}`).addClass('d-none');
                }
                , afterfun = function () {
                    $(`QR_ToolDiv${ID}`).removeClass('d-none');
                }
            );
        })

        $("#QR_Body .QRList_btnEdit").unbind("click").click(function () {
            let ID = Number($(this).closest('.QRList_clsRow').attr("data-id"));
            ID = !isNaN(ID) ? ID : 0;
            QList_Edit(ID);
        })

        $("#QR_Body .QRList_btnClone").unbind("click").click(function () {
            let ID = Number($(this).closest('.QRList_clsRow').attr("data-id"));
            ID = !isNaN(ID) ? ID : 0;
            QRList_ExecutedClone(ID);
        })
        $("#QR_Body .QRList_btnDelete").unbind("click").click(function () {
            let ID = Number($(this).closest('.QRList_clsRow').attr("data-id"));
            ID = !isNaN(ID) ? ID : 0;
            const promise = notiConfirm();
            promise.then(function () {
                QRList_ExecutedRemove('', ID)
            }, function () { });
        })
    }

    function QList_Edit(CurrentID) {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/QR/QRDetail?CurrentID=" + CurrentID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    function QRList_EventImport() {
        $("#QRList_importList").on('click', '.QRList_btnDownload', function () {
            let code = $(this).closest('li').attr('data-code');
            QRList_ExcuteImport(code);
        });

        $("#QRList_importList").on('click', '.QRList_btnDelete', function () {
            let code = $(this).closest('li').attr('data-code');
            const promise = notiConfirm();
            promise.then(function () {
                QRList_ExecutedRemove(code, 0)
            }, function () { });
        });
    }

    function QRList_ExcuteImport(code) {
        const promise = notiConfirm();
        promise.then(function () {

            qrt_getItem(code
                , beforefunc = function () { $('#QRList_HostWaitingDiv').show(); }
                , successfunc = function (_rr) {
                    if (_rr != "0") {
                        let datadown = JSON.parse(_rr);
                        if (datadown != undefined && datadown.length != 0) {
                            QRList_ExcutedSave(code, datadown);
                        }
                    }
                    else notiError_SW();
                }
                , failurefunc = null
                , completefunc = function (e) { $('#QRList_HostWaitingDiv').hide(); }
            );
        }, function () { });
    }

    function QRList_ExcutedSave(code, _datadown) {
        AjaxLoad(url = "/Setting/QR/QRList/?handler=Import"
            , data = {
                'data': JSON.stringify(_datadown[0])
            }
            , async = true, error = null
            , success = function (_r) {
                if (_r != "0") {
                    notiSuccess();
                    QRList_Load(_r);
                    QRList_AfterSuccess(code);
                }
                else notiError_SW();
            }
        );
    }
    function QRList_ExecutedRemove(code, id = 0) {
        AjaxLoad(url = "/Setting/QR/QRList/?handler=Delete"
            , data = {
                'code': code,
                'id': id
            }
            , async = true, error = null
            , success = function (_r) {
                if (_r != "0") {
                    notiSuccess();
                    QRList_Load(_r);
                    QRList_AfterSuccess(code);
                }
                else notiError_SW();
            }
        );
    }


    function QRList_ExecutedClone(id) {
        AjaxLoad(url = "/Setting/QR/QRList/?handler=Clone"
            , data = {
                'id': id
            }
            , async = true, error = null
            , success = function (_r) {
                if (_r != "0") {
                    notiSuccess();
                    QRList_Load(_r);
                }
                else notiError_SW();
            }
        );
    }

    function QRList_AfterSuccess(code) {
        let obj = $(`#QRList_importList [data-code="${code}"]`);
        if (obj.hasClass('downrow')) {
            obj.removeClass('downrow');
            obj.addClass('undownrow');
            obj.find('.QRList_btnDelete').addClass('d-none');
        } else {
            obj.removeClass('undownrow');
            obj.addClass('downrow');
            obj.find('.QRList_btnDelete').removeClass('d-none');
        }
    }

    //#endregion
</script>
<style>
    #QRList_importList .QRList_btnDelete:hover {
        opacity: 1 !important;
        box-shadow: none !important;
    }

    #QRList_importList.down .undownrow {
        display: none !important;
    }

    #QRList_importList .downrow .QRList_btnDownload {
        display: none !important;
    }

    #QRList_importList .downrow .mardown {
        display: inline !important;
    }

    #QRList_importList .downrow .QRList_btnDelete {
        display: block !important;
    }
</style>