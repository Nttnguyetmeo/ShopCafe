@page
@model MLunarCoffee.Pages.Setting.TreatmentStageListModel
@{
    Layout = null;
}
<div class="row m-0">
    <div class="col-12 px-0">
        <div class="card card-plain">
            <div class="vtcardheader card-header pb-0 pt-3 px-2">
                <div class="left">
                    <h6 class="mb-0 text-capitalize">@Local["Bước điều trị"]</h6>
                    <p class="text-sm mb-0">@Local["Danh sách bước điều trị"]</p>
                </div>
                <div class="right">
                    <button id="btn_addTreatmentStage" class="btn bg-gradient-primary btn-sm mt-1 setting_projectclosure" data-value="fade up" onclick="return TreatStageAdd()">
                        @Local["Thêm mới"]
                    </button>
                    <button class="btn btn-dark btn-sm mt-1 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                        @Local["Xem thêm"]
                    </button>
                </div>
                <div class="toggle">
                    <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                        <ul class="card card-body text-dark text-capitalize opacity-10">
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogle form-check-input" data-name="cons" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Vật tư tiêu hao"]</p>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card-body pt-0 px-2">
                <div class=" m-0 my-3 mobile-responsive vt-header-sticky">
                    <div id="TSL_WaitingDiv" class="waitingdiv text-center" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <table id="dtContentTreatmentStage" class="table vt-table mb-0">
                        <thead class="hiddenCollapse">
                            <tr role="row">
                                <th class="d-none">ID</th>
                                <th style="width:40px;">@Local["#"]</th>
                                <th>@Local["Tên bước điều trị"]</th>
                                <th style="min-width: 400px" data-name="cons">@Local["Vật tư tiêu hao"]</th>
                                <th>@Local["Người tạo"]</th>
                                <th>@Local["Người sửa"]</th>
                                <th style="width:40px;" class="setting_projectclosure">@Local["Xoá"]</th>
                            </tr>
                        </thead>
                        <tbody id="dtContentTreatmentStagebody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<script>js_require('/js/comon/initialize_setting.js');</script>

<script type="text/javascript">
    let DataEmployee;
    var TSL_dataProduct, TSL_objDataProduct = {};
    var TSL_dataProductUnit, TSL_objDataProductUnit = {};
    $(document).ready(function () {
        shtable = $("#dtContentTreatmentStage").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        TSL_Event();
        Master_IndexDB_Reads(_Session_Data, [_Session_Employee]
            , function (data) {
                DataEmployee = data[0];
                TSD_LoadInitialize();
            });

    });
    async function TSD_LoadInitialize() {
        return new Promise((resolve) => {
            AjaxLoad(url = "/Setting/TreatmentStageList/?handler=Load_Data_Initialize"
                , data = {}, async = true, error = null
                , success = function (result) {
                    if (result != "0") {
                        let data = JSON.parse(result);
                        TSL_dataProduct = data.Product;
                        TSL_dataProductUnit = data.UnitProduct;
                        TSL_objDataProduct = (data.Product).reduce((pre, arr) => { if (arr.ID) pre[arr.ID] = arr; return pre }, {});
                        TSL_objDataProductUnit = (data.UnitProduct).reduce((pre, arr) => { if (arr.UnitID) pre[arr.UnitID] = { ID: arr.UnitID, Name: arr.UnitName, ...arr}; return pre }, {});
                        TreatStageLoadList();

                    } else {
                        notiError_SW();
                    }
                },
                before = function () {
                    $("#TSL_WaitingDiv").show();
                },
                complete = function (e) {
                    $("#TSL_WaitingDiv").hide();
                }
            );
            resolve();
        });
    }

    //#region renderlist
    function TreatStageLoadList() {
        AjaxLoad(url = "/Setting/TreatmentStageList/?handler=LoadData"
            , data = {}, async = true, error = null
            , success = function (result) {
                if (result != "") {
                    TreatStageRenderList(JSON.parse(result), "dtContentTreatmentStagebody");

                } else {
                    notiError_SW();
                }
            });
    }
    async function TreatStageRenderList(data, id) {
        new Promise((resolve) => {
            let myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if ((data && data.length) > 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let objCreated = DataEmployee[item.CreatedBy];
                        let objModified = DataEmployee[item.ModifiedBy];
                        objModified = objModified != null ? objModified : objCreated;
                        let detailCons = '';
                        for (let j = 0; j < item.NumChild; j++) {
                            i = (j == 0) ? i : i + 1;
                            let itemDetail = data[i];
                            if (itemDetail.MPID != 0) {
                                detailCons += `<div class="card-body px-2 py-1" id="TSL_cons_${itemDetail.MPID}">
                                                <div class="ps-2 mb-0"><p class="text-sm m-0">
                                                  <span class="text-primary">
                                                  <strong>${Fun_GetName_ByID(TSL_objDataProduct, itemDetail.Product_ID)} </strong>
                                                  ${Fun_GetName_ByID(TSL_objDataProductUnit, itemDetail.Unit_ID)}
                                                  </span>
                                                  <span class=" pe-2">(${formatNumber(itemDetail.MinNumber)} - ${formatNumber(itemDetail.MaxNumber)})</span>
                                                  </p>
                                                </div>
                                              </div>
                                              <hr class="horizontal dark my-0">`;

                            }
                        }

                        let tr =
                            '<td class="d-none">' + item.ID + '</td>'
                            + '<td class="vt-number-order"></td>'
                            + '<td><a href="#" class="text-decoration-underline fw-bold buttonEditClass">' + item.Name + '</a></td>'
                            + '<td data-name="cons" >' + detailCons + '</td>'
                            + '<td>'
                            + '<div class="d-flex">'
                            + '<div class="icon icon-shape icon-sm me-2 text-center" >'
                            + '<img class="avatar avatar-xs mt-2" src="' + (objCreated.Avatar != '' ? objCreated.Avatar : Master_Default_Pic) + ' " alt="label-image">'
                            + '</div>'
                            + '<div class = "justify-content-center align-items-center">'
                            + '<h6 class="text-dark text-sm mb-0">' + objCreated.Name + '</h6>'
                            + '<span class="text-xs mb-0">' + ConvertDateTimeUTC_YMD(item.Created) + '</span>'
                            + '</div>'
                            + '</div>'
                            + '</td>'

                            + '<td>'
                            + '<div class="d-flex">'
                            + '<div class="icon icon-shape icon-sm me-2 text-center" >'
                            + '<img class="avatar avatar-xs mt-2" src="' + (objModified.Avatar != '' ? objModified.Avatar : Master_Default_Pic) + ' " alt="label-image">'
                            + '</div>'
                            + '<div class="justify-content-center align-items-center">'
                            + '<h6 class="text-dark text-sm mb-0">' + objModified.Name + '</h6>'
                            + '<span class="text-xs mb-0">' + ConvertDateTimeUTC_YMD(item.Modified) + '</span>'
                            + '</div>'
                            + '</div>'
                            + '</td>'

                            + '<td class="text-center setting_projectclosure">'
                            + '<button class="buttonGrid"><i class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>'
                            + '</td>';
                        stringContent = stringContent + '<tr class="vt-number" role="row">' + tr + '</tr>';
                    }
                }
                document.getElementById(id).innerHTML = stringContent;
                shtable.Refresh();
            }
        })
    }

    //#endregion

    //#region Event

    function TreatStageAdd() {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/TreatmentStageDetail" + "?ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }


    function TreatStageEdit(ID) {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/TreatmentStageDetail?CurrentID=" + ID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    function TreatStageDelete(id) {
        const promise = notiConfirm();
        promise.then(function () { TreatStageDeleteExecute(id); }, function () { });
    }
    function TreatStageDeleteExecute(id) {
        AjaxLoad(url = "/Setting/TreatmentStageList/?handler=DeleteItem"
            , data = { 'id': id }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result == "1") {
                    notiSuccess();
                    TreatStageLoadList();
                } else {
                    notiError_SW();
                }
            }
        );
    }

    function TSL_Event() {
        $('#dtContentTreatmentStage tbody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            TreatStageEdit(ID);
        });
        $('#dtContentTreatmentStage tbody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            TreatStageDelete(ID);
        });
    }
     //#endregion


</script>

