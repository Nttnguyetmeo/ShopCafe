@page
@model MLunarCoffee.Pages.Setting.DiseaseStatus.DiseaseTemplate.DiseaseTemplateModel
@{
    Layout = null;
}
<script>js_require_notasync('/js/ThirdParty/DiagnoseAction.js');</script>
<div class="container-fluid py-0 px-0">
    <div class="row m-0">
        <div class="col-12 px-0">
            <div class="card card-plain mb-3 d-none" id="DTem_ImportDiv">
                <div class="vtcardheader card-header pb-0 px-2">
                    <div class="left">
                        <h6 class="mb-0">@Local["Mẫu chuẩn đoán"]
                        <i class="cursor-pointer ms-2 mt-3 text-lg text-primary fas fa-angle-up" data-bs-toggle="collapse" href="#DTem_BodyImport" aria-expanded="true"></i></h6>
                        <p class="text-sm mb-0">@Local["Mẫu import"]</p>
                    </div>
                </div>
                <div id="DTem_BodyImport" class="card-body pt-2 px-2 pb-0 collapse collapsesticky show">
                    <div id="DTem_HostWaitingDiv" class="position-absolute text-center waitingdiv start-50 top-1" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div class="row m-0">
                        <ul class=" bg-white border-radius-lg px-2" id="DTem_importList" style="max-height: calc(100vh - 230px); overflow-y: scroll; ">
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card card-plain">
                <div class="vtcardheader card-header pb-0 px-2 pt-0">
                    <div class="left">
                        <h6 class="mb-0">@Local["Mẫu chuẩn đoán"]</h6>
                        <p class="text-sm mb-0">@Local["Danh sách"]</p>
                    </div>
                </div>
                <div class="card-body pt-2 px-2">
                    <div id="DTem_WaitingDiv" class="position-absolute text-center waitingdiv start-50 top-1" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div class="row m-0">
                        <div class="flex-fill flex-grow-1 ms-md-n1 pb-3 ps-0 overflow-auto mt-2 mt-lg-0">
                            <ul class="bg-transparent nav nav-horizontal nav-pills pb-1 pt-0" role="tablist" id="DTem_MenuList">
                            </ul>
                        </div>
                        <div class="col-12 px-0 max-height-100vh" id="DTem_Detail">
                        </div>
                    </div>
                    <div class="fixed-botombutton">
                        <div class="action_Save">
                            <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
                            <div class="action_Save-Content">
                                <button form="formBranch" type="button" class="btn bg-gradient-primary mt-2 me-2" onclick="event.preventDefault();return DTem_Excute()">@Local["Lưu"]</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    let DTem_DataMain = [];
    let DTem_DataFormCbb = [];
    let currentID = 0;
    let DTem_Minify = "@Model._Minify";
    $(document).ready(function () {
        if (DTem_Minify == 1) {
            $('#DTem_ImportDiv').removeClass('d-none')
        }
        else {
            $('#DTem_ImportDiv').addClass('d-none')
        }
        DTem_LoadData();
        
    });
    //#region //LOADDATA
    function DTem_LoadData(id = 0) {
        AjaxLoad(url = "/Setting/DiseaseStatus/DiseaseTemplate/?handler=LoadData"
            , data = {
                'id': id
            }, async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    if (id == 0) {
                        DTem_DataMain = JSON.parse(result).List;
                        DTem_DataFormCbb = JSON.parse(result).Form;
                        $("#DTem_MenuList").empty();
                        DTem_RenderMenu(DTem_DataMain, 'DTem_MenuList');
                        $('#DTem_MenuList .rowMenuBar:first').tab('show');
                        DTem_LoadDataHost();
                    }
                    else {
                        let data = JSON.parse(result).List;
                        let ele = $('#DTem_menu' + id);
                        if (data && data.length != 0) {
                            DTem_DataMain = DTem_DataMain.reduce((pre, arr) => {
                                if (arr.ID == data[0].ID) arr = data[0];
                                pre.push(arr);
                                return pre;
                            }, []);
                           
                            if (ele.length == 0) {
                                $("#DTem_MenuList")[0].insertAdjacentHTML('beforeend', DTem_renderEach(data[0]));
                            }
                            else {
                                ele.replaceWith(DTem_renderEach(data[0]));
                            }
                        }
                        else {
                            
                            DTem_DataMain.filter(word => { return word["ID"] != id });
                            $("#DTem_menu" + id).remove();
                        }
                        DTem_EventMenu();
                        if (ele.length == 0) {
                            $('#DTem_MenuList .rowMenuBar:first').tab('show');
                        }
                        else {
                            $('#DTem_menu' + id).tab('show');
                        }
                        
                    }
                }
            });
    }

    async function DTem_LoadDataHost() {
        new Promise(resolve => {
            ada_getList(
                beforefunc = function () {
                    $('#DTem_HostWaitingDiv').show();
                }
                , successfunc = function (_rr) {
                    if (_rr != "0" && _rr != "") {
                        let data = JSON.parse(_rr);
                        DTem_RenderImport(data, 'DTem_importList');

                    }
                }
                , failurefunc = function () {
                    $('#DTem_HostWaitingDiv').show();
                    notiError_SW();
                }
                , completefunc = function (e) {
                    $('#DTem_HostWaitingDiv').hide();
                }
            );
            resolve();
        })
    }

    //#endregion

    //#region //RENDER
    async function DTem_RenderMenu(data, id) {
        new Promise((resolve) => {
            let myNode = document.getElementById(id);
            let str = '';
            if (myNode != null) {
                if (data && data.length != 0) {
                    for (let i = 0; i < data.length; i++) {
                        let tr = '';
                        let item = data[i];
                        tr = DTem_renderEach(item);
                        myNode.insertAdjacentHTML('beforeend', tr);
                    }
                }
                DTem_EventMenu();
            }

            resolve();
        })
    }

    function DTem_renderEach(item) {
        let tr = '';
        if (item && Object.keys(item).length > 0) {
            tr =
                `<li id="DTem_menu${item.ID}" class="nav-item mx-1" role="presentation">
                                <a class="rowMenuBar linkgroup nav-link cursor-pointer nav-item-text py-1 ${item.IsDisabled != '0' ? "" : "border-primary"} cursor-pointer" data-hover data-id="${item.ID}" data-bs-toggle="tab">
                                    ${DTem_TypeRenderFeature(item.Type, item.CanvasType)}
                                    <span class="text-primary border-1 border-primary border-bottom mb-0 text-sm fw-bold ms-2">
                                        ${item.Name}
                                    </span>
                                </a>
                            </li>
                            <hr class="horizontal dark my-0">
                            `;
        }
        return tr;
    }

    function DTem_RenderDetail(data, ID) {
        let myNode = document.getElementById(ID);
        let str = '';
        if (myNode != null) {
            if (data && data.length != 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];debugger
                    let imgstr = item.CanvasType == 'image'
                        ? `<div id="DTem_canvascon" class="d-flex justify-content-center position-relative">
                                    <canvas id="DTem_canvas"></canvas>
                                </div>`
                        : `<div id="DTem_svg">
                                    ${item.SVG}
                                </div>`
                    str +=`
                        <div class="row">
                            <div class="col-12 col-lg-3">
                                <div class="row">
                                    <div class="col-12">
                                        <div class="list-group list-group-flush" data-toggle="checklist">
                                            <div class="ps-0 list-group-item border-0 text-sm py-1">
                                                <p class="text-sm fw-bold d-inline">@Local["Nhóm"]</p>:
                                                <div class="text-dark d-inline">${item.Name} ${item.Type}</div>
                                            </div>
                                            <div class="ps-0 list-group-item border-0 text-sm py-1">
                                                <p class="text-sm fw-bold d-inline">@Local["Loại"]</p>:
                                                <div class="text-dark d-inline">${item.CanvasType}</div>
                                            </div>

                                            <div class="ps-0 align-items-start border-0 flex-column list-group-item ps-0 py-0">
                                                <div class="">
                                                    <div class="d-flex align-items-center">
                                                        <div class="form-check">
                                                            <input class="form-check-input buttonDisabledClass" type="checkbox" data-id="${item.ID}" ${item.IsDisabled == 0 ? '' : 'checked'}>
                                                        </div>
                                                        <h6 class="form-check-label mb-0 mt-1 pb-0 text-sm">@Local["Disable"]</h6>

                                                    </div>

                                                </div>
                                            </div>
                                            <div class="ps-0 align-items-start border-0 flex-column list-group-item ps-0 py-0">
                                                <div class="">
                                                    <div class="d-flex align-items-center">
                                                        <div class="form-check">
                                                            <input class="form-check-input btnShowPortal" type="checkbox" data-id="${item.ID}" ${item.ShowPortal == 0 ? '' : 'checked'}>
                                                        </div>
                                                        <h6 class="form-check-label mb-0 mt-1 pb-0 text-sm">@Local["Portal"]</h6>

                                                    </div>

                                                </div>
                                            </div>
                                            <div class="ps-0 align-items-start border-0 flex-column list-group-item ps-0 py-0">
                                                <div class="">
                                                    <div class="d-flex align-items-center">
                                                        <div class="form-check">
                                                            <input class="form-check-input btnShowICD" type="checkbox" data-id="${item.ID}" ${item.IsUseICD == 0 ? '' : 'checked'}>
                                                        </div>
                                                        <h6 class="form-check-label mb-0 mt-1 pb-0 text-sm">@Local["ICD"]</h6>

                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="field col-12 mt-2">
                                            <label>@Local["Tên"]</label>
                                            <input class="form-control" value="${item.Name}"  id="DTem_Name" name="name" type="text" placeholder="eg. @Local["Tên"]">
                                        </div>
                                        <div class="field col-12 mt-2">
                                            <label>@Local["Form"]</label>
                                            <div class="ui fluid search selection dropdown form-control" id="DTem_Form">
                                                <input type="hidden" />
                                                <input class="search" autocomplete="off" tabindex="0" />
                                                <div class="default text"></div>
                                                <div id="DTem_cbbForm" class="menu" tabindex="-1">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-lg-9 d-flex justify-content-center overflow-auto px-0">
                                ${imgstr}
                            </div>

                            <div class="col-12" id="DTem_FormPrintArea">
                                <div class="mt-2 col-12 row overflow-auto border-dashed border-radius-md  border-1 border-secondary m-0 position-relative p-3" style="min-height: 60vh;">

                                    <div class="row" id="DTem_FormPrint">
                                    </div>
                                </div>
                            </div>
                        </div>`
                        ;
                }
            }
        }
        myNode.innerHTML = str;debugger
        DTem_DrawCanvas(data[0]);
        DTem_EvenDetail();
        if (data[0].FormID != 0) {
            $("#DTem_Form").dropdown("refresh");
            $("#DTem_Form").dropdown("set selected", data[0].FormID);
        }

    }
    async function DTem_RenderForm(data, id) {
        return new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                fn_RenderForm(myNode, data);
            }
        })
    }

    async function DTem_RenderImport(data, id) {
        new Promise((resolve) => {
            let myNode = document.getElementById(id);
            let str = '';
            if (myNode != null) {
                if (data && data.length != 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let dtFilt = DTem_DataMain.filter(word => { return word["Code"].toString() == item.Code });
                        let IsAvai = dtFilt.length > 0 ? "downrow" : "undownrow";
                        str +=`
                            <li class="nav-item ${IsAvai} rounded-2 text-dark w-100 text-sm " data-code="${item.Code}">
                                <div class="row col-12">
                                    <div class="col-12 col-lg-3">
                                        <a data-code="${item.Code}" class="cursor-pointer  fw-bold DTem_btnDownload pe-2">
                                        <i class="fas fa-download text-primary cursor-pointer"></i></a>
                                        <i class="fas mardown text-success fw-bold d-none fa-check pe-2"></i>
                                        <span class="text-sm text-dark fw-bold">
                                            ${item.Code}
                                        </span>
                                    </div>
                                    <div class="col-12 col-sm-9 d-flex">
                                        <h6 class="fw-bold text-dark mb-1">${item.Name}</h6>
                                        <a class="cursor-pointer ms-auto d-none DTem_btnDelete opacity-1 "> <i class="fas fa-trash-alt text-lg text-danger "></i></a>
                                    </div>

                                </div>
                                <hr class="horizontal dark">
                            </li>`
                    }
                }
                myNode.innerHTML = str;
                DTem_EventImport();
            }

            resolve();
        })
    }
    //#endregion
    //#region //EVENT
    function DTem_EventMenu() {
        $(".rowMenuBar").on('shown.bs.tab', function (e) {
            $(".rowMenuBar").removeClass('active');
            $(this).addClass('active');
            let ID = $(this).attr('data-id');
            let data = DTem_DataMain.filter(word => { return word["ID"].toString() == ID });

            currentID = ID;
            DTem_RenderDetail(data, 'DTem_Detail');
        });
    }

    function DTem_DrawCanvas(data) {
        let type = data.CanvasType;
        if (type == "image") {
            $("#DTem_canvascon").width(data.WidthImg).height(data.HeightImg);
            $('#DTem_canvascon').css("background-image", "url('" + data.Image.replace(/(\r\n|\n|\r)/gm, "") + "')");
        }
        else {
            $("#DTem_svg").children().width(data.Width).height(data.Height);
        }
    }

    function DTem_LoadDetail() {
        let ID = $("#DTem_Type").dropdown('get value') ? $("#DTem_Type").dropdown('get value') : 0;
        let data = DTem_DataMain.filter(word => { return word["ID"].toString() == ID });

        currentID = ID;
        DTem_RenderDetail(data, 'DTem_Detail');
    }
    function DTem_EvenDetail() {
        Load_Combo(DTem_DataFormCbb, "DTem_cbbForm", false);
        $("#DTem_Form").unbind('change').change(function () {
            FormID = $(this).dropdown('get value') ? $(this).dropdown('get value') : 0;
            let data = DTem_DataFormCbb.filter(word => { return word["ID"].toString() == FormID });
            if (data.length != 0) {
                DTem_RenderForm(JSON.parse(data[0].Form), 'DTem_FormPrint');
            }
        });
    }
    function DTem_EventImport() {
        $("#DTem_importList").on('click', '.DTem_btnDownload', function () {
            let code = $(this).closest('li').attr('data-code');
            DTem_ExcuteImport(code);
        });

        $("#DTem_importList").on('click', '.DTem_btnDelete', function () {
            let code = $(this).closest('li').attr('data-code');
            const promise = notiConfirm();
            promise.then(function () {
                DTem_ExecutedRemove(code)
            }, function () { });
        });
    }

    function DTem_Excute() {
        let data = {};
        data.ShowPortal = $(".btnShowPortal").is(":checked") ? 1 : 0;
        data.UsingICD = $(".btnShowICD").is(":checked") ? 1 : 0;
        data.IsDisabled = $(".buttonDisabledClass").is(":checked") ? 1 : 0;
        data.FormID = $("#DTem_Form").dropdown('get value') ? $("#DTem_Form").dropdown('get value') : 0;
        data.Name = $("#DTem_Name").val() ? $("#DTem_Name").val() : '';
        AjaxLoad(url = "/Setting/DiseaseStatus/DiseaseTemplate/?handler=Update"
            , data = {
                data: JSON.stringify(data)
                , currentID: currentID
            }
            , async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    DTem_LoadData();
                }
                else notiError_SW();
            });
    }

    function DTem_TypeRenderFeature(type, canvastype) {
        let result = '';
        let border = 'border-secondary';
        switch (type) {
            case "face":
                result = '/Image/dia/face.png';
                break;
            case "bodyimg":
            case "body":
                result = '/Image/dia/body.png';
                break;
            case "spines":
                result = '/Image/dia/spine.png';
                break;
            case "footimg":
                result = '/Image/dia/foot.png';
                break;
            case "handimg":
                result = '/Image/dia/hand.png';
                break;
            case "earimg":
                result = '/Image/dia/ear.png';
                break;
            default: result = '/Image/dia/form.png';
        }
        if (canvastype == "canvas") border = `border-primary`;
        result = `<img class="border border-2 p-1 ${border} avatar avatar-sm" src="${result}" />`;

        return result;
    }

    function DTem_ExcuteImport(code) {
        const promise = notiConfirm();
        promise.then(function () {

            ada_getItem(code
                , beforefunc = function () { $('#DTem_HostWaitingDiv').show(); }
                , successfunc = function (_rr) {
                    if (_rr != "0") {
                        let datadown = JSON.parse(_rr);
                        if (datadown != undefined && datadown.length != 0) {
                            DTem_ExcutedSave(code, datadown);
                        }
                    }
                    else notiError_SW();
                }
                , failurefunc = null
                , completefunc = function (e) { $('#DTem_HostWaitingDiv').hide(); }
            );
        }, function () { });
    }

    function DTem_ExcutedSave(code, _datadown) {
        AjaxLoad(url = "/Setting/DiseaseStatus/DiseaseTemplate/?handler=Import"
            , data = {
                'data': JSON.stringify(_datadown[0])
            }
            , async = true, error = null
            , success = function (_r) {
                if (_r != "0") {
                    notiSuccess();
                    DTem_LoadData(_r);
                    DTem_AfterSuccess(code);
                }
                else notiError_SW();
            }
        );
    }
    function DTem_ExecutedRemove(code) {
        AjaxLoad(url = "/Setting/DiseaseStatus/DiseaseTemplate/?handler=Delete"
            , data = {
                'code': code
            }
            , async = true, error = null
            , success = function (_r) {
                if (_r != "0") {
                    notiSuccess();
                    DTem_LoadData(_r);
                    DTem_AfterSuccess(code);
                }
                else notiError_SW();
            }
        );
    }

    function DTem_AfterSuccess(code) {
        let obj = $(`#DTem_importList [data-code="${code}"]`);
        if (obj.hasClass('downrow')) {
            obj.removeClass('downrow');
            obj.addClass('undownrow');
            obj.find('.DTem_btnDelete').addClass('d-none');
        } else {
            obj.removeClass('undownrow');
            obj.addClass('downrow');
            obj.find('.DTem_btnDelete').removeClass('d-none');
        }
    }
        //#endregion
</script>
<script src="/js/main.js" async></script>
<style>
    #DTem_importList .DTem_btnDelete:hover {
        opacity: 1 !important;
        box-shadow: none !important;
    }

    #DTem_importList.down .undownrow {
        display: none !important;
    }

    #DTem_importList .downrow .DTem_btnDownload {
        display: none !important;
    }

    #DTem_importList .downrow .mardown {
        display: inline !important;
    }

    #DTem_importList .downrow .DTem_btnDelete {
        display: block !important;
    }
</style>