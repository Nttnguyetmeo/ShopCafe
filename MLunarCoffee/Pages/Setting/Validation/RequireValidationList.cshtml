@page
@model MLunarCoffee.Pages.Setting.Validation.RequireValidationListModel
@{
    Layout = null;
}
<div class="container-fluid py-0 px-0">
    <div class="row m-0">
        <div class="col-12 px-0">
            <div class="card card-plain">
                <div class="vtcardheader card-header pb-0  pt-3 px-2">
                    <div class="left">
                        <h6 class="mb-0">@Local["Trường dữ liệu bắt buộc"]</h6>
                        <p class="text-sm mb-0">@Local["Danh sách trường dữ liệu bắt buộc"]</p>
                    </div>
                    <div class="right">
                        <button class="btn bg-gradient-primary btn-sm mt-1" data-value="fade up" onclick="return RVali_AddNew()">@Local["Thêm mới"]</button>
                    </div>
                </div>
                <div class="card-body pt-0 px-2">
                    <div class="m-0 my-3 mobile-responsive">
                        <table id="dtContentRVali_" class="table vt-table mb-0">
                            <thead class="hiddenCollapse">
                                <tr role="row">
                                    <th class="d-none">ID</th>
                                    <th style="width:40px;">@Local["#"]</th>
                                    <th>@Local["Tên"] control</th>
                                    <th>Loại</th>
                                    <th>@Local["Nội dung"]</th>
                                    <th>Link</th>
                                    <th style="width:40px;">@Local["Ẩn"]</th>
                                </tr>
                            </thead>
                            <tbody id="dtContentRVali_Body">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        RVali_Load();
        $('#dtContentRVali_ tbody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[1].innerHTML);
            RVali_Edit(ID);
        });
        $('#dtContentRVali_ tbody').on('click', '.buttonHideClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[1].innerHTML);
            RVali_Hide(ID)
        });

    });
    function RVali_Load() {
        AjaxLoad(url = "/Setting/Validation/RequireValidationList/?handler=LoadData"
            , data = {}, async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    RVali_Render(data, 'dtContentRVali_Body');
                }
            });
    }

    function RVali_Render(data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    let tr = '';
                    tr =
                    `<tr role="row" class="vt-number ${item.Active == 0 ? 'bg-gray-100' : ''}">
                        <td class="d-none">${item.ID}</td>
                        <td class="vt-number-order"></td>
                        <td>
                            <a href="#"><span class="border-1 border-primary border-bottom buttonEditClass">${item.ControlName}</span></br><span class="text-sm text-secondary">${item.FieldName}</span></a>
                        </td>
                        <td>${item.Type == 0 ? 'Text' : 'Compo'}</td>
                        <td>${item.Content}</td>
                        <td>${item.PagePath}</td>
                        <td class="text-center">
                            <button class="buttonGrid"><i class="buttonHideClass vtt-icon ${item.Active == 0 ? 'vttech-icon-show' : 'vttech-icon-hide'}"></i></button>
                        </td>
                    <tr>`
                    stringContent += tr;
                }
            }

            document.getElementById(id).innerHTML = stringContent;
        }
    }

    function RVali_Hide(id) {
        AjaxLoad(url = "/Setting/Validation/RequireValidationList/?handler=HideItem"
            , data = { id: id }, async = true, error = null
            , success = function (result) {
                if (result == "1") {
                    notiSuccess();
                    RVali_Load();
                } else {
                    notiError(result);
                }
            });
    }
    function RVali_Edit(CurrentID) {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/Validation/RequireValidationDetail/?CurrentID=" + CurrentID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }
    function RVali_AddNew() {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/Validation/RequireValidationDetail/" + "?ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }
    function RVali_RenderCallDiff(type) {
        try {
            let result = `border-success`;
            if (type == '0')
                result = 'border-warning';
            return result;
        }
        catch (ex) {
            return '';
        }
    }
</script>
<script src="/js/main.js" async></script>