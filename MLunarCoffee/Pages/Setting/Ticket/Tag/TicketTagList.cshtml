@page
@model MLunarCoffee.Pages.Setting.Ticket.Tag.TicketTagListModel
@{
    Layout = null;
}

<div class="container-fluid px-0">
    <div class="row">
        <div class="col-12 px-0">
            <div class="card card-plain">
                <div class="vtcardheader card-header pb-0">
                    <div class="left">
                        <h6 class="mb-0">@Local["Ticket tag"]</h6>
                        <p class="text-sm mb-0">@Local["Dánh sách ticket tag"]</p>
                    </div>
                    <div class="right">
                        <button id="btn_TicketTag_AddNew" class="btn bg-gradient-primary btn-sm mt-1 setting_projectclosure" data-value="fade up" onclick="return TicketTag_AddNew()">@Local["Thêm mới"]</button>
                    </div>
                </div>
                <div class="card-body pt-2">
                    <div class="m-0 my-3 mobile-responsive">
                        <table id="dtTag" class="table vt-table mb-0">
                            <thead class="hiddenCollapse">
                                <tr role="row">
                                    <th class="d-none">ID</th>
                                    <th style="width: 40px;">@Local["#"]</th>
                                    <th>@Local["Tên tag"]</th>
                                    <th>@Local["Số ngày xử lý tối đa"]</th>
                                    <th>@Local["Mã màu"]</th>
                                    <th>@Local["Người sửa"]</th>
                                    <th class="setting_projectclosure" style="width: 60px;">@Local["Xóa"]</th>
                                </tr>
                            </thead>
                            <tbody id="dtTagBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    let DataUser;
    $(document).ready(function () {
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data) {
                DataUser = data[0];
                TicketTag_Load();
            });
        TicketTag_Event();
    });

    function TicketTag_Event() {

        $('#dtTag tbody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).attr("data-id"));
            TicketTag_Edit(ID);
        });

        $('#dtTag tbody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).attr("data-id"));
            TicketTag_Delete(ID)
        });

    }

    function TicketTag_Load() {
        AjaxLoad(url = "/Setting/Ticket/Tag/TicketTagList/?handler=LoadData"
            , data = {}
            , async = true
            , error = null
            , success = function (result) {
                if (result != "") {
                    let data = JSON.parse(result);
                    TicketTag_Render(data, 'dtTagBody');
                }
                else {
                    notiError_SW();
                }
            }
        );
    }

    //Load Todo Status
    async function TicketTag_Render(data, id) {
        return new Promise((resolve) => {
            let myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                if (data && data.length > 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let obj = Fun_GetObject_ByID(DataUser, item.PerEditor);
                        let name = (obj != null && obj.EmployeeName != undefined) ? obj.EmployeeName : 'unknown';
                        let img = (obj != null) ? obj.Avatar : Master_Default_Pic;

                        let tr = `
                            <tr class="vt-number" role="row">
                                <td class="d-none">${item.ID}</td>
                                <td class="vt-number-order" ></td>
                                <td>
                                    <a data-id="${item.ID}" class="text-decoration-underline fw-bold buttonEditClass" href="#">${item.Name}</a>
                                    <p class="text-sm text-secondary mb-0">${item.Note}</p>
                                </td>
                                <td >${formatNumber(item.MaxExcute)}</td>
                                <td ><div class="px-2 py-1 rounded-1" style="background-color:${item.Color}">${item.Color}</div></td>
                                <td>
                                    <div class="d-flex">
                                        <div class="icon icon-shape icon-sm me-2 text-center" >
                                            <img class="avatar avatar-xs mt-2" src="${ img }" alt="label-image">
                                        </div>
                                        <div class="d-flex flex-column">
                                            <h6 class="text-dark text-sm mb-0">${ name }</h6>
                                            <span class="text-xs">${GetDateTime_String_DMY(item.DayEditor)}</span>
                                        </div>
                                    </div>
                                </td>
                                    <td class="text-center setting_projectclosure">${TicketTag_RenderButton(item.ID)}</td>
                            </tr>`
                        myNode.insertAdjacentHTML("beforeend", tr);
                    }
                }
            }
        })
    }

    function TicketTag_RenderButton(id) {
        let buttons = [];
        buttons.push(`<button class="buttonGrid"><i data-id="${id}" class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>`)
        return Render_Button_Grid(buttons);
    }
   
    //#region //Event Delete

    function TicketTag_Delete(id) {
        const promise = notiConfirm();
        promise.then(function () { TicketTag_Excute_Delete(id); }, function () { });
    }
    function TicketTag_Excute_Delete(id) {
        AjaxLoad(url = "/Setting/Ticket/Tag/TicketTagList/?handler=Delete"
            , data = {
                CurrentID: id
            }
            , async = false
            , error = null
            , success = function (result) {
                if (result == "1") {
                    notiSuccess();
                    TicketTag_Load();
                } else {
                    notiError_SW();
                }
            });
    }
  
    //#endregion

    //#region // 

    function TicketTag_AddNew() {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/Ticket/Tag/TicketTagDetail?CurrentID=0" + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    function TicketTag_Edit(CurrentID) {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/Ticket/Tag/TicketTagDetail?CurrentID=" + CurrentID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    //#endregion

</script>
<script>js_require('/js/main.js')</script>
