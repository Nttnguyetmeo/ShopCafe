@page
@model MLunarCoffee.Pages.Setting.SettingListParamModel
@{
    if(@Model.layout=="none") Layout=null;
}
@Html.AntiForgeryToken()
<script>js_require('/js/main.js');</script>
<script>js_require('/js/comon/initialize_setting.js');</script>
<div class="row m-0" id="SettingListParamDiv">
    <div class="col-12 px-0">
        <div class="py-3 px-0">
            <div class="pb-0 px-0">
                <div class="d-lg-flex gap-3 px-0 px-sm-3">
                    <div class="col-w-350 col-auto my-auto mt-0">
                        <div class="h-100">
                            <div class="input-group flex-nowrap" id="settingpara_div">
                                <div class="input-group-text input-group-text px-2">
                                    <i class="fas fa-search" aria-hidden="true"></i>
                                    <div class="spinner-border spinner-border-sm d-none"></div>
                                </div>
                                <input id="settingpara_input" type="text" class="form-control" placeholder="eg .@Local["Tìm kiếm"]">
                                <div class="input-group-text"><i class="btn_clear fas fa-minus-circle opacity-1"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="flex-fill flex-grow-1 pb-3 overflow-auto mt-2 mt-lg-0">
                        <ul class="bg-transparent nav nav-horizontal nav-pills pb-1 permissionlist px-2 pt-0" role="tablist" id="setting_parent">
                        </ul>
                    </div>
                </div>
            </div>
            <div class="pt-0 px-0 px-sm-3 mt-n1">
                <div class="row">
                    <div class="col-12 col-md-12 col-xl-3">
                        <div class="nav-wrapper mt-2 sticky-top" style="--max-height:calc( 100vh - 180px ); --overflow-y: auto">
                            <ul class="nav nav-pills nav-menus nav-menus-vertical flex-column bg-white border-radius-lg" id="Setting_group">
                            </ul>
                        </div>
                    </div>
                    <div id="divMainSettingDetail" class="mt-n3 col-12 col-md-12 col-xl-9 p-1">

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var dataSettingMain;
    let ser_dtCurrentList;
    let ser_dtGroupList;
    let ser_setting_firstLink = "";
    let DataUser;
    var data_TimerSetting;
    $(document).ready(function () {
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data) {
                DataUser = data[0];
                ListPara_Setting();
            });
    });

    function ListPara_Setting () {
        AjaxLoad(url = "/Setting/SettingListParam/?handler=LoadList"
            , data = {}, async = true, error = null
            , success = function (result) {
                ser_dtCurrentList = JSON.parse(result);
                ser_dtGroupList = [];
                let groupid = 0;
                for (let i = 0; i < ser_dtCurrentList.length; i++) {
                    if (groupid != ser_dtCurrentList[i].GroupID) {
                        let e = {};
                        e.GroupID = ser_dtCurrentList[i].GroupID;
                        e.GroupText = Outlang[ser_dtCurrentList[i].GroupTextLangKey] ?? ser_dtCurrentList[i].GroupText;
                        ser_dtGroupList.push(e);
                        groupid = ser_dtCurrentList[i].GroupID;
                    }
                }
                initNavs();
                RenderSetting_Parent(ser_dtGroupList, "setting_parent");
                $('#setting_parent a:first').tab('show');
                RenderSetting_Detail(ser_dtCurrentList, "Setting_group");
                //$('#Setting_group a:first').trigger('click');
                $('#Setting_group a:first').tab('show');
                EventLinkClick_Parent();
            });
    }
    //#region // Detail
    function RenderSetting_Detail (data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    stringContent = stringContent + '<li class="nav-item" role="presentation">'
                        + '<a data-tab="' + item.ListLink + '" class="text-sm item-menu detail nav-link cursor-pointer" data-hover data-bs-toggle="tab">'
                        + (Outlang[item.ListTextLangKey] != undefined ? Outlang[item.ListTextLangKey] : item.ListText)
                        + '</a>'
                        + '</li>'
                        + '<hr class="horizontal dark my-0 opacity-2" data-link="' + item.ListLink + '">';
                }
            }
            myNode.innerHTML = stringContent;
        }
        EventLinkClick_Detail();

    }
    function EventLinkClick_Detail () {
          $('#Setting_group .detail').on('shown.bs.tab', function (e) {
                $('#Setting_group .detail').removeClass('active');
                $(this).addClass('active');
                let link = $(this).attr("data-tab");
                $("#divMainSettingDetail").load(link + "?ver=" + versionofWebApplication);
                $('#divMainSettingDetail').show();
          });
    }
    //#endregion
    //#region // Parent
    function EventLinkClick_Parent () {
        $("#setting_parent .linkgroup").unbind('click').click(function (event) {
            let id = $(this).attr("data-id");
            if (id != "0") {
                let data = ser_dtCurrentList.filter(word => {
                    return (word["GroupID"] == id);
                });
                if (data != undefined) {
                    RenderSetting_Detail(data, "Setting_group");
                    $('#Setting_group a:first').trigger('click');
                    $('#Setting_group a:first').tab('show');
                }
            }
            else {
                RenderSetting_Detail(ser_dtCurrentList, "Setting_group");
                $('#Setting_group a:first').tab('show');
            }
        });
        $('#settingpara_input').keyup(function () {
            if ($(this).val().length > 0) $(".btn_clear").removeClass('opacity-1');
            else $(".btn_clear").addClass('opacity-1');
            $("#settingpara_div .fa-search").hide();
            $("#settingpara_div .spinner-border").removeClass('d-none');
            clearTimeout(data_TimerSetting);
            data_TimerSetting = setTimeout(function (e) {
                Settingpara_Filter("Setting_group");
            }, 500);
        });
        $("#settingpara_div").on('click', '.btn_clear', function (e) {
            $('#settingpara_input').val('');
            $(".btn_clear").addClass('opacity-1');
            Settingpara_Filter("Setting_group");

        });
    }
    function RenderSetting_Parent (data, id) {

        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                stringContent =
                    '<li class="nav-item" role="presentation">'
                    + '<a class="linkgroup nav-link cursor-pointer py-1" data-bs-toggle="pill" data-id="' + 0 + '"  role="tab"><i class=" text-gradient text-primary fas fa-filter"></i></a>'
                    + '</li>';
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    stringContent = stringContent
                        + '<li class="nav-item" role="presentation">'
                        + '<a class="linkgroup nav-link cursor-pointer nav-item-text py-1" data-bs-toggle="pill" data-id="' + item.GroupID + '"  role="tab">' + item.GroupText + '</a>'
                        + '</li>';
                }
            }
            document.getElementById(id).innerHTML = stringContent;
        }
    }
    async function Settingpara_Filter (id) {
        await new Promise((resolve, reject) => {
            setTimeout(
                () => {
                    $("#Setting_group").NavMobile('show')
                    let textsearch = $('#settingpara_input').val().trim();
                    if (textsearch == "") {
                        RenderSetting_Detail(ser_dtCurrentList, id);
                    }
                    else {
                        let search = xoa_dau(textsearch.toLowerCase());
                        if (search == "") {
                            RenderSetting_Detail(ser_dtCurrentList, id);
                        }
                        else {
                            let data = ser_dtCurrentList.filter(word => {
                                var _text = Outlang[word["ListTextLangKey"]] != undefined ? Outlang[word["ListTextLangKey"]] : word["ListText"]
                                return (_text != undefined && xoa_dau(_text.toLowerCase()).includes(search));
                            });
                            RenderSetting_Detail(data, id);
                            ColorSearchFilterText(search, "setting_render");
                        }
                    }
                    $("#settingpara_div .fa-search").show();
                    $("#settingpara_div .spinner-border").addClass('d-none');
                    resolve()
                }
            )
        })
    }
    //#endregion
</script>
<script>js_require('/assests/dist/ColorPicker/spectrum.js');</script>
<script>js_require('/js/Thirdparty/ICDAction.js');</script>
<script>js_require('/js/Thirdparty/TemplateAction.js');</script>

<link href="/assests/dist/ColorPicker/spectrum.css" rel="stylesheet" />
 