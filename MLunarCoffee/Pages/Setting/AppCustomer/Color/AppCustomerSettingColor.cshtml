@page
@model MLunarCoffee.Pages.Setting.AppCustomer.Color.AppCustomerSettingColorModel
@{
    Layout = null;
}
<div class="row">
    <div class="col-12 px-0">
        <div class="card card-plain" id="divSettingColor">
            <div class="vtcardheader card-header pb-0 pt-2">
                <div class="left">
                    <h6 class="mb-0">@Local["Cấu hình màu giao diện"]</h6>
                    <p class="text-sm mb-0">@Local["Danh sách màu"]</p>
                </div>
            </div>
            <div class="card-body pt-2">
                <div class="m-0 my-3 mobile-responsive">
                    <table class="table vt-table mb-0" id="SC_dtContent">
                        <thead>
                            <tr>
                                <th class="d-none">ID</th>
                                <th>#</th>
                                <th style="min-width: 120px;">@Local["Tên màu"]</th>
                                <th>@Local["Kiểu màu"]</th>
                                <th>@Local["Chỉnh sửa gần nhất"]</th>
                            </tr>
                        </thead>
                        <tbody id="SC_dtContentBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="divSettingColorDetail">

</div>
<script type="text/javascript">
    let DataUser;
    $(document).ready(function () {
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data) {
                DataUser = data[0];
                SettingColor_Load();
            }
        )
    })

    //#region //LOAD
    function SettingColor_Load () {
        AjaxLoad(url = "/Setting/AppCustomer/Color/AppCustomerSettingColor/?handler=LoadData"
            , data = {}
            , async = true
            , error = null
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result)
                    SettingColor_Render(data, "SC_dtContentBody");
                } else notiError_SW()
            }
        )
    }
    //#endregion


    //#region //RENDER
    async function SettingColor_Render (data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                let myNode = document.getElementById(id);
                if (myNode != null) {
                    myNode.innerHTML = "";
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = `
                                    <td class="d-none">${item.ID}</td>
                                    <td class="vt-number-order"></td>
                                    <td><span class="text-sm text-primary btnEdit cursor-pointer border-bottom border-primary">${item.Name.split('-')[0]}</span></td>
                                    <td>
                                    <div class="d-flex">
                                    <span class="d-flex p-2 badge me-1" style="display: block !important; background-color:${item.ColorTone};">&nbsp </span>
                                    <span class="d-flex p-2 badge me-1" style="display: block !important; background-color:${item.HeavyTone2};"> &nbsp</span>
                                    <span class="d-flex p-2 badge me-1" style="display: block !important; background-color:${item.HeavyTone1};">&nbsp </span>
                                    <span class="d-flex p-2 badge me-1" style="display: block !important; background-color:${item.ColorTone3};"> &nbsp </span>
                                    <span class="d-flex p-2 badge me-1" style="display: block !important; background-color:${item.ColorTone2};">&nbsp  </span>
                                    <span class="d-flex p-2 badge me-1" style="display: block !important; background-color:${item.TrueTone};">  &nbsp </span>
                                    </div>
                                    </td>
                                    <td>${SettingColor_HandleEdit(item.Modified, item.Modified_By)}</td>
                                `
                            tr = `<tr role="row" class="vt-number">${tr}</tr>`
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                        SettingColor_Event();
                    }
                }
            }, 100)
        })
    }
    function SettingColor_HandleEdit (DayEdit, PerEdit) {
        try {
            if (PerEdit != 0) {
                let obj = Fun_GetObject_ByID(DataUser, PerEdit);
                let Name = (obj != null) ? obj.Name : '';
                let Img = (obj != null) ? obj.Avatar : '';
                let tr = `
                    <div class="d-flex">
                        <div class="icon icon-shape icon-sm me-2 text-center">
                            <img class="avatar avatar-xs mt-2" src="${Img}">
                        </div>
                        <div class="d-flex flex-column">
                            <h6 class="text-dark text-sm mb-0">${Name}</h6>
                            <span class="text-xs">${DayEdit.includes('1900') ? '' : GetDateTime_String_DMY(DayEdit)}</span>
                        </div>
                    </div>
                `
                return tr;

            } else {
                return "";
            }
        }
        catch {
            return "";
        }
    }

    //#endregion

    //#region //EVENT

    function SettingColor_Event () {
        $("#SC_dtContentBody .btnEdit").unbind("click").on("click", function () {
            let ID = $(this).closest("tr").children()[0].innerHTML;
            SettingColor_Edit(ID);
        });
    }
    //#endregion

    //#region //Show Detail
    function SettingColor_Edit (ID) {
        SettingColor_OpenDetail();
        $("#divSettingColorDetail").load("/Setting/AppCustomer/Color/AppCustomerSettingColorDetail?CurrentID=" + ID + "&ver=" + versionofWebApplication);
        $("#divSettingColorDetail").show();
        return false;
    }

    function SettingColor_OpenDetail () {
        $("#divSettingColorDetail").empty();
        $("#divSettingColor").hide();
        document.getElementById("divSettingColorDetail").innerHTML = '';
    }

    function SettingColor_Close () {
        document.getElementById("divSettingColorDetail").innerHTML = '';
        $("#divSettingColor").show();
        $("#divSettingColorDetail").hide();
    }
    //#endregion
</script>