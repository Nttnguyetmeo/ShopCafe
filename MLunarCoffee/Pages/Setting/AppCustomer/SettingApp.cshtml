@page
@model MLunarCoffee.Pages.Setting.AppCustomer.SettingAppModel
@{
    if (@Model.layout == "none") Layout = null;
}
@Html.AntiForgeryToken()


<div class="row m-0">
    <div class="col-12 px-0">
        <div class="card card-plain">
            <div class="vtcardheader card-header px-1 pb-0">
                <div class="left w-100">               
                    <div class="row m-0">
                        <div class="col-12 col-sm-10 px-0">
                            <div class="flex-fill flex-grow-1 overflow-auto">
                                <ul class="bg-transparent nav nav-horizontal nav-pills pb-1 permissionlist px-0 pt-0" role="tablist" id="listsetting_Mobile">
                                </ul>
                            </div>
                        </div>
                        <div class="col-12 col-sm-2 px-0 text-end">
                            <button class="btn bg-gradient-primary btn-sm mt-0 text-nowrap" onclick="event.preventDefault(); return AppGeneral_UpdateVer();" data-bs-toggle="tooltip" title="@Local["Cập nhật thay đổi setting"]" data-fontchanged="true">@Local["Áp dụng"]</button>
                        </div>
                    </div>
                </div>                
            </div>
            <div class="card-body px-0 pt-2" id="divMainSettingApp">
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var ser_AcceptSettingApp = {};
    let ser_DtVersion = {};
    $(document).ready(function () {
        AjaxLoad(url = "/Setting/AppCustomer/SettingApp/?handler=LoadList"
            , data = {}, async = true, error = null
            , success = function (result) {
                let data = JSON.parse(result);
                let menus = data.Menu;
                AppGeneral_AppAccept(data.TypeAccept);
                AppGeneral_RenderSetting(menus, "listsetting_Mobile");
                ser_DtVersion = data.VersionSettingApp;
                $('#listsetting_Mobile a:first').trigger('click');
                $('#listsetting_Mobile a:first').tab('show');
                ToolPopper();
            }
        );
    });



    function AppGeneral_RenderSetting(data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {

                for (var i = 0; i < data.length; i++) {
                    let item = data[i];
                    stringContent = stringContent
                        + '<li class="nav-item" role="presentation">'
                        + '<a class="linkapp linkgroup nav-link cursor-pointer nav-item-text" data-bs-toggle="pill" data-link="' + item.ListLink + '"  role="tab">' + (Outlang[item.ListTextLangKey] != undefined ? Outlang[item.ListTextLangKey] : item.ListText) + '</a>'
                        + '</li>'
                }
            }
            document.getElementById(id).innerHTML = stringContent;
        }
        AppGeneral_Setting_HandleEvent();
    }
    function AppGeneral_Setting_HandleEvent() {
        $(".linkapp").unbind().click(function (event) {
            let link = $(this).attr("data-link");
            $("#divMainSettingApp").empty();
            $("#divMainSettingApp").load(link + "?ver=" + versionofWebApplication);
        });
    }

    function AppGeneral_AppAccept(data) {
        try {
            ser_AcceptSettingApp = data.reduce((pre, arr, dataArr) => {
                let dismen = (arr.Dimensions).split(',');
                arr.width = dismen.length != 0 && dismen[0] != undefined ? Number(dismen[0]) : 0;
                arr.height = dismen.length != 0 && dismen[1] != undefined ? Number(dismen[1]) : 0;
                arr.format = arr.Format != '' ? (arr.Format).split(',') : [];
                let e = {}
                e[arr.Key] = arr;

                if (pre[arr.Type]) pre[arr.Type] = { ...pre[arr.Type], [arr.Key]: arr };
                else pre[arr.Type] = e;
                return pre;
            }, {})

        }
        catch (ex) {

        }
    }
    function AppGeneral_UpdateVer() {
        let DataVer = {};
        let version = ser_DtVersion[0].Value;
        if (version.includes(".") == false) {
            version = version + '.00.00';
        }
        let numVer = Number(version.replaceAll('.', ''));
        numVer++;
        let ver = parseInt(numVer / 10000);
        let verMiddle = parseInt(numVer % 10000 / 100);
        let verEnd = parseInt(numVer % 100);

        ser_DtVersion[0].Value = (ver + '.' + ((verMiddle > 9) ? verMiddle : '0' + verMiddle) + '.' + ((verEnd > 9) ? verEnd : '0' + verEnd)).toString();
        DataVer.Value = ser_DtVersion[0].Value;
        DataVer.ID = ser_DtVersion[0].ID;

        AjaxLoad(url = "/Setting/AppCustomer/SettingApp/?handler=ApplyVer"
            , data = { data: JSON.stringify(DataVer) }
            , async = true
            , error = null
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    AppSetting_Load();
                }
                else { notiError_SW() }
            }
        )
    }

</script>



<script>js_require('/assests/dist/ColorPicker/spectrum.js');</script>
<link href="/assests/dist/ColorPicker/spectrum.css" rel="stylesheet" />
