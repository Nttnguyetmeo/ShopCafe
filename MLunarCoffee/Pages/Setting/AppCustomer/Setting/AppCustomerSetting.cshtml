@page
@model MLunarCoffee.Pages.Setting.AppCustomer.Setting.AppCustomerSettingModel
@{
    Layout = null;
}
<div class="row">
    <div class="col-12 px-0">
        <div class="card card-plain">
            <div class="vtcardheader card-header pb-0 pt-2">
                <div class="left">
                    <h6 class="mb-0">@Local["Cài đặt chung"]</h6>
                    <p class="text-sm mb-0">@Local["Chỉnh sửa"]: @Local["Thông tin chung"], @Local["Hình ảnh"], Logo,... </p>
                </div>
            </div>
            <div class="card-body pt-2">
                <div class="m-0 my-3 mobile-responsive position-relative">
                    <table class="table vt-table mb-0" id="CS_AppSetting">
                        <thead>
                            <tr>
                                <th class="d-none">ID</th>
                                <th>#</th>
                                <th>@Local["Loại cấu hình"]</th>
                                <th style="min-width: 230px;">@Local["Giá trị"]</th>
                            </tr>
                        </thead>
                        <tbody id="CS_AppSettingBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    let DataUser;
    let CS_verdata = new Object;

    $(document).ready(function () {
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data) {
                DataUser = data[0];
                AppSetting_Load();
            }
        )
    })

    //#region //LOAD
    function AppSetting_Load() {
        AjaxLoad(url = "/Setting/AppCustomer/Setting/AppCustomerSetting/?handler=LoadData"
            , data = {}
            , async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    let VerData = data.filter(word => word.Name == "Ver");
                    AppSetting_Render(data, "CS_AppSettingBody");
                    if (VerData.length > 0) {
                        CS_verdata.ID = VerData[0].ID
                        CS_verdata.Value = VerData[0].Value
                    }
                }
            }
        )
    }

    //#endregion

    //#region //RENDER
    async function AppSetting_Render(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                let myNode = document.getElementById(id);
                if (myNode != null) {
                    myNode.innerHTML = '';
                    let stringContent = '';
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = `
                                    <td class="d-none">${item.ID}</td>
                                    <td class="vt-number-order"></td>
                                    <td>${(item.IsDisabled != 1) ? `<span class="border-bottom text-primary border-primary cursor-pointer SC_Edit">${item.Description}</span>` : `<span>${item.Description}</span>`}</td>
                                    <td>${AppSetting_RenderValue(item.Value, item.Type)}</td>
                                `
                            tr = (item.IsHide == 0) ? `<tr role="row" class="vt-number">${tr}</tr>` : '';
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                AppSetting_Event();
            }, 100)
        })
    }

    function AppSetting_RenderValue(Value, Type) {
        try {
            let result = '';
            switch (Type) {
                case 'img':
                    result = `<div class="text-center"><img class="border-radius-md" src="${Value}" height="60" onerror="Master_OnLoad_Error_Image(this)"/></div>`
                    break;
                case 'password':
                    result = `${(Value == "0" || Value == "") ? "@Local["Số điện thoại"] (@Local["Mặc định"])" : "@Local["Ngẫu nhiên"] 6 @Local["Số"]"}`;
                    break;
                default:
                    result = `${Value}`
            }
            return result;
        }
        catch {
            return "";
        }
    }

    //#endregion

    //#region //EVENT

    function AppSetting_Event() {
        $("#CS_AppSettingBody .SC_Edit").unbind().on('click', function () {
            let ID = Number($(this).closest('tr').children()[0].innerHTML);
            AppSetting_EditAppSetting(ID);
        });
    }
    //#endregion

    //#region //MODEL
    function AppSetting_EditAppSetting(ID) {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/AppCustomer/Setting/AppCustomerSettingDetail?CurrentID=" + ID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }
        //#endregion


</script>