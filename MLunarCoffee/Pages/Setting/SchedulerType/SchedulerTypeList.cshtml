@page
@model MLunarCoffee.Pages.Setting.SchedulerType.SchedulerTypeListModel
@{
    Layout=null;
}
 
<div class="container-fluid py-0 px-0">
    <div class="row m-0">
        <div class="col-12 px-0">
            <div class="card card-plain">
                <div class="vtcardheader card-header pb-0 pt-3 px-2">
                    <div class="left">
                        <h6 class="mb-0">@Local["Loại lịch hẹn"] </h6>
                        <p class="text-sm mb-0">@Local["Danh sách loại lịch hẹn"]</p>
                    </div>
                    <div class="right">
                        <button id="btnSchedulerType" class="btn bg-gradient-primary btn-sm mt-1 setting_projectclosure" data-value="fade up" onclick="return SchedulerTypeAdd()">@Local["Thêm mới"]</button>

                    </div>
                </div>
                <div class="card-body pt-0 px-2">
                    <div class="m-0 my-3 table-responsive">
                        <table id="dtContentSchedulerType" class="table vt-table mb-0">
                            <thead class="hiddenCollapse">
                                <tr role="row">
                                    <th class="d-none">ID</th>
                                    <th style="width:40px;">@Local["#"]</th>
                                    <th>@Local["Tên"]</th>
                                    <th>@Local["Người sửa"]</th>
                                    <th style="width:40px;" class="setting_projectclosure">@Local["Xóa"]</th>
                                </tr>
                            </thead>
                            <tbody id="dtContentSchedulerTypeBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    let DataUser;

    $(document).ready(function () {
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data) {
                DataUser = data[0];
                SchedulerTypeLoad();
            });
        $('#dtContentSchedulerType tbody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            SchedulerTypeEdit(ID);
        });
        $('#dtContentSchedulerType tbody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            SchedulerTypeDelete(ID)
        });

    });
    function SchedulerTypeLoad() {
        AjaxLoad(url = "/Setting/SchedulerType/SchedulerTypeList/?handler=LoadData"
            , data = {}
            , async = true
            , error = null
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    SchedulerTypeRender(data, 'dtContentSchedulerTypeBody');
                }
                else {
                    notiError_SW();
                }
        });
    }

    async function SchedulerTypeRender(data, id) {
        return new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let obj = Fun_GetObject_ByID(DataUser, item.PerEditor);
                        let name = (obj != null) ? obj.Name : 'unknown';
                        let img = (obj != null) ? obj.Avatar : Master_Default_Pic;
                        let icon = SchedulerTypeRender_Icon(item.ClassIcon, item.ColorCode);
                        let tr =
                            '<td class="d-none">' + item.ID + '</td>'
                            + '<td class="vt-number-order"></td>'
                            + `<td><a class="buttonEditClass" href="#"> ${icon}  <span class="badge text-white text-decoration-underline" style="background:${item.ColorCode};text-transform:unset!important;">${item.Name}</span></a></td>`
                            + '<td>'
                            + '<div class="d-flex">'
                            + '<div class="icon icon-shape icon-sm me-2 text-center" >'
                            + '<img class="avatar avatar-xs mt-2" src="' + img + ' " alt="label-image">'
                            + '</div>'
                            + '<div class="d-flex flex-column">'
                            + '<h6 class="text-dark text-sm mb-0">' + name + '</h6>'
                            + '<span class="text-xs">' + GetDateTime_String_DMY(item.DayEditor) + '</span>'
                            + '</div>'
                            + '</div>' + '</td>'
                            + '<td class="setting_projectclosure">'
                            + ((item.DeleteButton === 1)
                                ? Render_Button_Grid(['<button class="buttonGrid" value="'
                                    + item.ID
                                    + '"><i class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>'])
                                : '')
                            + '</td>'

                        stringContent = stringContent + '<tr class="vt-number" role="row">' + tr + '</tr>';
                    }
                }
                myNode.innerHTML = stringContent;
            }
        })
    }

    function SchedulerTypeRender_Icon(classIcon, colorCode) {
        try {
            let result = '';
            if (classIcon != '') {
                result = '<span><i class="' + classIcon + ' me-2" style="color:' + colorCode + '"></i></span>'
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    function SchedulerTypeDelete(id) {
        const promise = notiConfirm();
        promise.then(function () { SchedulerTypeExecuteDelete(id); }, function () { });
    }
    function SchedulerTypeExecuteDelete(id) {
        AjaxLoad(url = "/Setting/SchedulerType/SchedulerTypeList/?handler=DeleteSchedulerType"
            , data = { CurrentID: id}, async = true, error = null
            , success = function (result) {
                if (result == "1") {
                    notiSuccess();
                    SchedulerTypeLoad();
                } else {
                    notiError_SW();
                }
            });
    }

    function SchedulerTypeEdit(CurrentID) {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/SchedulerType/SchedulerTypeDetail?CurrentID=" + CurrentID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    function SchedulerTypeAdd() {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Setting/SchedulerType/SchedulerTypeDetail" + "?ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }


</script>

<script>js_require('/js/main.js');</script>

