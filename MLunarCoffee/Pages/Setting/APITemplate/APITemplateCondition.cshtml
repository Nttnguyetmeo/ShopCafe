@page
@model MLunarCoffee.Pages.Setting.APITemplate.APITemplateConditionModel
@{
    Layout = null;
}

<div class="container-fluid px-0 ">
    <div class="row">
        <div class="col-12">
            <div class="card mb-3">
                <div class="card-header p-3 pb-0">
                    <div class="d-lg-flex">
                        <div class="w-50 col-auto my-auto">
                            <div class="h-100">
                                <h6 class="mb-0 text-capitalize">@Local["Cài đặt điều kiện"]</h6>
                                <p class="text-sm mb-0">@Local["Chi tiết"]</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body p-3 pt-2 form3" id="AED_FormAccountEntry">
                    <ul class="bg-transparent nav nav-horizontal nav-pills pb-1  pt-0">
                        <li class="nav-item" role="presentation">
                            <a class="rd_roomtab nav-link cursor-pointer py-1 active" data-bs-toggle="pill" data-bs-target="#next_schedule" role="tab" aria-selected="true" data-id="next_schedule" role="tab" aria-selected="true">
                                @Local["Mặc định"]
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="rd_roomtab nav-link cursor-pointer py-1" data-bs-toggle="pill" data-bs-target="#inday_schedule" role="tab" aria-selected="false" data-id="inday_schedule">
                                @Local["Tùy chọn"]
                            </a>
                        </li>

                    </ul>
                    <div id="rd_roomtabdetail" class="card-body py-2 ps-3 overflow-auto tab-content">
                        <div class="text-dark tab-pane fade active show" id="next_schedule" data-id="next_schedule">
                            <div class="row px-2">
                                <ul class="list-group mt-0" id="atc_listContent">
                                </ul>
                                <div class="d-flex mt-3 ps-0">
                                    <div class="atl_btnAdd icon-hover" data-bs-toggle="tooltip" data-bs-placement="top" data-id="3" data-bs-original-title="Thêm mới">
                                        <i class="cursor-pointer fa-plus fas text-primary text-sm" onclick="return atc_addCons();"></i>
                                    </div>
                                    <span class="text-primary">Nhánh</span>
                                </div>
                            </div>
                        </div>
                        <div class="text-dark tab-pane fade" style="display: none" id="inday_schedule" data-id="inday_schedule">
                            <div id="rd_indayschedule" class="mt-3"></div>
                        </div>

                    </div>

                </div>
            </div>
            <div class="fixed-botombutton">
                <div class="action_Save">
                    <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
                    <div class="action_Save-Content">
                        <button class="btn btn-secondary" form="AED_FormAccountEntry" onclick="event.preventDefault();CloseModal()">@Local["Huỷ"]</button>
                        <button class="btn btn-success" form="AED_FormAccountEntry" onclick="event.preventDefault();atc_checkValue()">@Local["Kiểm tra"]</button>
                        <button form="AED_FormAccountEntry" type="button" class="btn bg-gradient-primary mt-2 me-2" onclick="event.preventDefault();atc_ExcuteData()">@Local["Lưu"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    //#region //INIT - DECLARE
    let nameKey = '$item';
    let atc_objKeyDefault = {
        '$orderSelf': { ID: '$orderSelf', Name: '$orderSelf' }

    }
    let atc_dataKey = [];
    let atc_datalegal = [{ ID: '&&', Name: 'AND' }, { ID: '||', Name: 'OR' }];
    let atc_operator = [{ ID: 'eq', Name: '=', regex: '(.+)==(.+)' }
        , { ID: 'ne', Name: '≠', regex: '(.+)!=(.+)'  }
        , { ID: 'gt', Name: '>', regex: '(.+)>(.+)' }
        , { ID: 'lt', Name: '<', regex: '(.+)<(.+)' }
        , { ID: 'ge', Name: '>=', regex: '(.+)>=(.+)' }
        , { ID: 'le', Name: '<=', regex: '(.+)<=(.+)' }
        , { ID: 'contains', Name: 'contains', regex: '(.+)\\.includes\\((.+)\\)' }
        , { ID: 'reg', Name: 'regex', regex: '\\/(.+)\\/gm\\.test\\((.+)\\)' }
    ];
    let atc_regexOperator = '';
    let atc_cbComplete;
    let atc_dataCondi = {};

    $(document).ready(function () {
        atc_dataCondi = {};
        atc_regexOperator = atc_operator.reduce((pre, arr) => { if (arr.regex) pre += `|${arr.regex}`; return pre }, '');
        atc_regexOperator = atc_regexOperator.indexOf('|') == 0 ? atc_regexOperator.substring(1) : atc_regexOperator;
    });

    function atc_cbExcute(objMap, jsonData, funcComplete) {
        let keys = Object.keys(objMap);
        for (i = 0; i < keys.length; i++) {
            let item = keys[i];
            let e = {
                ID: item, Name: `${nameKey}['${item}']`
            }
            atc_dataKey.push(e);
        }
        atc_dataKey = [...atc_dataKey, ...Object.values(atc_objKeyDefault)];
        let data = atc_parseData(jsonData);debugger
        atc_cbComplete = funcComplete;
        $('#atc_listContent').empty();
        atc_renderData(data, 'atc_listContent');
    }

    function atc_renderData(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let condi = item?.condi ?? '';

                            let id = new Date().getTime();
                            let tr = atc_renderEach(item, id);
                            myNode.insertAdjacentHTML("beforeend", tr);
                            atc_renderCondi(condi, id);
                        }
                    }
                }
                atc_EventDetail();
                resolve();
            }, 10)
        })
    }

    function atc_renderEach(item, id) {
        let tr = '';
        if (item && Object.keys(item).length > 0) {
            let result = item?.result ?? '';
            tr =`
                <li class="bg-gray-100 border-1 border-radius-lg ms-1 mt-3 p-3 row atc_clsRow" id="atc_Row${id}" data-id=${id}>
                    <label class="ps-0 atc_orderrow">@Local["Nhánh điều kiện"] </label>
                    <div class="row pe-0">
                        <div class="col-12 col-lg-6 form-group px-1" id="ctd_Result_${id}">
                            <div class="d-flex form-group mb-0">
                                <div class="input-group me-2 w-20">
                                    <div class="border dropdown fluid form-control search selection ui w-auto">
                                        <div class="text">THEN</div>
                                    </div>
                                </div>
                                <div class="input-group">
                                    <textarea rows="1" name="name" class="border form-control numberExport ps-2" id="ctd_ipResult${id}" value="${result}" placeholder="eg .@Local["Kết quả"]" >${result}</textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex ps-0">
                        <span class="text-primary" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="@Local["Thêm mới"]">
                            @Local["Thêm"]
                        </span>
                          <span class="ms-2 text-danger" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="@Local["Xóa"]">
                            @Local["Xóa"]
                        </span>
                    </div>

                </li>`;
        }
        return tr;
    }

    function atc_renderCondi(condi, id) {
        let myNode = $(`#ctd_Result_${id}`)[0];
        if (myNode != null) {
            let data = condi.split(/&&|\|\|/gm);
            let legals = condi.match(/&&|\|\|/gm) ?? [];
            legals.unshift("");
            if (!atc_dataCondi[id]) atc_dataCondi[id] = { id, value: {} };
            let value = atc_dataCondi[id].value;
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    if (item != "") {
                        let idDet = new Date().getTime();
                        let rg = new RegExp(atc_regexOperator);
                        let para = rg.exec(item).filter(function (element) {
                            return element !== undefined;
                        });
                        para.splice(0, 1);
                        value[idDet] = { id: idDet, value: item, legal: legals[i] };
                        let strLegal = atc_renderLegal(i, idDet);
                        let tr = `
                        <div class="col-12 col-lg-6 form-group px-1 atc_clsRowDetail" id="atc_rowDetail${idDet}" data-id="${idDet}">
                            <div class="d-flex form-group mb-0">
                                ${strLegal}
                                <div class="input-group">
                                    <input name="name" class="border form-control atc_clsPara1 ps-2" id="atc_para1_${idDet}" value="${para[0]}" placeholder="eg .@Local["Giá trị"] 1" />
                                    <div class="border dropdown fluid form-control search selection ui atc_clsOperator w-auto" id="atc_operator${idDet}">
                                        <i class="dropdown icon"></i>
                                        <input type="hidden" value="0" />
                                        <input class="search" autocomplete="off" tabindex="0" />
                                        <div class="default text">Operatpr</div>
                                        <div id="atc_cbboperator${idDet}" class="menu" tabindex="-1">
                                        </div>
                                    </div>
                                    <input name="name" class="border form-control atc_clsPara2 ps-2" id="atc_para2_${idDet}" value="${para[1]}" placeholder="eg .@Local["Giá trị"] 2" />
                                    <div class="input-group-text me-0 vttech-input-item vttech-input-item-first ">
                                        <i class="atc_btnDelItem vtt-icon vttech-icon-delete text-lg text-danger cursor-pointer "></i>
                                    </div>
                                </div>
                            </div>
                        </div>`;
                        myNode.insertAdjacentHTML('beforebegin', tr);
                        if (i != 0) {
                            Load_Combo(atc_datalegal, `atc_cbblegal${idDet}`, true);
                            $(`#atc_legal${idDet}`).dropdown('refresh');
                            $(`#atc_legal${idDet}`).dropdown('set selected', legals[i]);
                        }
                        let ope = atc_operator.filter(e => { return (new RegExp(e.regex)).test(item) })[0]?.ID ?? atc_operator[0].ID;
                        Load_Combo(atc_operator, `atc_cbboperator${idDet}`, true);
                        $(`#atc_operator${idDet}`).dropdown('refresh');
                        $(`#atc_operator${idDet}`).dropdown('set selected', ope);
                    }

                }
            }
        }

    }

    function atc_renderLegal(index, id) {
        let tr = '';
        if (index == 0) {
            tr = `
                 <div class="input-group me-2 w-20">
                     <div class="border dropdown fluid form-control search selection ui w-auto">
                         <div class="text">IF</div>
                     </div>
                 </div>`;
        }
        else {
            tr =`
                <div class="input-group me-2 w-20">
                    <div class="border dropdown fluid form-control search selection ui act_clsLegal w-auto" id="atc_legal${id}">
                        <i class="dropdown icon"></i>
                        <input type="hidden" value="0" />
                        <input class="search" autocomplete="off" tabindex="0" />
                        <div class="default text">Logic operator</div>
                        <div id="atc_cbblegal${id}" class="menu" tabindex="-1">
                        </div>
                    </div>
                </div>`;
        }
        return tr;
    }

    function atc_parseData(jsonData) {
        try {
            return JSON.parse(jsonData)
        }
        catch (e) {
            return [];
        }
    }

    function atc_EventDetail() {
        $("#atc_listContent .act_clsLegal").unbind('change').change(function (e) {
            e.preventDefault();
            let id = $(this).closest('.atc_clsRow').attr('data-id');
            let idDet = $(this).closest('.atc_clsRowDetail').attr('data-id');
            let legal = $(this).dropdown('get value');
            let value = atc_dataCondi[id]?.value ?? {};
            if (value && Object.keys(value).length > 0) {
                value[idDet].legal = legal;
            }

        });

        $("#atc_listContent .atc_clsOperator").unbind('change').change(function (e) {
            e.preventDefault();
            let id = $(this).closest('.atc_clsRow').attr('data-id');
            let idDet = $(this).closest('.atc_clsRowDetail').attr('data-id');
            atc_changeComparison(id, idDet);

        });

        $("#atc_listContent .atc_clsPara1").unbind('change').change(function (e) {
            e.preventDefault();
            let id = $(this).closest('.atc_clsRow').attr('data-id');
            let idDet = $(this).closest('.atc_clsRowDetail').attr('data-id');
            atc_changeComparison(id, idDet);

        });

        $("#atc_listContent .atc_clsPara2").unbind('change').change(function (e) {
            e.preventDefault();
            let id = $(this).closest('.atc_clsRow').attr('data-id');
            let idDet = $(this).closest('.atc_clsRowDetail').attr('data-id');
            atc_changeComparison(id, idDet);

        });

        $("#atc_listContent .atc_btnAddCons").unbind('click').click(function (e) {
            e.preventDefault();
            let id = $(this).closest('.atc_clsRow').attr('data-id');
            let condi = "&& 0 == 0";
            atc_renderCondi(condi, id);
            atc_EventDetail();
        });

        $("#atc_listContent .atc_btnDelItem").unbind('click').click(function (e) {
            e.preventDefault();
            let id = $(this).closest('.atc_clsRow').attr('data-id');
            let idDet = $(this).closest('.atc_clsRowDetail').attr('data-id');
            let countChild = $(`#atc_Row${id}`).find('.atc_clsRowDetail');
            debugger
            if (countChild.length > 1) {
                $(`#atc_rowDetail${idDet}`).remove();
                let value = atc_dataCondi[id]?.value ?? {};
                if (value && Object.keys(value).length > 0) {
                    delete value[idDet];
                }
            }
            else {
                $(`#atc_Row${id}`).remove();
                delete atc_dataCondi[id];
            }

        });
    }



    function atc_changeComparison(id, idDet) {
        let result = '';
        let para1 = $(`#atc_para1_${idDet}`).val();
        let para2 = $(`#atc_para2_${idDet}`).val();
        let ope = $(`#atc_operator${idDet}`).dropdown("get value") ? $(`#atc_operator${idDet}`).dropdown("get value") : "";
        switch (ope) {
            case "eq":
                result = `${para1} == ${para2}`;
                break;
            case "ne":
                result = `${para1} != ${para2}`;
                break;
            case "lt":
                result = `${para1} > ${para2}`;
                break;
            case "lt":
                result = `${para1} < ${para2}`;
                break;
            case "ge":
                result = `${para1} >= ${para2}`;
                break;
            case "le":
                result = `${para1} <= ${para2}`;
                break;
            case "contains":
                result = `${para1}.includes(${para2})`;
                break;
            case "reg":
                result = `/${para1}/gm.test(${para2})`;
                break;
        }
        let value = atc_dataCondi[id]?.value ?? {};
        if (value && Object.keys(value).length > 0) {
            value[idDet].value = result;
        }

    }

    function atc_addCons() {
        let item = { condi: "1 == 1", result: "0" };
        let condi = item?.condi ?? '';

        let id = new Date().getTime();
        let tr = atc_renderEach(item, id);
        let myNode = $(`#atc_listContent`)[0];
        myNode.insertAdjacentHTML("beforeend", tr);
        atc_renderCondi(condi, id);
        atc_EventDetail();
        return false;
    }

    function atc_checkValue() {
        let data = Object.values(atc_dataCondi);
        for (let i = 0; i < data.length; i++) {
            let val = data[i].value;
            let condis = Object.values(val);
            let result = '';
            for (let j = 0; j < condis.length; j++) {
                let item = condis[j];
                result += `${item.legal} ${item.value} `;
            }
            let isValid = atc_checkCondi(result);
            if (!isValid) {
                $('#textShowMessage').html('lỗi');
                return false;
            }
        }
        return true;
    }

    function atc_checkCondi(result) {
        try {
            eval(result);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    //#endregion


</script>
<style>
    body {
        counter-reset: section;
    }
    .atc_orderrow::after {
        counter-increment: section;
        content: counter(section);
    }
</style>