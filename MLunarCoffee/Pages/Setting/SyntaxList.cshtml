@page
@model MLunarCoffee.Pages.Setting.SyntaxListModel
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<div class="container-fluid py-0 px-0">
    <div class="row m-0">
        <div class="col-12 px-0">
            <div class="card card-plain">
                <div class="vtcardheader card-header pb-0 px-2">
                    <div class="left">
                        <h6 class="mb-0 text-capitalize">@Local["Cấu trúc mã"]</h6>
                        <p class="text-sm mb-0">@Local["Thông tin cấu trúc mã"]</p>
                    </div>
                </div>
                <div class="card-body pt-0 px-2">
                    <div class="col-12 px-0 row d-lg-flex align-items-stretch" id="ContentSyntaxBody">
                    </div>
                </div>
            </div>
            <div class="row" id="SyntaxDetail"></div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        SyntaxLoadList();
    });
    function SyntaxLoadList() {
        AjaxLoad(url = "/Setting/SyntaxList/?handler=LoadData"
            , data = {}, async = true, error = null
            , success = function (result) {
                if (result != "") {
                    let data = JSON.parse(result)["Table"];
                    let data2 = JSON.parse(result)["Table1"];
                    RenderSyntaxList(data, data2, "ContentSyntaxBody");
                } else {
                    notiError_SW();
                }
            });
    }
    function RenderSyntaxList(data, data2, id) {
        let myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    let stringName = '';
                    let SyntaxValue = '';
                    let splitName = (data[i].Name).split('@@');
                    for (let j = 0; j < splitName.length; j++) {
                        for (let k = 0; k < data2.length; k++) {
                            if (splitName[j].toLowerCase() == "["+ data2[k].Name +"]") {
                                stringName = stringName + splitName[j]
                                SyntaxValue = SyntaxValue + '<div class=" col mx-2 shadow-lg p-1 mb-4 bg-light rounded">'
                                    + '<div class="text-lg">' + splitName[j] + '</div>'
                                    + '<div class="text-lg">' + data2[k].Note + '</div>'
                                    + '</div>';
                            }
                        }
                    }
                    let tr =
                        '<div class="d-none">' + item.ID + '</div>'
                        + '<div class="col-12 text-uppercase text-dark fw-bold ms-0">' + item.Value + '</div>'
                        + '<div class="col-12  ps-3 py-3">'
                        + '<div class="col col-12 text-center fs-4  ms-3 px-4 bg-white rounded">'
                        + '<div class="row fw-bold d-flex justify-content-center fs-4 text-dark my-3">' + stringName + '</div>'
                        + '<div class="row p-0 d-flex text-dark">' + SyntaxValue + '</div>'
                        + '</div>'
                        + '</div>'
                        + '<hr class="horizontal dark mb-3 opacity-2">'
                    stringContent = stringContent + tr;
                }
            }

            document.getElementById(id).innerHTML = stringContent;
        }

    }
</script>

<script>js_require('/js/main.js');</script>
