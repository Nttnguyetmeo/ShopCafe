@page
@model MLunarCoffee.Pages.CustomerCare.CustomerCareModel
@{
    Layout = null;
}
@Html.AntiForgeryToken()

<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require('/js/main.js');</script>

<div class="row" id="CustCare_Div">
    <div class="col-12 p-0">
        <div class="card card-plain">
            <div class="vtcardheader card-header pb-0">
                <div class="left">
                    <ul class="nav nav-pills p-0 bg-transparent permissionlist" role="tablist">
                        <li class="nav-item me-3" role="presentation">
                            <a class="nav-link cursor-pointer active" data-bs-toggle="collapse" href="#CusCare_AreaFill">
                                <i class="text-gradient text-primary fas fa-filter"></i>
                            </a>
                        </li>
                        <li class="nav-item">
                            <h6 id="CustCareHeader" class="mb-0 mt-1">@Local["Chăm sóc - nhắc lịch hẹn"]</h6>
                            <p class="text-sm mb-0">@Local["Chi tiết chăm sóc nhắc lịch hẹn"]</p>
                        </li>
                    </ul>
                </div>
                <div class="right">
                    <div class="wrap">
                        <div class="wrapblock pb-2">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input type_show" type="radio" name="inlineRadioOptions" value="0" onchange="event.preventDefault();return CustCare_Filter(2);" checked="">
                                <label class="mb-0 form-check-label">@Local["Tất cả"]</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input type_show" type="radio" name="inlineRadioOptions" value="1" onchange="event.preventDefault();return CustCare_Filter(0);">
                                <label class="mb-0 form-check-label">@Local["Chưa xử lý"]</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input type_show" type="radio" name="inlineRadioOptions" value="2" onchange="event.preventDefault();return CustCare_Filter(1);">
                                <label class="mb-0 form-check-label">@Local["Đã xử lý"]</label>
                            </div>
                        </div>
                        <div class="wrapblock pb-2">
                            <div class="form-group mb-0">
                                <div class="input-group mb-0">
                                    <span class="input-group-text fw-bold text-primary">@Local["Tổng"]</span>
                                    <span class="ps-2 form-control fw-bolder text-dark ps-2" id="lbTotalCustCare">0</span>
                                </div>
                            </div>
                            <div class="position-relative d-inline">
                                <button class="btn btn-dark ms-0 mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                                    @Local["Xem thêm"]
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="toggle">
                    <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                        <ul class="card card-body text-dark text-capitalize opacity-10">
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogle form-check-input" data-name="documentcode" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Mã hồ sơ"]</p>
                            </li>
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogle form-check-input" data-name="branch" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Chi nhánh"]</p>
                            </li>
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogle form-check-input" data-name="CCStaff" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Nhân viên chăm sóc"]</p>
                            </li>
                            <li class="d-flex AppCreated">
                                <div class="form-check form-switch">
                                    <input class="shtoogle form-check-input" data-name="AppCreated" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Ngày tạo lịch hẹn"]</p>
                            </li>
                            <li class="d-flex">
                                <div class="btn-group _tab_control_ me-2" data-tab="export_excel">
                                    <button class="btn btn-dark btn-sm px-3 py-2 pe-none">
                                        <i class="ni vtt-icon  vttech-icon-export-ex text-white text-xs"></i>
                                    </button>
                                    <button class="btn btn-dark border-start border-light px-3  py-2 text-nowrap" onclick="event.preventDefault();return CustCare_ExportData(0);">@Local["Tất cả"]</button>
                                    <button class="btn btn-dark border-start border-light btn-sm px-3 py-2 text-nowrap" onclick="event.preventDefault();return CustCare_ExportData(1);">@Local["Tùy chọn"]</button>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card-body pt-0">
                <div class="vtcondition">
                    <div class="row collapsesticky z-index-sticky collapse" id="CusCare_AreaFill">
                        <div class="d-lg-flex">
                            <div class="w-100">
                                <div class="row px-2 form3">
                                    <div class="col-12 col-md-12 col-xl-4">
                                        <div class="row">
                                            <div class="col-12 ps-1 pe-0 mt-2">
                                                <div class="input-group">
                                                    <div class="input-group-text input-group-text px-2">
                                                        <i class="fas fa-search" aria-hidden="true"></i>
                                                        <div class="spinner-border spinner-border-sm d-none"></div>
                                                    </div>
                                                    <input id="CustCareSearchInput" type="text" class="form-control" placeholder="eg .@Local["Tìm kiếm khách hàng"]" autocomplete="off">
                                                    <div class="input-group-text"><i class="btn_clear fas fa-minus-circle opacity-1"></i></div>
                                                </div>
                                            </div>
                                            <div class="col-12 ps-1 pe-0 mt-2">
                                                <div class="input-group mb-0 flex-nowrap">
                                                    <div class="ui fluid search selection dropdown" id="CustCareTypeDate" style="width:30%;">
                                                        <input type="hidden" name="employee" />
                                                        <input class="search" autocomplete="off" tabindex="0" />
                                                        <div class="default text"></div>
                                                        <div id="CbbCustCareTypeDate" class="menu" tabindex="-1">
                                                        </div>
                                                    </div>
                                                    <input id="CustCareDate" class="form-control flatpickr" type="text" placeholder="eg .@Local["Ngày"]" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-12 col-md-12 col-xl-8">
                                        <div class="row">
                                            <div class="col-12 col-md-6 col-xl-3 ps-1 pe-0 mt-2">
                                                <div class="ui fluid search selection dropdown form-control" id="CustCareStaffID">
                                                    <input type="hidden" name="employee" />
                                                    <input class="search" autocomplete="off" tabindex="0" />
                                                    <div class="default text"></div>
                                                    <div id="cbbCustCareStaffID" class="menu" tabindex="-1">
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-md-6 col-xl-3 ps-1 pe-0 d-none mt-2" id="CustCareTypeScheduleControl">
                                                <div class="ui fluid search selection dropdown form-control" id="CustCareTypeScheduleID">
                                                    <input type="hidden" name="branch" />
                                                    <input class="search" autocomplete="off" tabindex="0" />
                                                    <div class="default text"></div>
                                                    <div id="cbbCustCareTypeSchedule" class="menu" tabindex="-1">
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-md-6 col-xl-3 ps-1 pe-0 mt-2">
                                                <div class="ui fluid search selection dropdown form-control" id="CusCareCCStaffID">
                                                    <input type="hidden" name="employee" />
                                                    <input class="search" autocomplete="off" tabindex="0" />
                                                    <div class="default text"></div>
                                                    <div id="CbbCusCareCCStaffID" class="menu" tabindex="-1">
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-md-6 col-xl-3 ps-1 pe-0 mt-2">
                                                <div class="ui fluid search selection dropdown form-control" id="CustCareBranchID">
                                                    <input type="hidden" name="branch" />
                                                    <input class="search" autocomplete="off" tabindex="0" />
                                                    <div class="default text"></div>
                                                    <div id="cbbCustomerCareBranch" class="menu" tabindex="-1">
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-12 col-md-6 col-xl-3 ps-1 pe-0 d-none mt-2" id="CustCareDivStatusCall">
                                                <div class="ui fluid search selection dropdown form-control" id="CustCareStatusCall">
                                                    <input type="hidden" />
                                                    <input class="search" autocomplete="off" tabindex="0" />
                                                    <div class="default text"></div>
                                                    <div id="CbbCustCareStatusCall" class="menu" tabindex="-1">
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-md-6 col-xl-3 ps-1 pe-0 mt-2">
                                                <div class="ui fluid search selection dropdown form-control" id="StatusID">
                                                    <input type="hidden" />
                                                    <input class="search" autocomplete="off" tabindex="0" />
                                                    <div class="default text"></div>
                                                    <div id="CbbStatusID" class="menu" tabindex="-1">
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-md-6 col-xl-3 ps-1 pe-0 mt-2">
                                                <div class="ui fluid search selection dropdown form-control" id="CustCareStatusID">
                                                    <input type="hidden" />
                                                    <input class="search" autocomplete="off" tabindex="0" />
                                                    <div class="default text"></div>
                                                    <div id="CbbCustCareStatusID" class="menu" tabindex="-1">
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-md-6 col-xl-3 ps-1 pe-0 mt-2">
                                                <button class="btn bg-gradient-primary m-0" onclick="event.preventDefault();return CustCare_LoadData();">@Local["OK"]</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <div class="m-0 mt-3 position-relative">
                    <div id="CustomerCare_waiting" class="waitingdiv text-center position-absolute top-0 start-50 translate-middle-x" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">@Local["Đang tải"]...</span>
                        </div>
                    </div>
                    <div class="m-0 my-0 mobile-responsive overflow-auto max-height-vh-90">
                        <table class="table vt-table mb-0" id="dtContentCustCare">
                            <thead>
                                <tr>
                                    <th style="width: 50px; min-width: 50px;">#</th>
                                    <th style="width: 250px; min-width: 250px;">@Local["Khách hàng"]</th>
                                    <th data-name="documentcode" style="max-width: 60px;">@Local["Mã hồ sơ"]</th>
                                    <th style="min-width: 230px; width: 230px; ">@Local["Thông tin"]</th>
                                    <th data-name="branch" style="width: 223px;">@Local["Chi nhánh"]</th>
                                    <th data-name="CCStaff">@Local["Nhân viên chăm sóc"]</th>
                                    <th class="AppCreated" data-name="AppCreated" style="width:200px;">@Local["Ngày tạo lịch hẹn"]</th>
                                    <th>@Local["Xử lý"]</th>
                                </tr>
                            </thead>
                            <tbody id="dtContentCustCareBody">
                            </tbody>
                        </table>
                    </div>
                    <button class="btn btn-secondary w-100 p-1 btnsysmore mt-2 mb-0" onclick="CustCare_LoadData(0, 1)">@Local["Xem thêm"]</button>
                </div>
            </div>
        </div>

    </div>
    <div id="divCustomerCare_CurrentNote" class="is_full card"></div>
</div>


<script>

    //#region // Declare && Initialization
    let sysUserID = @Model.sys_UserID;
    let sysPermissionTele = @Model.sys_Permission_Tele;
    var CustCareDataMain;
    var CustCareDataEmployee;
    var CustCareDataStatus, CustCareDataTypeCare = {}, CustCareDataTypeSche = {}, CustCareDataBranch = {};
    var CustCareShtable;
    var CustCareType = @Model.sys_CareTypeID;
    let CustCareLimit = 200;
    let CustCareBeginID = 0;
    var xhrRequestCustCare;
    let CustCareDataExport;
    let CustCareTypeExecuted = 2;
    let CustCareArrTypeCare = [], CusCareDataTele = [];
    let CustCareTypeDate = [
        {"ID" : 1 , "Name": "@Local["Ngày tạo"]"}
        , {"ID" : 2 , "Name": "@Local["Ngày xử lý"]"}
        , {"ID" : 3 , "Name": "@Local["Ngày gọi lại"]"}
    ];
    //#endregion

    //#region // Load Data
    $(document).ready(function () {
        CustCareShtable = $("#dtContentCustCare").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        switch (CustCareType) {
            case 1:
                $("#CustCareTypeScheduleControl").removeClass('d-none');
                $("#CustCareDivStatusCall").removeClass("d-none");
                $("#CustCareStaffID").parent().attr("id", "per_CustomerCare_StaffID");
                break;
            case 3:
                $("#CustCareDivStatusCall").removeClass("d-none");
                CustCareTypeDate[0] = {"ID" : 1, "Name" : "@Local["Ngày sinh nhật"]"}
                break;
            case 4:
                $("#CustCareDivStatusCall").removeClass("d-none");
                $("#CustCareTypeScheduleControl").removeClass('d-none');
                break;
            case 6:
                 $("#CustCareDivStatusCall").removeClass("d-none");
                break;
            case 10:
                $("#CustCareDivStatusCall").removeClass("d-none");
                break;
        }

        Master_IndexDB_Reads(_Session_Data, [_Session_Employee]
            , function (data) {
                CustCareDataEmployee = data[0];
                CustCare_Initialization();
            });
        CustCare_EventHandle();
        Checking_TabControl_Permission();
        CheckPermissionControlInPage(sys_PerControlMH, "/CustomerCare/CustomerCare");
    })
    $(document).mouseup(function (e) {
        let DivFillDate = $('#DivSearchDate');
        if (!DivFillDate.is(e.target ) && DivFillDate.has(e.target).length === 0){
            $('#DivSearchDate').collapse('hide');
        }
    })

    function CustCare_Initialization() {
        CustCare_SetValue();
        AjaxLoad(url = "/CustomerCare/CustomerCare/?handler=Initialization"
            , data = {
                "Type": CustCareType
            }
            , async = true
            , error = null
            , success = function (result) {
                if (result != '[]') {
                    let data = JSON.parse(result);
                    CustCareDataStatus = data.StatusData;
                    CustCareDataTypeCare = (data.TypeCare).reduce((pre, acc) => { pre[acc.ID] = acc; return pre; }, {});
                    CustCareDataBranch = (data.Branch).reduce((pre, acc) => { pre[acc.ID] = acc; return pre; }, {});
                    CustCareArrTypeCare = data.TypeCare
                    CusCareDataTele = data.Tele;

                    Load_Combo(data.Branch, "cbbCustomerCareBranch", true, '@Local["Chi nhánh"]');
                    Load_Combo(CusCareDataTele, "cbbCustCareStaffID", true, '@Local["Tele phụ trách"]');
                    Load_Combo(data.TypeSchedule, "cbbCustCareTypeSchedule", true, '@Local["Loại lịch hẹn"]');
                    Load_Combo(data.TeleCare, "CbbCusCareCCStaffID", true, '@Local["Nhân viên chăm sóc"]');
                    Load_Combo(data.StatusData, "CbbCustCareStatusCall", true, '@Local["Trạng thái gọi"]');
                    Load_Combo(CustCareTypeDate, "CbbCustCareTypeDate", true, '@Local["Ngày"]');

                    CustCareDataTypeSche = (data.TypeSchedule).reduce((pre, arr) => {
                        if (arr.ID) pre[arr.ID] = arr;
                        return pre;
                    }, {})

                    let _DtStatusDetail = CustCareArrTypeCare.filter(item => item["ParentID"] != 0);
                    let _DtStatus = CustCareArrTypeCare.filter(item => item["ParentID"] == 0);

                    if (_DtStatusDetail != undefined && _DtStatusDetail.length != 0) {
                        Load_Combo(_DtStatusDetail, "CbbCustCareStatusID", true, '@Local["Trạng thái chi tiết"]');
                        $("#CustCareStatusID").dropdown("refresh");
                        $("#CustCareStatusID").dropdown("set selected", "0");
                    }
                    if (_DtStatus != undefined && _DtStatus.length != 0) {
                        Load_Combo(_DtStatus, "CbbStatusID", true, '@Local["Trạng thái"]');
                        $("#StatusID").dropdown("refresh");
                        $("#StatusID").dropdown("set selected", "0");
                    }

                    $("#CusCareCCStaffID").dropdown("refresh");
                    $("#CusCareCCStaffID").dropdown("set selected", "0");
                    $("#CustCareStatusCall").dropdown("refresh");
                    $("#CustCareStatusCall").dropdown("set selected", "0");
                    $("#CustCareBranchID").dropdown("refresh");
                    $("#CustCareBranchID").dropdown("set selected", "0");
                    $("#CustCareStaffID").dropdown("refresh");
                    $("#CustCareStaffID").dropdown("set selected", (Number(sysPermissionTele) == 0 ? "0" : sysUserID));
                    $("#CustCareTypeScheduleID").dropdown("refresh");
                    $("#CustCareTypeScheduleID").dropdown("set selected", "0");
                    $("#CustCareTypeDate").dropdown("refresh");
                    $("#CustCareTypeDate").dropdown("set selected", "0");
                    CustCare_LoadData();

                }
            }
        );
    }
    async function CustCare_LoadData(currentID = 0, isLoadMore = 0) {
        return new Promise((resolve, reject) => {
            if (xhrRequestCustCare && xhrRequestCustCare.readyState != 4) xhrRequestCustCare.abort();
            if (currentID == 0 && isLoadMore == 0) {
                CustCareDataMain = [];
                CustCareBeginID = 0;
                $('#dtContentCustCareBody').html('');
                CustCareDataExport = [];
            }
            if (currentID != 0) CustCareBeginID = 0;

            let data = new Object();
            let branchid = $('#CustCareBranchID').dropdown('get value') ? $('#CustCareBranchID').dropdown('get value') : "0";
            let branchToken = branchid == 0 ? Object.values(CustCareDataBranch).map(e => e.ID).join(',') : '';
            let SearchText = $("#CustCareSearchInput").val() ? $("#CustCareSearchInput").val() : "";

            data.BranchID = branchid;
            data.BranchToken = branchToken;
            data.UseRuleTele = $('#CustCareStaffID').length;
            data.StaffID = Number($('#CustCareStaffID').dropdown('get value')) ? Number($('#CustCareStaffID').dropdown('get value')) : "0";
            data.StaffString =  CustCare_GetString(data.StaffID, CusCareDataTele);
            data.TypeScheduleID = Number($('#CustCareTypeScheduleID').dropdown('get value') ? $('#CustCareTypeScheduleID').dropdown('get value') : "0") ;
            data.StatusCalled = $("#CustCareStatusCall").dropdown('get value') ? Number($("#CustCareStatusCall").dropdown('get value')) : "0";
            data.CCStaffID = $("#CusCareCCStaffID").dropdown('get value') ? $("#CusCareCCStaffID").dropdown('get value') : "0";
            data.TypeData = $("#CustCareTypeDate").dropdown('get value') ? $("#CustCareTypeDate").dropdown('get value') : "0";
            data.SearchText = xoa_dau(SearchText).toLowerCase().trim().replace(/[^a-zA-Z0-9 ]/g, '');
            data.statusCallID = $("#CustCareStatusID").dropdown("get value") ? $("#CustCareStatusID").dropdown("get value") : 0;
            data.statusID = $("#StatusID").dropdown("get value") ? $("#StatusID").dropdown("get value") : 0;

            let date = $("#CustCareDate").val() ? $("#CustCareDate").val() : new Date();
            let dateFrom;
            let dateTo;

            if (date.includes(" to ")) {
                date = date.replace(" to ", "#");
                dateFrom = date.split('#')[0];
                dateTo = date.split('#')[1];
            }
            else {
                dateFrom = date;
                dateTo = date;
            }

            xhrRequestCustCare = AjaxLoad(url = "/CustomerCare/CustomerCare/?handler=LoadData"
                , data = {
                    'data': JSON.stringify(data)
                    , 'DateFrom': dateFrom
                    , 'DateTo': dateTo
                    , 'CurrentID': currentID
                    , 'BeginID': CustCareBeginID
                    , 'Limit': CustCareLimit
                    , 'Type': CustCareType
                }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result) {
                    let data = JSON.parse(result);
                    if (data != undefined) {
                        if (data.length != 0) {
                            let stringContent = '';
                            if (currentID == 0) {
                                fnRenderBlock(data, "dtContentCustCareBody"
                                    , blocknum = 30
                                    , fnrender = CustCare_RenderData
                                    , fnsuccess = null
                                );
                                CustCareDataMain = CustCareDataMain.concat(data);
                                CustCareDataExport = CustCareDataMain;
                            }
                            else {
                                let _id = $('#CustCareRow_' + currentID);
                                if (_id != undefined && _id.length != 0) {
                                    stringContent = CustCare_RenderEach(data[0]);
                                    _id.replaceWith(stringContent);
                                }
                                if (data[0].ID != undefined) {
                                    let NewID = CustCare_IDByType(data[0]);
                                    for (let i = 0; i < CustCareDataMain.length; i++) {
                                        let OldID = CustCare_IDByType(CustCareDataMain[i]);
                                        if (NewID == OldID) {
                                            CustCareDataMain[i] = data[0];
                                            i = CustCareDataMain.length - 1
                                        }
                                    }
                                }
                                CustCare_Filter();
                                Checking_TabControl_Permission();
                            }
                        }
                        else {
                            if (currentID != 0) {
                                let _id = 'CustCareRow_' + currentID;
                                $("#" + _id).remove();
                                CustCareDataMain = CustCareDataMain.filter(item => { return item.ID != currentID });
                                CustCare_Filter();
                            }
                        }
                        CustCare_SetBeginID(CustCareDataMain, CustCareType);
                        $("#lbTotalCustCare").html(formatNumber($(".buttonSerCareAction:visible").length));
                        CustCareShtable.Refresh();
                        ToolPopper();
                    }
                }
                , sender = null
                , before = function (e) {
                    $('#CustomerCare_waiting').show();
                }
                , complete = function (e) {
                    $('#CustomerCare_waiting').hide();
                }
            );

        });
    }
    function CustCare_SetBeginID(data, type = 0) {
        if (data && data.length != 0) {
            switch (type) {
                case 1:
                case 4:
                case 10: CustCareBeginID = data[data.length - 1].AppID;
                    break;
                case 3:
                    CustCareBeginID = data[data.length - 1].CustID;
                    break;
                case 6:
                    CustCareBeginID = data[data.length - 1].ID;
                    break;
                default:
                    CustCareBeginID = 0;
                    break;
            }
        }else{
            CustCareBeginID = 0;
        }

    }
    //#endregion
    //#region // Event
    function CustCare_Filter(type) {
        if (type != undefined) { CustCareTypeExecuted = type }
        else { type = CustCareTypeExecuted }

        switch (type) {
            case 1:
                $("#dtContentCustCareBody .buttonSerCareAction.nonexecuted").addClass('d-none');
                $("#dtContentCustCareBody .buttonSerCareAction.executed").removeClass('d-none');
                CustCareDataExport = CustCareDataMain.filter((item) => {return (item["IsTakeCare"] == 1)});
                break;
            case 2:
                $("#dtContentCustCareBody .buttonSerCareAction.nonexecuted").removeClass('d-none');
                $("#dtContentCustCareBody .buttonSerCareAction.executed").removeClass('d-none');
                CustCareDataExport = CustCareDataMain;
                break;
            case 0:
                $("#dtContentCustCareBody .buttonSerCareAction.nonexecuted").removeClass('d-none');
                $("#dtContentCustCareBody .buttonSerCareAction.executed").addClass('d-none');
                CustCareDataExport = CustCareDataMain.filter((item) => {return (item["IsTakeCare"] == 0)});
                break;
            default: break;
        }
        $("#lbTotalCustCare").html(formatNumber($(".buttonSerCareAction:visible").length));
    }
    function CustCare_SetValue() {

        let textHeader = "";
        let dateFromDefault = new Date(), dateToDefault = new Date();
        switch (CustCareType) {
            case 1:
                textHeader = "@Local["Nhắc lịch khách hàng"]";
                break;
            case 3:
                textHeader = "@Local["Sinh nhật khách hàng"]";
                dateToDefault.setDate(dateFromDefault.getDate() + 7);
                break;
            case 4:
                textHeader = "@Local["Đặt lịch nhưng không đến"]";
                dateFromDefault.setDate(dateFromDefault.getDate() - 7);
                dateToDefault.setDate(dateToDefault.getDate() - 1);
                break;
            case 6:
                textHeader = "@Local["Complaint khách hàng"]";
                break;
            case 10:
                textHeader = "@Local["Chăm sóc hủy lịch hẹn"]";
                break;
        }
        $("#CustCareHeader").html(textHeader);
        $("#CustCareDate").flatpickr({
            mode: "range",
            dateFormat: 'd-m-Y',
            defaultDate: [GetDateTime_String_DMY(dateFromDefault), GetDateTime_String_DMY(dateToDefault)],
            enableTime: false,
            onClose: function (selectedDates, dateStr, instance) {
                if (selectedDates.length == 1) {
                    instance.setDate([selectedDates[0], selectedDates[0]], true);
                }
                if (selectedDates.length != 1) {
                    var diffDays = Math.abs(selectedDates[1] - selectedDates[0]) / (1000 * 60 * 60 * 24);
                    if (diffDays > 31) {
                        instance.setDate([selectedDates[0], selectedDates[0]], true);
                    }
                }
            }
        });
        $("#CustCareDate").val(formatDateClient(dateFromDefault) + ' to ' + formatDateClient(dateToDefault));
    }
    function CustCare_EventHandle() {
        $(document).on("click", function (e) {
            let App_note = $("#divCustomerCare_CurrentNote");
            let Btn_add_note = $(".buttonAddNoteClass");
            if ((!$(App_note).is(e.target) && $(App_note).has(e.target).length === 0)
                && (!$(Btn_add_note).is(e.target) && $(Btn_add_note).has(e.target).length === 0)) {
                App_note.empty();
                App_note.hide();
            }
        })

        $('#dtContentCustCare').on('click', '.CustCareQuick', function () {
            let AppID = $(this).attr("data-appid");
            let TreatID = $(this).attr("data-treatid");
            let TreatDate = $(this).attr("data-treatdate");
            let CustomerID = Number($(this).attr("data-custid"));
            let MasterID = Number($(this).attr("data-masterid"));
            CustCare_QuickAction(AppID, CustomerID, MasterID, TreatID, TreatDate);
        });

        $('#dtContentCustCare').on('click', '.CustCarePhone', function () {
            let phone = $(this).attr("data-info");
            let cus = $(this).attr("data-custid");
            CustCare_Calling(phone, cus);
        });

        $('#dtContentCustCare').on('click', '.buttonSendSMSClass', function () {
            let CustomerID = Number($(this).attr("data-custid"));
            let AppID = Number($(this).attr("data-appid")) ? Number($(this).attr("data-appid")) : 0;
            CustCare_SendSMS(CustomerID, AppID, CustCareType);
        })

        $('#dtContentCustCare').on('click', '.buttonAddNoteClass', function () {
            let CurrentID = Number($(this).attr("data-id"));
            let AppID = $(this).attr("data-appid");
            let CustomerID = Number($(this).attr("data-custid"));
            let TreatmentDate = $(this).attr("data-treatdate");
            let TreatmentID = $(this).attr("data-treatid");
            let IsDone = 1;
            let Title = '';
            let Typeinput = 89;
            let StatusCallID = 0;
            let StatusCallDetail = 0;
            $("#divCustomerCare_CurrentNote").show();
            $("#divCustomerCare_CurrentNote").empty();
            let pos_top = $("#Mainpusher").scrollTop();
            $("#divCustomerCare_CurrentNote").load("/CustomerCare/CustomerCare_QuickNote?MasterID=" + CurrentID
                + (AppID != undefined ? "&AppID=" + AppID : "")
                + (TreatmentID != undefined ? "&TreatmentID=" + TreatmentID : "")
                + (TreatmentDate != undefined ? "&TreatmentDate=" + TreatmentDate : "")
                + "&CustomerID=" + CustomerID
                + "&IsDone=" + IsDone
                + "&Type=" + CustCareType
                + "&Title=" + Title
                + "&Typeinput=" + Typeinput
                + "&StatusCallID=" + StatusCallID
                + "&StatusCallDetail=" + StatusCallDetail
                + "&ver=" + versionofWebApplication, function () {
                    $("#divCustomerCare_CurrentNote").css({
                        "top": pos_top,
                    });
                })
        });


    }
    function CustCare_QuickAction(AppID, custid, MasterID, TreatID, TreatDate) {

        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Marketing/CallDetailInput?MasterID=" + MasterID
            + "&CustomerID=" + custid
            + "&Type=" + CustCareType
            + ((AppID != undefined) ? "&AppID=" + AppID : "")
            + ((TreatID != undefined) ? "&TreatID=" + TreatID : "")
            + ((TreatDate != undefined) ? "&TreatmentDate=" + TreatDate : "")
            + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    function CustCare_SendSMS(custid, appid, type, typesms = 'SMSContentGeneral') {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/SMS/SmsDetail?CustomerID=" + custid + "&TicketID=" + 0 + "&Type=" + typesms + "&TypeCare=" + type + "&AppID=" + appid + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }
    function CustCare_Calling(phone, customer) {
        if (typeof CCF_OutcomCall !== 'undefined' && $.isFunction(CCF_OutcomCall)) {
            CCF_OutcomCall(phone, customer, 0, 0);
        }

    }

    async function CustCare_ExportData(isOption = 0) {
        let header = $("#CustCareHeader").text() ? xoa_dau($("#CustCareHeader").text()) : "@Local["Chăm sóc khách hàng"]";
        header.charAt(0).toUpperCase() + header.slice(1).toLowerCase().replaceAll(' ', '-');
        let dataRoot = CustCareDataExport;
        let eleContainer = $('#CustCare_Div');
        let isAll = (isOption == 0);
        let dataExport = {
            "STT": ["@Local["STT"]", (value, { }, idx) => { return idx + 1 }]
            , "CustCode": "@Local["Mã khách hàng"]"
            , "CustName": "@Local["Tên"]"
            , "DocumentCode": {
                isShow: isAll || (eleContainer.find(`.shtoogle[data-name='documentcode']`)).is(":checked")
                , data: ["@Local["Mã hồ sơ"]"]
            }
            , "Phone": {
                dataNamePer: "Phone"
                , data: ["@Local["Điện thoại"]"]
            }

            , "DateFrom": [(CustCare_RenderInfoExcel(CustCareType, 1) != '' ? CustCare_RenderInfoExcel(CustCareType, 1) : "@Local["Ngày hẹn"]"), (v, { DateFrom, AppContent, Birthday, GenderName, Reason, ReasonContent }) => { return CustCare_RenderInfoExcel(CustCareType, 3, DateFrom, AppContent, Birthday, GenderName, Reason, ReasonContent) }]
            , "AppContent": ["@Local["Nội dung"]", (v, { DateFrom, AppContent, Birthday, GenderName, Reason, ReasonContent }) => { return CustCare_RenderInfoExcel(CustCareType, 2, DateFrom, AppContent, Birthday, GenderName, Reason, ReasonContent) }]

            , "BranchID": {
                isShow: isAll || (eleContainer.find(`.shtoogle[data-name='branch']`)).is(":checked"),
                data: ["@Local["Chi nhánh"]", (v) => { return CustCare_RenderBranch(v) != undefined ? CustCare_RenderBranch(v) : '' }]
            }
            , "CCStaffID": {
                isShow: isAll || (eleContainer.find(`.shtoogle[data-name='CCStaff']`)).is(":checked"),
                data: ["@Local["Nhân viên chăm sóc"]", (v) => { return typeof(CustCareDataEmployee[v]) != "undefined" ? CustCareDataEmployee[v].Name : '' }]
            }
            , "CustCareDataStatus": ["@Local["Tình trạng"]", (v, { CallID, StatusCallID }) => { return CustCare_RenderStatusExcel(CallID, StatusCallID) }]
            , "ContentLast": ["@Local["Nội dung"]", (v, { ContentLast, Content }) => { return (ContentLast != '' ? ContentLast : Content) }]
            , "AppCreated": {
                isShow: isAll || (eleContainer.find(`.shtoogle[data-name='AppCreated']`)).is(":checked"),
                data: ["@Local["Ngày tạo lịch hẹn"]", (v) => { return ConvertDateTimeUTC_DMYHM(v) }]
            }
            , "EmpExecute": ["@Local["Người xử lý"]", (v, { EmpExecute, DateExecute }) => { return CustCare_RenderEmpExcel(EmpExecute, DateExecute) }]
        };
        let _e = ["@Local["Loại lịch"]", (v) => { return (Outlang[CustCareDataTypeSche[v]?.NameLangKey] ?? CustCareDataTypeSche[v]?.Name) }];
        if (CustCareType == 1 || CustCareType == 4) dataExport['ScheduleTypeID'] = _e;
        if (CustCareType == 3) delete dataExport['AppCreated'];
        dataExport = Checking_TabControl_System_RebuildHeader(dataExport, tableBodyId = 'dtContentCustCareBody', PermissionTable_TabControl);
        await exportJsonToExcel(header, dataRoot, dataExport);
        return false;
    }
    function CustCare_GetString(id, data){
        try {
            let result = ``;
            if (id == "0" && data && data.length > 0) {
                for (let i = 0; i < data.length; i++){
                    result += data[i].ID + ',';
                }
            }
            return result;
        } catch (err){
            return '';
        }
    }
    //#endregion

    //#region // Render Data
    async function CustCare_RenderData(data, id) {
        new Promise((resolve, reject) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = CustCare_RenderEach(item);
                            myNode.insertAdjacentHTML("beforeend", tr);
                        }
                    }
                }
                if (CustCareType == 3) $(".AppCreated").remove();
                CustCareShtable.Refresh();
                CustCare_Filter();
                Checking_TabControl_Permission();
                ToolPopper();
                resolve();
            }, 10)
        });
    }
    function CustCare_RenderEach(item) {
        let cust = `
                <div class="d-lg-flex">
                    <a target="_blank" class="d-block cursor-pointer text-wrap" href="/Customer/MainCustomer?CustomerID=${item.CustID}&ver=${versionofWebApplication}">${item.CustCode}</a>
                    <a target="_blank" class="d-block cursor-pointer text-wrap" href="/Customer/MainCustomer?CustomerID=${item.CustID}&ver=${versionofWebApplication}">${item.Cust_Code_Old != '' ? `[${item.Cust_Code_Old}]` : ''}</a>
                </div>
                ${item.CustName}
            `
        let phone = `
                <i class="fas fa-phone text-sm ms-1 me-1 text-gradient text-info"></i>
                <a href="#" data-custid="${item.CustID}" data-info="${encrypt_phone(item.Phone)}" class="cursor-pointer border-1 border-primary border-bottom CustCarePhone">
                    <span data-name="Phone" class="_tab_control_" data-tab="phone_customer">${item.Phone}</span>
                </a>
            `
        let status = (item.StatusCallID != 0) ? `<span class="text-primary">${CustCare_RenderStatus(item.StatusCallID)}</span>` : ``
        let callback = CustCare_RenderStatusCall(item.CallID, item.TimeRepeatCall, item.CustID, item.ID, item.AppID != undefined ? item.AppID : 0, item.TreatID, item.TreatDate);
        status = callback + status;
        let userexcuted = '';
        if (item.EmpExecute != 0) {
            userexcuted = '<div class="fst-italic mb-0">'
                + CustCare_RenderEmp(item.EmpExecute, CustCareDataEmployee, item.DateExecute)
                + '</div>';
        }
        let info = CustCare_RenderInfo(CustCareType, item.DateFrom, item.AppContent
            , item.Birthday, item.GenderName, item.Reason, item.ReasonContent, item.TreatDate, item.ServiceName, item.TreatContent, item.ScheduleTypeID)

        let contentExecute = `
                <p class="mb-0 text-sm mt-1 content_line_clamp" style="">${(item.ContentLast != "" ? item.ContentLast : item.Content)}

                </p>
                <div class="icon-collapse cursor-pointer text-primary buttonAddNoteClass" style="--bottom:32px;"
                        data-id="${item.ID}"
                        ${item.AppID != undefined ? `data-appid="${item.AppID}" ` : ''}
                        ${item.CustID != undefined ? `data-custid="${item.CustID}" ` : ''}
                        ${item.TreatID != undefined ? `data-treatid="${item.TreatID}" ` : ''}
                        ${item.TreatDate != undefined ? `data-treatdate="${item.TreatDate}" ` : ''}>
                    <i class="fas text-lg fa-poll-h mx-2 text-sm" ></i>
                    <span class="icon-collapse-text text-xs">@Local["Xử lý nhanh"]</span>
                </div>
                <div class="icon-collapse cursor-pointer text-primary buttonSendSMSClass"
                    ${item.AppID != undefined ? `data-appid="${item.AppID}" ` : ''}
                    ${item.CustID != undefined ? `data-custid="${item.CustID}" ` : ''}>
                    <i class="fas fa-sms mx-2 text-sm"></i>
                    <span class="icon-collapse-text text-xs">Send SMS</span>
                </div>
                ${userexcuted}
            `
        let detail = `${status + contentExecute}`
        let rowid = CustCare_RenderID(item);
        let isexecute = Number(item.IsTakeCare) == 1 ? 'border-primary executed' : 'nonexecuted';
        let tr = `
                <tr id="${rowid}" class="row-add buttonSerCareAction vt-number ${isexecute} border-5 border-bottom-0 border-top-0 border-end-0 border-3 " data-id="${item.ID}" data-custid="${item.CustID}"
                    data-appid="${item.AppID != undefined ? `${item.AppID}` : `0`}"
                    data-treatid="${item.TreatID != undefined ? `${item.TreatID}` : `0`}" >
                    <td class="vt-number-order full"></td>
                    <td>${cust}</td>
                            <td data-name="documentcode" style="width:230px;">${item.DocumentCode}</td>
                    <td ">
                        ${phone}${info}
                    </td>
                    <td data-name="branch">${CustCare_RenderBranch(item.BranchID)}</td>
                    <td data-name="CCStaff">${typeof(CustCareDataEmployee[item.CCStaffID]) != "undefined" ? CustCareDataEmployee[item.CCStaffID].Name : ""}</td>
                    <td data-name="AppCreated" class="AppCreated">${ConvertDateTimeUTC_DMYHM(item.AppCreated)}</td>
                    <td class="position-relative">${detail}</td>

                </tr>
            `
        return tr;
    }
    function CustCare_RenderInfo(type, DateFrom, AppContent, Birthday, GenderName, Reason, ReasonContent, TreatDate, ServiceName, TreatContent, TypeScheduleID) {
        let result = '';
        let appcontent = '', cancelcontent = '', treatcontent = '', content = '';
        let TypeSchedule = TypeScheduleID != undefined ? `<span class="text-secondary text-sm">${(Outlang[CustCareDataTypeSche[TypeScheduleID]?.NameLangKey] ?? CustCareDataTypeSche[TypeScheduleID]?.Name)}` : '';
        switch (type) {
            case 4:
            case 2:
            case 1:
                appcontent = (AppContent != '') ? `<span class="text-dark fst-italic text-lowercase ms-1 pt-2 text-sm content_line_clamp" style="white-space: pre-line;">${Remove_Char_Tiny_Useless(AppContent)}</span>` : '';
                result = `<div>
                                                      <i class="text-sm ms-1 me-1 text-gradient text-info fas fa-calendar-check"></i>
                                                            ${ConvertDateTimeUTC_DMYHM(DateFrom)} ${TypeSchedule}</span>
                                                      </div>
                                                       ${appcontent}
                                                      `;

                break;
            case 10:
                appcontent = (AppContent != '') ? `<span class="text-dark fst-italic text-lowercase ms-1 pt-2 text-sm content_line_clamp" style="white-space: pre-line;">${Remove_Char_Tiny_Useless(AppContent)}</span>` : '';
                cancelcontent = (Reason != '') ? `<span class="text-dark fst-italic text-lowercase ms-1  d-block text-sm">${Reason + ' .' + ReasonContent}</span>` : '';
                result = `<div>
                                                      <i class="text-sm ms-1 me-1 text-gradient text-info fas fa-calendar-check"></i>
                                                        ${ConvertDateTimeUTC_DMYHM(DateFrom)}
                                                      </div>
                                                       ${appcontent}
                                                       ${cancelcontent}
                                                      `;

                break;
            case 3:
                result = `<div><i class="text-sm ms-1 me-1 text-gradient text-info fas fa-birthday-cake"></i>
                                                                ${ConvertDateTimeUTC_DMY(Birthday)} - ${GenderName}
                                                           </div>`;
                break;
            case 5:
                treatcontent = (ServiceName != '') ? `<span class="text-dark fst-italic text-lowercase ms-1 pt-2 text-sm content_line_clamp" style="white-space: pre-line;">${ServiceName + '.' + TreatContent}</span>` : '';
                result = `${treatcontent}
                            <div>
                                <span class="text-secondary">@Local["Ngày điều trị"]:</span>
                                ${ConvertDateTimeUTC_DMY(TreatDate)}
                            </div>
                            `;

                break;

            default: break;
        }
        return result;
    }
    function CustCare_IDByType(item){
        let result = '';
        switch (CustCareType){
            case 1:
            case 4:
            case 10:
                result = item.AppID
                break;
            case 3:
                result = item.CustID
                break;
            case 6:
                result = item.ID
                break;
            default:
                break;
        }
        return result;
    }
    function CustCare_RenderID(item) {
        let result = '';
        switch (CustCareType) {
            case 1:
            case 4:
            case 10:
                result = 'CustCareRow_' + item.AppID
                break;
            case 3:
                result = 'CustCareRow_' + item.CustID
                break;
            case 6:
                result = 'CustCareRow_' + item.ID
                break;
            default:
                break;
        }
        return result;
    }
    function CustCare_RenderEmp(id, data, date) {
        let result = '';
        if (id != 0) {
            let obj = Fun_GetObject_ByID(data, id);
            let name = (obj != null) ? obj.Name : '';
            date = (date != undefined) ? `<span class="text-sm text-secondary ms-2">${GetDateTime_String_DMYHM(date)}</span>` : '';
            result = `
                                                                          <span class="text-dark text-sm mb-0">${name}</span>
                                                                          ${date}
                                                                    `
        }
        return result;
    }
    function CustCare_RenderStatus(callID) {
        let result = ``;
        if (callID && callID != 0) {
            let item = CustCareDataTypeCare[callID];
            if (item != undefined) {
                let child = item.Name != undefined ? item.Name : '';
                let parent = item.ParentID != undefined && CustCareDataTypeCare[item.ParentID] ? CustCareDataTypeCare[item.ParentID].Name : "";
                result = `${parent} - ${child}`;
            }
        }

        return result;
    }
    function CustCare_RenderStatusCall(callbackid, _time, _custid, _id, _appid, _treatid, _treatdate) {
        let result = '';
        _id = _id != undefined ? _id : 0;
        _treatid = _treatid != undefined ? _treatid : 0;
        _appid = _appid != undefined ? _appid : 0;
        _treatdate = _treatdate != undefined ? _treatdate : '';
        if (Number(callbackid) != 0) {
            let dataFilter = CustCareDataStatus.filter((word) => { return word.ID == callbackid });
            let _name = dataFilter.length != 0 ? dataFilter[0].Name : "";
            let timecallback = Number(callbackid) == 88 ? ConvertDateTimeUTC_DMYHM(_time) : '';
            result = `<a data-custid="${_custid}" data-masterid="${_id}" data-appid="${_appid}" data-treatid="${_treatid}" data-treatdate="${_treatdate}" class="CustCareQuick text-primary border-bottom border-primary me-2" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="${timecallback}">${_name}</a>`
        }
        else {
            result = `<a data-custid="${_custid}" data-masterid="${_id}" data-appid="${_appid}" data-treatid="${_treatid}" data-treatdate="${_treatdate}" class="CustCareQuick fw-bold text-primary border-bottom border-primary me-2" >@Local["Xử lý"]</a>`;
        }
        return result;
    }
    function CustCare_RenderBranch(id) {
        try {
            let result = '';
            if (CustCareDataBranch && CustCareDataBranch[id] != undefined) {
                result = CustCareDataBranch[id].Name;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    function CustCare_RenderContent(Type, ServiceName, TreatContent, AppContent) {
        try {
            let result = '';
            switch (Type) {
                case 1:
                    result = AppContent;
                    break;
                case 10:
                    result = AppContent;
                    break;
                default:
                    result = '';
            }
            return result;
        } catch (ex) {
            return '';
        }
    }
    //#endregion


    //#region // Execel
    function CustCare_RenderInfoExcel(CustCareType, type, DateFrom = '', AppContent = '', Birthday = '', GenderName = '', Reason = '', ReasonContent = '') {
        try {
            let result = ``;
            switch (CustCareType) {
                case 4:
                case 1:
                    if (type == 1) {
                        result = "@Local["Ngày hẹn"]"
                    } else if (type == 2) {
                        result = AppContent;
                    } else {
                        result = ConvertDateTimeUTC_DMYHM(DateFrom);
                    }
                    break;
                case 3:
                    if (type == 1) {
                        result = "@Local["Ngày sinh nhật"]"
                    } else if (type == 2) {
                        result = '';
                    } else {
                        result = ConvertDateTimeUTC_DMY(Birthday) + '-' + GenderName;
                    }
                    break;
                case 10:
                    if (type == 1) {
                        result = "@Local["Ngày hẹn"]"
                    } else if (type == 2) {
                        result = AppContent + (Reason != '' ? `${Reason} .${ReasonContent}` : '');
                    } else {
                        result = ConvertDateTimeUTC_DMYHM(DateFrom);
                    }
                    break;
                default:
                    result = '';
            }
            return result;
        } catch (ex) {
            return '';
        }
    }

    function CustCare_RenderStatusExcel(CallID, StatusCallID) {
        try {
            let result = '';
            let TimeCallBack = CustCareDataStatus.filter((word) => { return word.ID == CallID });
            let NameCallBack = TimeCallBack.length > 0 ? TimeCallBack[0].Name : "";

            let ChildTypeCare = CustCareDataTypeCare[StatusCallID];
            let NameChild = ChildTypeCare.Name != undefined ? ChildTypeCare.Name : '';
            let NameParent = (ChildTypeCare.ParentID != undefined && CustCareDataTypeCare[ChildTypeCare.ParentID] != undefined) ? CustCareDataTypeCare[ChildTypeCare.ParentID].Name : '';

            result = NameCallBack + ': ' + NameChild + ' - ' + NameParent;

            return result;
        } catch (ex) {
            return '';
        }
    }
    function CustCare_RenderEmpExcel(EmpExecute, DateExecute) {
        try {
            let result = ``;
            if (EmpExecute != 0) {
                let obj = Fun_GetObject_ByID(CustCareDataEmployee, EmpExecute);
                let NameExecuted = (obj != null) ? obj.Name : '';
                let DateExecuted = (DateExecute != undefined) ? GetDateTime_String_DMYHM(DateExecute) : '';
                result = NameExecuted + ' - ' + DateExecuted;
            }
            return result;
        } catch (ex) {
            return '';
        }
    }

        //#endregion

</script>

<style>
    #divCustomerCare_CurrentNote {
        padding-bottom: 0;
        transition: 0.2s ease-in-out;
        width: 350px;
        overflow: hidden;
        bottom: 86px;
        z-index: 11111;
        height: 250px;
        display: none;
        right: 0;
        top: 0;
        position: fixed !important;
    }

    #sectionTableLeft.collapse_table table tr.selected {
        background: rgb(190, 227, 255) !important;
    }

    .vt-table tr td {
        border-left: 1px solid var(--color--table--border) !important;
        white-space: normal !important;
    }

    .icon-collapse {
        --bottom: 3px;
        position: absolute;
        bottom: var(--bottom);
        right: 150px;
        padding: 2px 3px;
        background-color: #eaedf1;
        border-radius: 5px;
        opacity: 0;
        transition: all 0.3s ease-in-out;
        transition-delay: 0.1s;
    }

    .icon-collapse-text {
        width: 0;
        opacity: 0;
        transition: width 0.2s ease-in-out;
        transition-delay: 0.2s;
        display: inline-block;
        white-space: nowrap;
    }

    .icon-collapse:hover {
        color: white !important;
        background-color: rgb(var(--bs-primary)) !important;
    }

    .vt-table tr:hover .icon-collapse {
        right: 10px;
        opacity: 1;
    }

    .vt-table tr:hover .icon-collapse-text {
        width: 80px;
        opacity: 1;
    }
</style>
