@page
@model MLunarCoffee.Pages.Login.LoginModel
@{
    Layout = "~/Pages/Shared/_Layout_Login.cshtml";
    ViewData["Title"] = "Vttech Solution";
}
<!DOCTYPE html>
<html lang="en">

<head>
    <title>Vttech Solution</title>
    <script>
        const session_base = "BaseData";
        const session_setting = "BaseSetting";
        const indexedDBVer = 9; //Version is number table
    </script>
    <link rel="icon" type="image/x-icon" href="/assests/img/logo/favicon.ico">
    <meta charset="UTF-8">
    <script src="/assests/js/RSVP/rsvp.min.js" type="text/javascript"></script>
    <script src="/assests/library/jquery-2.1.4.min.js" type="text/javascript"></script>
    <script src="/js/Preload/basket.min.js" type="text/javascript"></script>
    <script src="/assests/js/ajax.min.js"></script>
    <script src="/js/comon.js"></script>
    <script src="/js/Preload/preload.js?ver=@ViewData["TIME"]" type="text/javascript"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet" />
    <link href="/assets/css/nucleo-icons.css" rel="stylesheet" />
    <link href="/assets/css/nucleo-svg.css" rel="stylesheet" />
    <link rel="stylesheet" href="/assests/dist/FontAwesome/css/all.min.css">
    <link href="/assets/css/nucleo-svg.css" rel="stylesheet" />
    <link href="/assests/dist/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link id="pagestyle" href="/assets/css/soft-ui-dashboard.css?v=1.0.4" rel="stylesheet" />
    <script src='https://www.gstatic.com/firebasejs/6.4.2/firebase-app.js' type="text/javascript"></script>
    <script src='https://www.gstatic.com/firebasejs/6.4.2/firebase-messaging.js' type="text/javascript"></script>
    <script src="/js/MasterSettingLocal.js?ver=@ViewData["TIME"]" type="text/javascript"></script>
    <script src='/js/log.js' type="text/javascript"></script>
    <script src="/assests/sweetalert2.js"></script>
    <script src="/assests/js/detect-mobile.js"></script>
    <style>
        .sercu {
            -webkit-text-security: disc;
        }

        #Loginuser::first-letter {
            text-transform: uppercase !important;
        }

        #loader {
            position: absolute;
            left: 15px;
            width: 30px;
            top: 6px;
            height: 30px;
            display: none;
        }

        #loaderver {
            width: 30px;
            height: 30px;
        }

        #loginbtn:hover {
            box-shadow: rgb(50 50 93 / 25%) 0px 50px 100px -20px, rgb(0 0 0 / 30%) 0px 30px 60px -30px, rgb(10 37 64 / 35%) 0px -2px 6px 0px inset;
        }

        input.active {
            background-image: linear-gradient( 310deg, #7928ca12 0%, #ff008021 100%);
        }

        input.disabled {
            background-image: linear-gradient( 310deg, #e9ecef 0%, #ffffff 100%);
            pointer-events: none;
            cursor: none;
        }

        button.disabed {
            pointer-events: none;
        }

        button.hold {
            opacity: 0.6;
            pointer-events: none;
            cursor: none;
        }

        .fosize {
            font-size: 14px;
            letter-spacing: 1px;
            font-weight: 600;
        }

        #LoginsrcAvatar {
            height: 75px;
            width: 75px !important;
            border-radius: 46px !important;
            background: #d6d6d6;
            border: 1px solid #c4c4c4;
            align-items: center;
            justify-content: center;
            display: flex;
            text-transform: uppercase;
            color: #16267f;
            font-size: 27px;
            font-weight: 600;
        }
    </style>
</head>

<body id="BodyMain" style="display:none;">
    @Html.AntiForgeryToken()

    <main class="main-content main-content-bg mt-0">
        <section>
            <div class="page-header min-vh-75">
                <div class="container">
                    <div class="row">
                        <div class="col-xl-6 col-lg-7 col-md-7 d-flex flex-column mx-auto">
                            <div class="card card-plain mt-0" style=" max-width: 450px;">
                                <div class="card-header pb-0 text-center">
                                    <div class="avatar avatar-xl position-relative me-2">
                                        <img id="Loginsrc" src="/default.png" alt="profile_image" style="border-radius: 46px !important;" class="w-100 border-radius-lg shadow-sm d-none">
                                        <div id="LoginsrcAvatar" class="w-100 border-radius-lg shadow-sm d-none"></div>
                                    </div>
                                    <div class="h-100">
                                        <h5 class="mt-3 fs-4 fw-bold">Hello<span id="Loginuser" class="mx-2 d-inline-block"></span></h5>
                                        <p id="Loginhint" class="mb-0 text-sm text-dark d-none">Enter your username and password to login</p>

                                    </div>
                                </div>
                                <div class="card-body">
                                    <form role="form" class="text-start">
                                        <div id="Loginarea" class="">
                                            <label class="form-check-label">UserName</label>
                                            <div class="mb-3">
                                                <div class="form-group">
                                                    <div class="input-group">
                                                        <span class="input-group-text">
                                                            <i class="fas fa-user-alt"></i>
                                                        </span>
                                                        <input id="username" type="text" class="ctrlogin ps-2 form-control" placeholder="eg .username">
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="d-flex">
                                                <label class="form-check-label">Password</label>
                                                <label class="text-secondary fw-normal fst-italic text-sm ms-auto  " id="messagesen">case-sensitive</label>
                                                <label class="text-danger fw-normal fst-italic text-sm ms-auto d-none" id="messagecap">Caps lock is on</label>
                                            </div>

                                            <div class="mb-4">
                                                <div class="form-group">
                                                    <div class="input-group">
                                                        <span class="input-group-text">
                                                            <i class="fas fa-eye-slash show_pass_icon"></i>
                                                        </span>
                                                        <input id="password" class="ctrlogin ps-2  sercu form-control" autocomplete="off" placeholder="eg .password">
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="d-flex align-content-center">
                                                <div class="form-check form-switch">
                                                    <input class="form-check-input" type="checkbox" id="rememberMe" checked="">
                                                    <label class="form-check-label" for="rememberMe">Remember me</label>
                                                </div>
                                                <a id="Loginout" class="text-danger ms-auto text-sm cursor-pointer d-none">
                                                    <span class="form-check-label">Sign out</span>
                                                </a>
                                            </div>

                                        </div>

                                        <div class="text-center">
                                            <button id="loginbtn" type="button" class="btn bg-gradient-primary w-100 mt-2 mb-0 position-relative" onclick="Login()">
                                                <div id="loader" class="spinner-border spinner-border-sm"></div>
                                                LOGIN
                                            </button>
                                        </div>

                                    </form>
                                    <div id="textMessage" name="Content" style="text-align: center; height: 52px; padding-top: 24px; font-size: 13px; color: #dc3545;"></div>
                                    <div id="alertUpdateVer" class="position-absolute" style="display: none;">
                                        <div class="d-flex align-items-center flex-wrap">
                                            <div class="avatar avatar-lg me-3">
                                                <div id="loaderver" class="text-primary spinner-border spinner-border-sm"></div>
                                            </div>
                                            <div class="">
                                                <p class="mb-0 text-sm">Checking for <b class="text-danger">updates </b></p>
                                            </div>

                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="col-xl-6 col-md-5">
                            <div id="globe" class="position-absolute end-0 top-10 mt-sm-3 mt-7 me-lg-7">
                                <canvas width="500" height="400" class="w-lg-100 h-lg-100 w-75 h-75 me-lg-0 me-n10 mt-lg-5"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer class="footer py-5">
        <div class="container">

            <div class="text-center mb-2 mt-2">

                <a href="javascript:;" target="_blank">
                    <i class="fa fa-map-marker text-gradient text-dark text-xs pe-1"></i>
                    <span class="text-gradient text-dark text-xs" id="ipaddress"></span>
                    <span class="text-gradient text-dark text-xs d-none" id="ipaddress_hidden"></span>
                </a>
            </div>
            <div class="row">
                <div class="col-8 mx-auto text-center mt-1">
                    <a class="mb-0 text-dark text-sm" href="https://MUSLUNARCOFFEE.com/">
                        Copyright ©
                        <script>
                            document.write(new Date().getFullYear())
                        </script> MUSLUNARCOFFEE
                    </a>
                    <a onclick="Login_Clearall()" class="cursor-pointer d-block mb-0 text-danger text-sm">
                        Clear cookies
                    </a>
                </div>
            </div>
        </div>

    </footer>

    <script type="text/javascript">

        var _ver = Number('@Model._ver');
        var _loginfrom = '@Model._loginfrom';
        var _loginuser = '@Model._loginuser';
        var _loginpass = '@Model._loginpass';
        var dbname = '@ViewData["SessionData"]';
        var tbname = ['@ViewData["Session_Branch"]'
            , '@ViewData["Session_Teeth"]'
            , '@ViewData["Session_Service"]'
            , '@ViewData["Session_ServiceCare"]'
            , '@ViewData["Session_Employee"]'
            , '@ViewData["Session_User"]'
            , '@ViewData["Session_City"]'
            , '@ViewData["Session_District"]'
            , '@ViewData["Session_National"]'
            , '@ViewData["Session_Commune"]'
        ];

        //#region // FCM
        var apiKey = '@ViewData["apiKey"]';
        var authDomain = '@ViewData["authDomain"]';
        var projectId = '@ViewData["projectId"]';
        var storageBucket = '@ViewData["storageBucket"]';
        var messagingSenderId = '@ViewData["messagingSenderId"]';
        var appId = '@ViewData["appId"]';
        var measurementId = '@ViewData["measurementId"]';
        var token = '';
        var passwordcrypt = '';
        var defaultColor = '@ViewData["PrimaryColor"]';
        //#endregion

        //#region // LOG LOGIN
        var sys_userID_Main;
        var Master_branchID;
        //#endregion

        //#region // Function
        $(document).ready(function ()
        {

            ValidBr_ValidateBrowserSupport();
            //Login_From(_loginfrom, _ver);
            author_set('domain', '@Model._domain');
            if (typeof MSVColor_Set === 'function') MSVColor_Set();
            Login_DetectApi();
            Login_DetectPassword();
            Firebase_Regis(apiKey, authDomain, projectId, storageBucket, messagingSenderId, appId, measurementId);
            Login_DetectVersion();
            Login_InitializeEvent();

        });
        function Login_DetectVersion()
        {
            var _currentauthor = "";
            ver_check(
                beforefunc = function ()
                {
                    $('#alertUpdateVer').show();
                    $('#loginbtn').addClass('hold');
                    _currentauthor = author_get('author');
                    localStorage.clear();
                }
                , exefunc = function ()
                {
                    setTimeout(() =>
                    {
                        $('#alertUpdateVer').hide();
                        $('#loginbtn').removeClass('hold');
                        author_set('author', _currentauthor);
                    }, 1000)
                });
        }
        function Login_InitializeEvent()
        {
            $("#BodyMain").fadeIn(100);
            $(".show_pass_icon").unbind().on("click", function ()
            {
                let obj = $(this).parent().next();
                if (obj != undefined) {
                    if (obj.hasClass('sercu')) {
                        obj.removeClass('sercu');
                        $(this).addClass('fa-eye');
                        $(this).removeClass('fa-eye-slash');
                    }
                    else {
                        obj.addClass('sercu')
                        $(this).removeClass('fa-eye');
                        $(this).addClass('fa-eye-slash');
                    }
                }
            })
            $('.ctrlogin').on('keyup', function (e)
            {
                var code = e.key;
                if (code === "Enter") {
                    e.preventDefault();
                    Login();
                }
            });
            $('#Loginout').click(function (e)
            {
                let obj = author_get('author');
                if (obj != '') {
                    let _obj = JSON.parse(obj);
                    let e = {};
                    e.username = _obj.username;
                    e.password = "";
                    author_set('author', JSON.stringify(e));
                }
                Login_DetectPassword();
            });
            const password = document.querySelector('#password');
            password.addEventListener('keyup', function (e)
            {
                if (e.getModifierState('CapsLock')) {
                    $('#messagecap').removeClass('d-none');
                    $('#messagesen').addClass('d-none');


                } else {
                    $('#messagecap').addClass('d-none');
                    $('#messagesen').removeClass('d-none');
                }
            });
        }
        function Login_Clearall()
        {
            localStorage.clear();
            location.reload();
        }
        function Login_DetectPassword()
        {
            try {
                let author = false;
                let obj = author_get('author');

                if (obj != '') {
                    let _obj = JSON.parse(obj);
                    $('#username').val(_obj.username);
                    passwordcrypt = _obj.password;
                    if (passwordcrypt != "") author = true;
                }
                if (author) {
                    $('#password').val(passwordcrypt);
                    $('#password').addClass('disabled');
                    $('#username').addClass('disabled');
                    $('#Loginout').removeClass('d-none');
                    $('#Loginhint').addClass('d-none');
                    let objbase = author_get('BaseData');
                    if (objbase != '') {
                        let _objbase = JSON.parse(objbase);
                        let _src = _objbase.data._circleAvatar;
                        let _name = _objbase.data._userNameCurrent;
                        if (_src != undefined && _src != '' && _src != '/default.png') {
                            $('#Loginsrc').attr('src', _src);
                            $('#Loginsrc').removeClass('d-none');
                        }
                        else {
                            $('#LoginsrcAvatar').removeClass('d-none');
                            $('#LoginsrcAvatar').html($('#username').val().charAt(0));
                        }
                        $('#Loginuser').html(_name != undefined && _name != '' ? (_name + ' !') : '');
                    }
                }
                else {
                    $('#Loginhint').removeClass('d-none');
                    $('#Loginout').addClass('d-none');
                    $('#Loginsrc').addClass('d-none');
                    $('#LoginsrcAvatar').addClass('d-none');
                    $('#password').removeClass('disabled');
                    $('#username').removeClass('disabled');
                    $('#Loginuser').html("");
                    $('#password').val("");
                }
            }
            catch (e) {
            }

        }
        function Login_DetectApi()
        {
            AjaxApi(url = "/api/Author/GetIP"
                , data = JSON.stringify({})
                , async = true
                , success = function (result)
                {
                    if (result != "0") {
                        let d = JSON.parse(result);
                        $('#ipaddress').html(d.ip);
                        $('#ipaddress_hidden').html(d.ip_encry);
                         author_set('ip', d.ip);

                    } else {
                        $('#ipaddress').html("-");
                        $('#ipaddress_hidden').html("");
                        author_set('ip', '');
                    }
                    $('#loginbtn').removeClass('disabed');
                }
                , before = function (e)
                {
                    $('#loginbtn').addClass('disabed');
                }
            );
        }
        function Login()
        {

            if ($('#username').val() != '' && (passwordcrypt != '' || $('#password').val() != '')) {
                LoginExecuted($('#username').val(), $('#password').val(), passwordcrypt, _from = "");
            }
            else {
                if ($('#username').val() == '') $('#username').addClass('active').removeClass('disabled');
                if ($('#password').val() == '') $('#password').addClass('active').removeClass('disabled');
                $('#loginbtn').removeClass('disabed');
            }
        }
        function LoginExecuted(_username, _password, _passwordcrypt, _from)
        {
            $('#username').removeClass('active').addClass('disabled');
            $('#password').removeClass('active').addClass('disabled');
            $('#loginbtn').addClass('disabed');
            $('#textMessage').html('');
            let isPassing = false;
            if (_username != '' && (_passwordcrypt != '' || _password != '')) isPassing = true;
            if (_username != '' && _passwordcrypt != '' && _from != "") isPassing = true;

            if (isPassing) {
                AjaxApi(url = "/api/Author/Login"
                    , data = JSON.stringify({
                        UserName: _username
                        , Password: _password
                        , PasswordEnCrypt: _passwordcrypt
                        , IP: $('#ipaddress_hidden').html()
                        , TokenFCM: token != undefined ? token : ""
                        , From: _from
                    })
                    , async = true
                    , success = function (result)
                    {
                        let _d = JSON.parse(result);
                        switch (_d.RESULT) {
                            case "incorrect": {
                                $('#textMessage').html(`Username or password incorrect.<span class="d-block fw-bold">${_d.ErrTime} times</span>`);
                                $('#loginbtn').removeClass('disabed');
                                $('#username').removeClass('active').removeClass('disabled');
                                $('#password').removeClass('active').removeClass('disabled');
                                $('#loader').hide();
                                break;
                            }
                            case "locked": {
                                $('#textMessage').html(`User locked. <span class="d-block"> Please log in after <span class="fw-bold fs-6">${GetDateTime_String_HHMM(_d.BlockTime)}</span></span>`);
                                $('#loginbtn').removeClass('disabed');
                                $('#username').removeClass('active').removeClass('disabled');
                                $('#password').removeClass('active').removeClass('disabled');
                                $('#loader').hide();
                                break;
                            }
                            case "error": {
                                $('#textMessage').html('Error or ran out of time!');
                                $('#loginbtn').removeClass('disabed');
                                $('#username').removeClass('active').removeClass('disabled');
                                $('#password').removeClass('active').removeClass('disabled');
                                $('#loader').hide();
                                break;
                            }
                            case "block": {
                                $('#textMessage').html('Blocked');
                                $('#loginbtn').removeClass('disabed');
                                $('#username').removeClass('active').removeClass('disabled');
                                $('#password').removeClass('active').removeClass('disabled');
                                $('#loader').hide();
                                break;
                            }
                            default: {
                                SavePassword(result);
                                SaveSettingUser(_d.ID, _d.SettingUser);
                                localStorage.setItem("WebToken", _d.Session);
                                author_set("TokenTopic", _d.TokenTopic);
                                setCookie('WebToken', _d.Session, 1);
                                author_set('UserLang', _d.Lang);
                                author_set('Userexp', "");
                                author_set('Minify', _d.Minify);
                                SetBaseData();
                                GetSessionData();
                                break;
                            }
                        }

                    }
                    , before = function (e)
                    {
                        $('#loader').show();
                    }

                );
            }
            else {
                if ($('#username').val() == '') $('#username').addClass('active').removeClass('disabled');
                if ($('#password').val() == '') $('#password').addClass('active').removeClass('disabled');
                $('#loginbtn').removeClass('disabed');
            }

        }
        function SaveSettingUser(id, SettingUser)
        {
            if (SettingUser == "") {
                SettingUser["user"] = id;
            }
            author_set('setting', JSON.stringify(SettingUser));
        }
        function SavePassword(result)
        {
            if ($('#rememberMe').is(":checked")) {
                let e = {};
                let obj = JSON.parse(result)
                e.username = obj.UserName;
                e.password = obj.PasswordEnCrypt;
                author_set('author', JSON.stringify(e));
            }
            else author_set('author', '');
        }
        //#endregion
        //#region // Session Data

        function SetBaseData()
        {
            AjaxJWT(url = "/api/Author/baseData"
                , data = JSON.stringify({})
                , async = false
                , success = function (result)
                {
                    localstorage_set(session_base, JSON.parse(result));
                    LoadSessionBase_ExecLog();
                }
            );
        }

        function GetSessionData()
        {
            //ver_check();
            Master_IndexDB_Delete(dbname, function ()
            {
                AjaxJWT(url = "/api/Home/SessionData"
                    , data = JSON.stringify({})
                    , async = true
                    , success = function (result)
                    {
                        if (result != "0") {
                            let data = JSON.parse(result);
                            LoadSessionBase(data);
                        }
                    }
                );
            });
        }

        function LoadSessionBase(datas)
        {
            try {
                var promises = [];
                let i = 1;
                for (const [key, value] of Object.entries(datas)) {
                    promises.push(Master_IndexDB_IniTable(dbname, tbname[i - 1], value, i));
                    i++;
                }
                Promise.all(promises).then((values) =>
                {
                    $('#loader').hide();
                    LoadSessionBase_RedirectFirstPage();
                });
            }
            catch (ex) {

            }
        }

        function LoadSessionBase_ExecLog()
        {
            try {
                var Master_Data = JSON.parse(localstorage_get(session_base)).data;
                sys_userID_Main = Master_Data._userID_Main;
                Master_branchID = Master_Data._branchIDCurrent;
                syslog_userlogin('l', '')
            }
            catch (ex) {

            }
        }

        function LoadSessionBase_RedirectFirstPage()
        {
            try {
                var href = '/Appointment/AppointmentInDay';
                if (session_base && session_base != '') {
                    var Master_Data = JSON.parse(localstorage_get(session_base)).data;
                    if (Master_Data && Object.values(Master_Data).length != 0) {
                        var PermissionTableMenu = JSON.parse(Master_Data.PermissionTable_Menu);
                        if (PermissionTableMenu && PermissionTableMenu[0].MenuIDText != 'menuCustomerCreate')
                            href = PermissionTableMenu[0].MenuURL;
                        else href = PermissionTableMenu[1].MenuURL;
                    }
                }
                window.location.href = href;
            }
            catch (ex) {
                window.location.href = '/Appointment/AppointmentInDay';
            }
        }

        //#endregion
        //#region // Token
        function Firebase_Regis(_apiKey, _authDomain, _projectId, _storageBucket, _messagingSenderId, _appId, _measurementId)
        {
            var config = {
                apiKey: _apiKey,
                authDomain: _authDomain,
                projectId: _projectId,
                storageBucket: _storageBucket,
                messagingSenderId: _messagingSenderId,
                appId: _appId,
                measurementId: _measurementId
            };
            if (firebase.apps.length === 0) {
                firebase.initializeApp(config);
            }
            const messaging = firebase.messaging.isSupported() ? firebase.messaging() : null;
            if (messaging != null) {
                $('#loader').show();
                $('#loginbtn').addClass('disabled');
                setTimeout(function () {
                   if($('#loginbtn').hasClass("disabled")) {
                      $('#textMessage').html(`@Local["Mở quyền thông báo để nhận thông báo từ ứng dụng"]`)
                      $('#loader').hide();
                      $('#loginbtn').removeClass('disabled');
                      Login_From(_loginfrom, _ver);
                   }
                }, 8000);
                messaging.requestPermission()
                    .then(function ()
                    {
                        let storagetoken = '';
                        let tokenobj = author_get('fcm');
                        if (tokenobj != '') {
                            let obj = JSON.parse(tokenobj);
                            storagetoken = obj.token;
                        }
                        if (storagetoken != "") {
                            messaging.deleteToken(storagetoken).then(() =>
                            {
                                Firebase_Gettoken(messaging);
                            }).catch((err) =>
                            {
                                Firebase_Gettoken(messaging);
                            });
                        }
                        else {
                            Firebase_Gettoken(messaging);
                        }
                    })
                    .catch((er) =>
                    {
                        Login_From(_loginfrom, _ver);
                        $('#loader').hide();
                        $('#loginbtn').removeClass('disabled');
                    });
            }
            else {
                let msg = navigator.userAgent.indexOf("Safari") > -1 ? 'Safari' : "";
                $('#textMessage').html(`Chức năng nhận thông báo không hỗ trợ trình duyệt ${msg}.<br> Vui lòng đổi sang trình duyệt Edge, Firefox, Chrome để sử dụng.`)
                Login_From(_loginfrom, _ver);
            }
        }
        function Firebase_Gettoken(messaging)
        {
            messaging.getToken().then((currentToken) =>
            {
                if (currentToken) token = currentToken;
                DetectToken(token);
                Login_From(_loginfrom, _ver);
                $('#loader').hide();
                $('#loginbtn').removeClass('disabled');
            }).catch((err) =>
            {
                //DetectToken("");
                Login_From(_loginfrom, _ver);
                $('#loader').hide();
                $('#loginbtn').removeClass('disabled');
                console.log(err)
            });

        }
        function DetectToken(token)
        {
            let e = {};
            e.token = token;
            e.apiKey = apiKey;
            e.authDomain = authDomain;
            e.projectId = projectId;

            e.storageBucket = storageBucket;
            e.messagingSenderId = messagingSenderId;
            e.appId = appId;
            e.measurementId = measurementId;

            author_set('fcm', JSON.stringify(e));
        }
        //#endregion
        //#region // Cookie Type
        function Login_From(_fr, _va)
        {
            if (_va != "0") {
                switch (_fr) {
                    case "checkin":
                        {
                            let _curv = author_get('loginfrom');
                            if (_curv == undefined || _curv == null || _curv == "" || _curv != _va) {
                                author_set('loginfrom', _va);
                                let obj = author_get('author');
                                if (obj != '') {
                                    let _obj = JSON.parse(obj);
                                    let _username = _obj.username;
                                    let _crypt = _obj.password;
                                    LoginExecuted(_username, "", _crypt, _from = _fr);
                                }
                            }
                        }
                        break;
                    case "scanqr":
                    case "settingdoc":
                        {
                            let _curv = author_get('loginfrom');
                            if (_curv == undefined || _curv == null || _curv == "" || _curv != _va) {
                                author_set('loginfrom', _va);
                                $('#username').val(_loginuser);
                                $('#password').val(_loginpass);
                                let e = {};
                                e.username = _loginuser;
                                e.password = _loginpass;
                                author_set('author', JSON.stringify(e));
                                LoginExecuted(_loginuser, "", _loginpass, _from = _fr);
                            }
                        }
                        break;
                }
            }
        }

        //#endregion
        (function ()
        {

            const container = document.getElementById("globe");
            const canvas = container.getElementsByTagName("canvas")[0];

            const globeRadius = 100;
            const globeWidth = 4098 / 2;
            const globeHeight = 1968 / 2;

            function convertFlatCoordsToSphereCoords(x, y)
            {
                let latitude = ((x - globeWidth) / globeWidth) * -180;
                let longitude = ((y - globeHeight) / globeHeight) * -90;
                latitude = (latitude * Math.PI) / 180;
                longitude = (longitude * Math.PI) / 180;
                const radius = Math.cos(longitude) * globeRadius;

                return {
                    x: Math.cos(latitude) * radius,
                    y: Math.sin(longitude) * globeRadius,
                    z: Math.sin(latitude) * radius
                };
            }

            function makeMagic(points)
            {
                const {
                    width,
                    height
                } = container.getBoundingClientRect();

                // 1. Setup scene
                const scene = new THREE.Scene();
                // 2. Setup camera
                const camera = new THREE.PerspectiveCamera(45, width / height);
                // 3. Setup renderer
                const renderer = new THREE.WebGLRenderer({
                    canvas,
                    antialias: true
                });
                renderer.setSize(width, height);
                // 4. Add points to canvas
                // - Single geometry to contain all points.
                const mergedGeometry = new THREE.Geometry();
                // - Material that the dots will be made of.
                const pointGeometry = new THREE.SphereGeometry(0.5, 1, 1);
                const pointMaterial = new THREE.MeshBasicMaterial({
                    color: "#989db5",
                });

                for (let point of points) {
                    const {
                        x,
                        y,
                        z
                    } = convertFlatCoordsToSphereCoords(
                        point.x,
                        point.y,
                        width,
                        height
                    );

                    if (x && y && z) {
                        pointGeometry.translate(x, y, z);
                        mergedGeometry.merge(pointGeometry);
                        pointGeometry.translate(-x, -y, -z);
                    }
                }

                const globeShape = new THREE.Mesh(mergedGeometry, pointMaterial);
                scene.add(globeShape);

                container.classList.add("peekaboo");

                // Setup orbital controls
                camera.orbitControls = new THREE.OrbitControls(camera, canvas);
                camera.orbitControls.enableKeys = false;
                camera.orbitControls.enablePan = false;
                camera.orbitControls.enableZoom = false;
                camera.orbitControls.enableDamping = false;
                camera.orbitControls.enableRotate = true;
                camera.orbitControls.autoRotate = true;
                camera.position.z = -265;

                function animate()
                {
                    // orbitControls.autoRotate is enabled so orbitControls.update
                    // must be called inside animation loop.
                    camera.orbitControls.update();
                    requestAnimationFrame(animate);
                    renderer.render(scene, camera);
                }
                animate();
            }

            function hasWebGL()
            {
                const gl =
                    canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
                if (gl && gl instanceof WebGLRenderingContext) {
                    return true;
                } else {
                    return false;
                }
            }

            function init()
            {
                if (hasWebGL()) {
                    window
                    window.fetch("/js/Shared/points.json")
                        .then(response => response.json())
                        .then(data =>
                        {
                            makeMagic(data.points);
                        });
                }
            }
            init();
        })();
        function GetDateTime_String_HHMM(x)
        {
            try {
                var datenow = new Date(x);
                let hour = (datenow.getHours() < 10) ? ("0" + datenow.getHours()) : datenow.getHours();
                let minute = (datenow.getMinutes() < 10) ? ("0" + datenow.getMinutes()) : datenow.getMinutes();
                return hour + ":" + minute;
            }
            catch (err) {
                return "";
            }
        }
        //#region //DETECT BROWSER VALID
        function ValidBr_CheckBrowserValid()
        {
            try {
                let dbIndex = 'indexedDB' in window || 'mozIndexedDB' in window || 'webkitIndexedDB' in window || 'msIndexedDB' in window;
                let localStorage = 'localStorage' in window && window['localStorage'] !== null;
                window.indexedDB = window.indexedDB || window.mozIndexedDB ||
                    window.webkitIndexedDB || window.msIndexedDB;
                if (dbIndex && localStorage) {
                    let databases = ('databases' in window.indexedDB && window.indexedDB['databases'] !== null && typeof window.indexedDB['databases'] === 'function');
                    return databases;
                }
                else {
                    return false
                }
            }
            catch (e) {
                return false;
            }
        }

        function ValidBr_DetectInfoBrowser()
        {
            let module = {
                options: [],
                header: [navigator.platform, navigator.userAgent, navigator.appVersion, navigator.vendor, window.opera],
                dataos: [
                    { name: 'Windows Phone', value: 'Windows Phone', version: 'OS' },
                    { name: 'Windows', value: 'Win', version: 'NT' },
                    { name: 'iPhone', value: 'iPhone', version: 'OS' },
                    { name: 'iPad', value: 'iPad', version: 'OS' },
                    { name: 'Kindle', value: 'Silk', version: 'Silk' },
                    { name: 'Android', value: 'Android', version: 'Android' },
                    { name: 'PlayBook', value: 'PlayBook', version: 'OS' },
                    { name: 'BlackBerry', value: 'BlackBerry', version: '/' },
                    { name: 'Macintosh', value: 'Mac', version: 'OS X' },
                    { name: 'Linux', value: 'Linux', version: 'rv' },
                    { name: 'Palm', value: 'Palm', version: 'PalmOS' }
                ],

                init: function ()
                {
                    let agent = this.header.join(' '),
                        os = this.matchItem(agent, this.dataos),
                        isMobile = sys_isMobile,
                        isIPad = sys_isIpad;
                    let ua = navigator.userAgent;
                    let tem;

                    let Meta = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
                    if (/trident/i.test(Meta[1])) {
                        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
                        if (tem != null) Meta[1] = 'Internet Explorer';
                    }

                    if (Meta[1] === 'Chrome') {
                        tem = ua.match(/\b(OPR|Edg)\/(\d+)/);
                        if (tem != null) Meta[1] = tem[1].replace('OPR', 'Opera').replace('Edg', 'Edge');
                    }
                    Meta = Meta[2] ? [Meta[1], Meta[2]] : [navigator.appName, navigator.appVersion, '-?'];
                    if ((tem = ua.match(/version\/(\d+)/i)) != null) Meta.splice(1, 1, tem[1]);

                    if (ua.indexOf("Zalo") > -1){
                        Meta[0] = 'Zalo Webview';
                        Meta[1] = '';
                    }
                    return { os: os, browser: { name: Meta[0], version: Meta[1] }, isMobile: isMobile, isIPad: isIPad };
                },

                matchItem: function (string, data)
                {
                    let i = 0,
                        j = 0,
                        html = '',
                        regex,
                        regexv,
                        match,
                        matches,
                        version;

                    for (i = 0; i < data.length; i += 1) {
                        regex = new RegExp(data[i].value, 'i');
                        match = regex.test(string);
                        if (match) {
                            regexv = new RegExp(data[i].version + '[- /:;]([\\d._]+)', 'i');
                            matches = string.match(regexv);
                            version = '';
                            if (matches) { if (matches[1]) { matches = matches[1]; } }
                            if (matches) {
                                matches = matches.split(/[._]+/);
                                for (j = 0; j < matches.length; j += 1) {
                                    if (j === 0) {
                                        version += matches[j] + '.';
                                    } else {
                                        version += matches[j];
                                    }
                                }
                            } else {
                                version = '0';
                            }
                            return {
                                name: data[i].name,
                                version: parseFloat(version)
                            };
                        }
                    }
                    return { name: 'unknown', version: 0 };
                }
            };
            let e = module.init();
            return e;
        }

        function ValidBr_ValidateBrowserSupport(inbr)
        {
            if(!ValidBr_CheckBrowserValid()){
                let inbr = ValidBr_DetectInfoBrowser();
                let browserValid = { Chrome: 'mới nhất', Edge: 'mới nhất', Safari: 'mới nhất', Opera: 'mới nhất' };
                let devide = inbr.isMobile == 1 ? "Thiết bị điện thoại" : (inbr.isIPad == 1 ? 'Thiết bị IPad' : "Thiết bị");
                let osVer = inbr.os.name == 'Windows' && inbr.os.version == '10' || inbr.os.version == '0' ? '' : inbr.os.version;
                let title = `<p class="text-lg fw-bold mx-2">Trình duyệt của bạn không được hỗ trợ!.</p><p class="text-sm mt-2 mx-3 text-secondary">(${devide} ${inbr.os.name} ${osVer}, trình duyệt ${inbr.browser.name} ${inbr.browser.version != '' ? `phiên bản ${inbr.browser.version}` : ''})</p>`
                let hint = ValidBr_RenderBrowserHint(inbr, browserValid);
                let renderNoti = ValidBr_RenderBrowserNoti(inbr, browserValid);
                Swal.fire({
                    icon: 'error',
                    title: title,
                    html: renderNoti,
                    footer: `<p class="text-sm"> <span class="font-weight-bold text-sm">Gợi ý</span>: ${hint}</p>`,
                    showConfirmButton: true,
                    showCancelButton: false,
                    confirmButtonText: "OK",
                    cancelButtonText: "",
                    customClass: {
                        confirmButton: 'btn bg-gradient-primary mx-2',
                        cancelButton: 'btn bg-gradient-light mx-2',
                    },
                    width: '50vw',
                    buttonsStyling: false
                })
            }
        }
        function ValidBr_RenderBrowserHint(inbr, browserValid)
        {
            let hint = '';
            switch (inbr.browser.name) {
                case 'Chrome':
                    hint = `Cập nhật trình duyệt Chrome phiên bản ${browserValid.Chrome}
                           ${inbr.isMobile == 0 && inbr.isIPad == 0
                           ? `<a class="mx-1 border-bottom border-primary text-primary fw-bold" target="_blank"
                           href="https://support.google.com/chrome/answer/95414?hl=en&co=GENIE.Platform%3DDesktop"> Hướng dẫn cập nhật</a>`
                           : ''}`;
                    break;
                case 'Safari':
                    hint = `Chuyển đổi sang trình duyệt Chrome phiên bản ${browserValid.Chrome}
                            ${inbr.isMobile == 0 && inbr.isIPad == 0
                            ? `<a class="mx-1 border-bottom border-primary text-primary fw-bold" target="_blank"
                            href="https://www.google.com/chrome/"> Tải xuống trình duyệt</a>`
                            : ''}`;
                    break;
                case 'Edge':
                    hint = `Cập nhật trình duyệt Edge phiên bản ${browserValid.Edge}
                           ${inbr.isMobile == 0 && inbr.isIPad == 0
                           ? `<a class="mx-1 border-bottom border-primary text-primary fw-bold" target="_blank"
                           href="https://support.microsoft.com/en-us/topic/microsoft-edge-update-settings-af8aaca2-1b69-4870-94fe-18822dbb7ef1#:~:text=In%20the%20browser%2C%20go%20to,Download%20and%20install%20to%20proceed."> Hướng dẫn cập nhật</a>`
                           : ''}`;
                case 'Opera':
                    hint = `Cập nhật trình duyệt Opera phiên bản ${browserValid.Opera}
                           ${inbr.isMobile == 0 && inbr.isIPad == 0
                           ? `<a class="mx-1 border-bottom border-primary text-primary fw-bold" target="_blank"
                           href="https://help.opera.com/en/latest/crashes-and-issues/#updateBrowser"> Hướng dẫn cập nhật</a>`
                           : ''}`;
                    break;
                default:
                    hint = `Chuyển đổi sang trình duyệt Chrome phiên bản ${browserValid.Chrome}
                           ${inbr.isMobile == 0 && inbr.isIPad == 0
                           ? `<a class="mx-1 border-bottom border-primary text-primary fw-bold" target="_blank"
                           href="https://www.google.com/chrome/"> Tải xuống trình duyệt</a>`
                           : ''}`;
            }
            return hint;
        }
        function ValidBr_RenderBrowserNoti(inbr, browserValid)
        {
            let renderNoti = `<div class="card-body m-3 mb-4 bg-gray-100 border-radius-lg">
                                    <p class="text-sm mb-2 font-weight-bold">Vui lòng cập nhật trình duyệt tương ứng:</p>
                                        <div class="row justify-content-center">
                                        <div class="col-12 col-sm-6 col-lg-3 ps-md-0">
                                            <div class="d-flex mb-2 justify-content-center">
                                                <div class="me-2 d-flex align-items-center ${inbr.browser.name == 'Chrome' ? 'text-primary' : ''} justify-content-center">
                                                    <i class="fa-chrome fab mt-2 text-7xl"></i>
                                                </div>

                                            </div>
                                            <p class="text-sm mb-0 font-weight-bold">Chrome</p>
                                            <p class="text-sm text-secondary">Phiên bản ${browserValid.Chrome} </p>
                                        </div>
                                        <div class="col-12 col-sm-6 col-lg-3 ps-md-0">
                                            <div class="d-flex mb-2 justify-content-center">
                                                <div class="me-2 d-flex align-items-center ${inbr.browser.name == 'Edge' ? 'text-info text-gradient' : ''}  justify-content-center">
                                                    <i class="fab fa-edge mt-2 text-7xl"></i>
                                                </div>

                                            </div>
                                            <p class="text-sm mb-0 font-weight-bold">Edge</p>
                                            <p class="text-sm text-secondary">Phiên bản ${browserValid.Edge} </p>
                                        </div>
                                        <div class="col-12 col-sm-6 col-lg-3 ps-md-0">
                                            <div class="d-flex mb-2 justify-content-center">
                                                <div class="me-2 d-flex align-items-center ${inbr.browser.name == 'Safari' ? 'text-info text-gradient' : ''} justify-content-center">
                                                    <i class="fab fa-safari mt-2 text-7xl "></i>
                                                </div>

                                            </div>
                                            <p class="text-sm mb-0 font-weight-bold">Safari</p>
                                            <p class="text-sm text-secondary">Phiên bản ${browserValid.Safari} </p>
                                        </div>
                                        <div class="col-12 col-sm-6 col-lg-3 ps-md-0">
                                            <div class="d-flex mb-2 justify-content-center">
                                                        <div class="me-2 d-flex align-items-center ${inbr.browser.name == 'Opera' ? 'text-danger text-gradient' : ''} justify-content-center">
                                                    <i class="fab fa-opera mt-2 text-7xl"></i>
                                                </div>

                                            </div>
                                            <p class="text-sm mb-0 font-weight-bold">Opera</p>
                                            <p class="text-sm text-secondary">Phiên bản ${browserValid.Opera} </p>
                                        </div>
                                    </div>
                                    </div>`;
            return renderNoti;
        }
                //#endregion
    </script>
    <style>
        @@media screen and (max-width: 600px) {
            .swal2-modal {
                width: 95% !important;
            }
        }
    </style>
    <script src="/assets/js/soft-ui-dashboard.min.js?v=1.0.4"></script>
    <script src="/assets/js/plugins/chartjs.min.js"></script>
    <script src="/assets/js/plugins/threejs.js"></script>
    <script src="/assets/js/plugins/orbit-controls.js"></script>
    <script src='/js/firebasemessage.js' type="text/javascript"></script>
</body>

</html>