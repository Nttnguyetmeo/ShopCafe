@page
@model MLunarCoffee.Pages.Customer.Schedule.ScheduleStatusHistoryModel
@{
    Layout = null;
}

<div class="container-fluid px-0">
    <div class="row">
        <div class="col-12">
            <div class="card mb-3">
                <div class="card-header p-3 pb-0">
                    <div class="d-lg-flex">
                        <div class="w-50 col-auto my-auto">
                            <div class="h-100">
                                <h6 class="mb-0">@Local["Lịch sử lịch hẹn"]</h6>
                                <p class="text-sm mb-0">@Local["Chi tiết lịch sử lịch hẹn"]</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body p-3 pt-2">
                    <ul class="list-group text-dark">
                        <li class="list-group-item border-0 text-sm py-1">
                            <p class="text-sm fw-bold d-inline">@Local["Khách hàng"]:</p>
                            <div class="text-dark d-inline" id="StaSche_Cust"></div>
                        </li>
                        <li class="list-group-item border-0 text-sm py-1">
                            <p class="fw-bold text-sm d-inline">@Local["Lịch hẹn"]: </p>
                            <div class="text-dark d-inline" id="StaSche_Schedule"></div>
                        </li>
                        <li class="list-group-item border-0 text-sm py-1">
                            <p class="fw-bold text-sm d-inline">@Local["Chi nhánh"]: </p>
                            <div class="text-dark d-inline" id="StaSche_Branch"></div>
                        </li>
                    </ul>
                    <hr class="horizontal dark my-3">
                    <div class="my-3">
                        <div id="StaSche_Main" class="block-horizontal"></div>
                    </div>
                </div>
            </div>
            <div class="fixed-botombutton">
                <div class="action_Save">
                    <div class="action_Save-Content">
                        <button class="btn btn-secondary" form="form3" onclick="event.preventDefault();CloseModal()">@Local["Đóng"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    //#region // DECLARE & INIT

    let StaSche_CurrentID = '@Model._ScheduleID';
    let StaSche_DataStatus = {};
    let StaSche_DataBranch, StaSche_DataEmp;

    $(document).ready(function () {
        Master_IndexDB_Reads(_Session_Data, [_Session_Employee, _Session_Branch]
            , function (data) {
                StaSche_DataEmp = data[0];
                StaSche_DataBranch = data[1];
                StaSche_LoadData(Number(StaSche_CurrentID))
            }
        );
    })

    //#endreigon

    //#region // LOAD DATA

    function StaSche_LoadData(id) {
        if (!isNaN(id) && id != 0) {
            AjaxLoad(url = "/Customer/Schedule/ScheduleStatusHistory/?handler=LoadData"
                , data = {
                    'ScheduleID': id
                }
                , async = true
                , error = function () { notiError_SW(); }
                , success = function (result) {
                    if (result != "0") {
                        let data = JSON.parse(result);
                        let dataStatus = data.Status;
                        let dataInfo = data.Info;
                        let dataStatusSche = data.StatusSchedule;
                        StaSche_DataStatus = dataStatus && dataStatus.reduce((pre, arr) => {
                            if (arr.ID) pre[arr.ID] = arr;
                            return pre;
                        }, {});

                        StaSche_FillData(dataInfo);
                        StaSche_Render(dataStatusSche, 'StaSche_Main');
                    }
                    else notiError_SW();
                }
                , sender = null
                , before = null
                , complete = function (e) {

                }
            );
        }
    }

    //#endregion

    //#region // LOAD DATA

    async function StaSche_FillData(data) {
        if (data && data.length != 0) {
            let item = data[0];
            $("#StaSche_Cust").html(`<a href="/Customer/MainCustomer?CustomerID=${item.CustID}" target="_blank">${item.CustName}</a>`)
            $("#StaSche_Schedule").html(ConvertDateTimeUTC_DMYHM(item.DateFrom) + ' - ' + (item.Type == 1 ? '@Local["Tư vấn"]' : '@Local["Điều trị"]') )
            $("#StaSche_Branch").html(item.Branch);
        }
    }

    //#endregion

    //#region // RENDER DATA

    async function StaSche_Render(data, id) {
        setTimeout(() => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let color = StaSche_DataStatus[item.Status] != undefined ? StaSche_DataStatus[item.Status].Color : '#888';
                        let namestatuslang = '';
                        if (StaSche_DataStatus[item.Status] != undefined) {
                            namestatuslang = author_get("UserLang") == 'en' ? StaSche_DataStatus[item.Status].NameLangOther : StaSche_DataStatus[item.Status].Name;
                        }
                        let tr = `
                            <div class="d-sm-flex align-items-center w-100 position-relative">
                                <div class="text-start time-width">
                                    ${item.Status != 1 ? `<h6 class="text-sm mb-0 text-dark fw-bold">${GetHHMM_FromDateTime(item.Created)} </h6>` : ``}
                                </div>
                                <div class="my-auto">
                                    <div class="d-flex flex-wrap gap-2 grap-1 h-100">
                                        <span class="mx-3"><i class="fas fa-long-arrow-alt-right"></i></span>
                                        <span class="mb-0 text-xs badge-sm me-2" style="color:${color};background-color:${color + '3b'}"> ${namestatuslang}</span>
                                        ${ StaSche_RenderRoom(item.ManuLevel, item.ManuRoom) }
                                            ${item.DocID != 0 ? `<span class="mb-0 text-xs badge-sm me-3 bg-gradient-dark text-white" data-bs-toggle="tooltip" title="@Local["Bác sĩ"]"><i class="fas fa-user-md me-1"></i>${Fun_GetName_ByID(StaSche_DataEmp, item.DocID)}</span>` : ''}
                                        ${item.AssID != 0 ? `<span class="mb-0 text-xs badge-sm me-3 bg-gradient-dark text-white" data-bs-toggle="tooltip" title="@Local["Kỹ thuật viên"]"><i class="fas fa-user me-1"></i>${Fun_GetName_ByID(StaSche_DataEmp, item.AssID)}</span>` : ''}
                                        ${item.EmployeeID != 0 ? `<span class="mb-0 text-xs badge-sm me-3 bg-gradient-dark text-white" data-bs-toggle="tooltip" title="@Local["Người chuyển"]"><i class="fas fa-user-edit me-1"></i>${Fun_GetName_ByID(StaSche_DataEmp, item.EmployeeID)}</span>` : ''}
                                        </div>
                                </div>
                            </div>
                            <div class="position-relative">
                                <hr class="horizontal dark my-3">
                                ${ data[i + 1] != undefined ? StaSche_RenderDiffTime(item.Created, data[i + 1].Created) : '' }
                            </div>
                        `
                        stringContent += tr;
                    }
                }
                myNode.innerHTML = stringContent;
                ToolPopper();
            }
        }, 100)
    }

    function StaSche_RenderRoom(level, room) {
        try {
            if (level && level != '' && room && room != '') {
                return `<span class="mb-0 text-xs badge-sm me-3 bg-gradient-dark text-white" data-bs-toggle="tooltip" title="@Local["Phòng"]"><i class="ni ni-square-pin me-1"></i> ${level} - ${room}</span>`;
            }
            return '';
        }
        catch (ex) {
            return '';
        }
    }

    //function StaSche_RenderEmp(empid,tooltipText) {
    //    try {
    //        if (empid && empid != '0') {
    //            return `<span class="mb-0 text-xs badge-sm me-3 bg-gradient-dark text-white" data-bs-toggle="tooltip" title="${tooltipText}"><i class="fas fa-user me-1"></i>${Fun_GetName_ByID(StaSche_DataEmp, empid)}</span>`;
    //        }
    //        return '';
    //    }
    //    catch (ex) {
    //        return '';
    //    }
    //}

    function StaSche_RenderDiffTime(timeBegin, timeEnd) {
        try {
            if (timeBegin && !timeBegin.includes('1900-01-01') && timeEnd && !timeEnd.includes('1900-01-01')) {
                return `
                <div class="top-50 translate-middle-y start-0 position-absolute rounded-end time-diff">
                    <div class="position-relative w-100 h-100">
                        <div class="align-items-center start-0 text-primary text-xs time-diff-text top-50 translate-middle-y">
                            <i class="fa-long-arrow-alt-down fas fs-4 me-2 "></i>
                            ${StaSche_DiffTime(timeBegin, timeEnd)}
                        </div>
                    </div>
                </div>
                `;
            }
            return '';
        }
        catch (ex) {
            return '';
        }
    }

    //#endregion

    //#region // OTHER

    function StaSche_DiffTime(TimeFrom, TimeTo) {
        try {
            let result = '';
            let dateFrom = new Date(TimeFrom);
            let dateTo = new Date(TimeTo);
            let diffHours = Math.floor(Math.abs(dateFrom - dateTo) / (1000 * 60 * 60));
            let diffMinutes = Math.floor(Math.abs(dateFrom - dateTo) / (1000 * 60));

            if (diffHours != 0)
                result = (diffHours >= 10 ? diffHours : '0' + diffHours) + ' @Local["Giờ"] ' + (Math.floor(diffMinutes % 60) >= 10 ? Math.floor(diffMinutes % 60) : '0' + Math.floor(diffMinutes % 60)) + ' @Local["Phút"]';
            else if (diffMinutes != 0) result = (diffMinutes >= 10 ? diffMinutes : '0' + diffMinutes) + ' @Local["Phút"]';
            else result = '1 @Local["Phút"]';
            return result;
        }
        catch (err) {
            return "";
        }
    }

    //#endregion


</script>


<style>


    .time-diff, .time-diff-text {
        display: none;
    }

    @@media only screen and (min-width: 992px) {
        .time-width {
            width: 50px;
        }

        .time-diff {
            width: 80px;
            height: 100%;
            min-height: 45px;
            background-color: transparent;
            color: white;
            border-radius: 0;
            display: block;
            top: 60%;
        }

        .time-diff-text {
            display: flex;
            position: absolute;
            left: calc(100% + 10px);
            width: max-content;
        }
    }

</style>