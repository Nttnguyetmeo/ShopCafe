@page
@model MLunarCoffee.Pages.Customer.Payment.PaymentDetailReturnModel
@{
    Layout = null;
}

<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require_notasync('/js/PaymentDetail/service_return.js', true);</script>

<div class="row m-2 me-0">
    <div class="col-md-7">
        <div id="loaderPaymentRefund" class="waitingdiv text-center" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="row">
            <div class="card mb-2" id="title_treat_inday">
                <div class="card-header pb-0 px-2">
                    <h6 class="mb-0">@Local["Danh sách dịch vụ & sản phẩm hoàn tiền"]</h6>
                    <p class="text-sm mb-0">@Local["Click để khóa dịch vụ sau khi hoàn tiền"]</p>
                </div>
                <div class="card-body pt-4 p-2">
                    <div id="dtTablePaymentDetail" class="card-body pt-0 ps-0">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-5 mt-md-0 mt-4 form3" id="formRefund">
        <div class="card  mt-2">
            <div class="card-header pb-0">
                <div class="d-lg-flex">
                    <div class="col-auto my-auto">
                        <div class="h-100">
                            <h6 class="mb-0">@Local["Thông tin thanh toán"]</h6>
                            <p class="text-sm mb-0">@Local["Chi tiết thông tin thanh toán"] </p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-body pt-2 ">
                <div class="row px-1">
                    <div class="field col-12 px-1 mt-2">
                        <label>@Local["Chi nhánh"]</label>
                        <div class="ui fluid search selection dropdown form-control" id="BranchID">
                            <input type="hidden" name="branch" />
                            <i class="dropdown icon"></i>
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text">@Local["Chi nhánh"]</div>
                            <div id="ccbBranch" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row px-1">
                    <div class="field col-12 px-1 mt-2">
                        <label>@Local["Hình thức"]</label>
                        <div class="ui fluid search selection dropdown form-control" id="Method" onchange="PaymentReturn_MethodChange();">
                            <input type="hidden" name="paymentMethod" />
                            <i class="dropdown icon"></i>
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text">@Local["Hình thức"]</div>
                            <div id="ccbMethod" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                    <div class="field col-12 px-1 mt-2">
                        <label>@Local["Chi tiết"]</label>
                        <div class="ui fluid search selection dropdown form-control disabled" id="PaymentReturn_MethodType">
                            <input type="hidden" name="paymentMethodType" class="input payment" />
                            <i class="dropdown icon"></i>
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text">@Local["Chi tiết"]</div>
                            <div id="CbbPaymentReturn_MethodType" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                    <div id="dateCreated" class="field col-12 px-1 mt-2 d-none">
                        <label>@Local["Ngày tạo"]</label>
                        <input id="dateCreatedRefund" class="form-control flatpickr" type="text" placeholder="eg .@Local["Ngày tạo"]" />
                    </div>
                </div>

                <div class="row px-1">
                    <div class="field col-12 px-1 mt-2">
                        <label>@Local["Lý do"]</label>
                        <div class="ui fluid search selection dropdown form-control" id="ReasonReturn">
                            <input type="hidden" name="reasonReturn" />
                            <i class="dropdown icon"></i>
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text">@Local["Lý do"]</div>
                            <div id="ccbReasonReturn" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row px-1">
                    <div class="field col-12 px-1 mt-2">
                        <label>@Local["Tổng"]</label>
                        <input id="AmountPayment" type="text" class="form-control money" disabled>
                    </div>
                </div>
                <div class="row px-1">
                    <div class="field col-12 px-1 mt-2">
                        <label>@Local["Nội dung"]</label>
                        <textarea data-validation="content_customer" class="form-control _validation_option_" id="txtContentPayment" rows="3" name="content" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="fixed-botombutton pe-2">
    <div class="action_Save">
        <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
        <div class="action_Save-Content">
            <button class="btn btn-secondary" form="formRefund" onclick="CancelPaymentReturn()">@Local["Đóng"]</button>
            <button id="confirm_refund" class="btn btn-secondary" form="formRefund" onclick="Confirm_RefundPaidment()">@Local["Cập nhật"]</button>
            <button id="save_refund" form="formRefund" type="button" class="btn bg-gradient-primary mt-2 me-2" onclick="ExcuteData_Refund()"
                    disabled="disabled">
                @Local["Lưu"]
            </button>
        </div>
    </div>
</div>

<script>

    var DataUser, DataTeeth, DataService;
    var data_payment_customer = {};
    let ser_ChooseDateCustomer = "@Model._ChooseDateCustomer";
    let xhrPaymentDetail;
    let Data_PaymentReturn_MethodType = [];
    let data_payment_method = {};
    $(document).ready(function () {

        $("#dateCreatedRefund").flatpickr({
            dateFormat: 'd-m-Y H:i',
            enableTime: true,
            defaultDate: new Date()
        });

        if (ser_ChooseDateCustomer == "1") {
            $("#dateCreated").removeClass(' d-none')
        }

        Master_IndexDB_Reads(_Session_Data, [_Session_Teeth, _Session_User, _Session_Service]
            , function (data) {
                DataTeeth = data[0];
                DataUser = data[1];
                DataService = data[2];
                Customer_Payment_Return_LoadInitialize();
            });

        $("#save_refund").attr("disabled", true);
        document.getElementById("textShowMessage").innerHTML = "";
        $('#AmountPayment').divide();
        CountAllAmount();


    });

    function Customer_Payment_Return_LoadInitialize() {
        AjaxLoad(url = "/Customer/Payment/PaymentDetailReturn/?handler=LoadInitialize"
            , data = { "CustomerID": ser_MainCustomerID }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                let data = JSON.parse(result);

                Load_Combo(data.Branch, "ccbBranch", true);
                $("#BranchID").dropdown("refresh");
                $("#BranchID").dropdown("set selected", Master_branchID);

                Load_Combo(data.dataMethod, "ccbMethod", true);
                if (data.dataMethod.length > 0) {
                    $("#Method").dropdown("refresh");
                    $("#Method").dropdown("set selected", Number(data.dataMethod[0].ID));
                }
                data_payment_method = (data.dataMethod).reduce((pre, arr) => { if (arr.ID) pre[arr.ID] = arr;  return pre }, {});
                Load_Combo(data.dtReasonReturn, "ccbReasonReturn", true);

                if (data.dtReasonReturn.length > 0) {
                    $("#ReasonReturn").dropdown("refresh");
                    $("#ReasonReturn").dropdown("set selected", Number(data.dtReasonReturn[0].ID));
                }
                Data_PaymentReturn_MethodType = data.MethodType;

                let dataPaymentDetail = data.dataPayment;
                for (let i = 0; i < dataPaymentDetail.length; i++) {
                    let item = dataPaymentDetail[i];
                    let element = {};
                    element.TabID = item.TabID;
                    element.IsBlock = 0;
                    element.Amount = 0;
                    element.MaxAmount = Number(item.TabPaid);
                    element.ServiceName = item.TabName;
                    data_payment_customer[item.TabID] = element;
                }
                Render_PaymentRefund(dataPaymentDetail, "dtTablePaymentDetail");
            }
            , sender = null
            , before = function (e) {
                $("#loaderPaymentRefund").show();
            }
            , complete = function (e) {
                $("#loaderPaymentRefund").hide();
            }
        );


    }

    function ExcuteData_Refund() {
        Checking_Require_Validation('@Model._dtPermissionCurrentPage');
        if (document.getElementById("textShowMessage").innerHTML == "") {
            var data = new Object();
            let MethodType = $("#PaymentReturn_MethodType").dropdown("get value") ? Number($("#PaymentReturn_MethodType").dropdown("get value")) : 0;

            data.BranchID = Number($('#BranchID').dropdown('get value')) ? Number($('#BranchID').dropdown('get value')) : 0;
            data.MethodID = Number($('#Method').dropdown('get value')) ? Number($('#Method').dropdown('get value')) : 0;
            data.Content = $('#txtContentPayment').val() ? $('#txtContentPayment').val() : "";
            data.Amount = $('#AmountPayment').val() ? $('#AmountPayment').val() : 0;
            data.ReasonReturn = Number($('#ReasonReturn').dropdown('get value')) ? Number($('#ReasonReturn').dropdown('get value')) : 0;
            data.dateCreated = $('#dateCreatedRefund').val() ? $('#dateCreatedRefund').val() : new Date();
            data.PosType = (data.MethodID == 5 ? MethodType : 0);
            data.TransferType = (data.MethodID == 4 ? MethodType : 0);
            data.MedthodDetail = ((data.MethodID != 4 && data.MethodID != 5) ? MethodType : 0);
            var TotalPayment = !isNaN(Number(data.Amount)) ? Number(data.Amount) : 0;
            let dataDetail = [];

            let totalAmount = 0;
            let ServiceNameReturn = '';
            for ([key, value] of Object.entries(data_payment_customer)) {
                let amount = Number(value.Amount);
                if (amount > 0 && amount <= Number(value.MaxAmount)) {
                    totalAmount = totalAmount + amount;
                    let e = {};
                    e.ServiceID = value.ServiceID;
                    e.TabID = value.TabID;
                    e.Amount = value.Amount;
                    e.IsBlock = value.IsBlock;
                    if (Number(value.Amount) != 0) {
                       ServiceNameReturn += xoa_dau(value.ServiceName) + ',';
                    }
                    dataDetail.push(e);
                }
            }
            ServiceNameReturn = ServiceNameReturn.includes(',') ? ServiceNameReturn.slice(0, -1) : ServiceNameReturn;
            if (totalAmount === 0) {
                document.getElementById("textShowMessage").innerHTML = "@Local["Tổng tiền không thể bằng 0"]";
            }
            else {
                $('#formRefund').form('validate form');
                if ($('#formRefund').form('is valid') && data.Method_ID != 0) {
                    if (document.getElementById("textShowMessage").innerHTML == "") {
                        if (xhrPaymentDetail && xhrPaymentDetail.readyState != 4) xhrPaymentDetail.abort();
                        xhrPaymentDetail = AjaxLoad(url = "/Customer/Payment/PaymentDetailReturn/?handler=ExcuteData"
                            , data = {
                                'data': JSON.stringify(data),
                                'dataDetail': JSON.stringify(dataDetail),
                                'CustomerID': ser_MainCustomerID
                            }
                            , async = true
                            , error = function () { notiError_SW() }
                            , success = function (result) {
                                if (result != "0") {
                                    let datar = JSON.parse(result);
                                    if (datar != undefined && datar.length == 1 && datar[0]["Result"] != "0") {
                                        let _result = datar[0]["Result"];
                                        if (_result == "-1") notiError("@Local["Đã chốt sổ, không thể thêm thanh toán trước thời gian chốt"]");
                                        else {
                                            if (typeof LoadPaymentAjax === 'function') LoadPaymentAjax(datar[0].PaymentID, 'payment');
                                            if (typeof LoadCustomerPaymentInfo === 'function') LoadCustomerPaymentInfo();
                                            if (typeof SMSSYS_AfterPaid === 'function')
                                                SMSSYS_AfterPaid(_customerid = ser_MainCustomerID, _objCurrentID = { PaymentID: datar[0].PaymentID });
                                            if (typeof PaymentDetailReturn_UpdateThirdAccount === 'function')
                                                PaymentDetailReturn_UpdateThirdAccount(id = datar[0].PaymentID);
                                            let paymethod = Fun_GetName_ByID(data_payment_method, datar[0]["PayMethod"]);debugger
                                            let amount = formatNumber(datar[0]["Amount"]);
                                            syslog_cutpaid('i', datar[0]["Code"], ser_MainCustomerID, `${paymethod} ${amount} `);
                                            CancelPaymentReturn();
                                            notiSuccess();
                                            fcm_sendtopic("payment", Master_circleAvatar, sys_employeeName_Main, '- ' + formatNumber(totalAmount));
                                        }
                                    }
                                    else notiError_SW();
                                }
                                else notiError_SW();
                            }
                            , sender = $("#save_refund")
                        );
                    }
                }
            }
        }
    }

    function Confirm_RefundPaidment() {
        document.getElementById("textShowMessage").innerHTML = "";
        let Method_ID = Number($('#Method').dropdown('get value')) ? Number($('#Method').dropdown('get value')) : 0;
        CountAllAmount();
        if (Method_ID == 0) {
            document.getElementById("textShowMessage").innerHTML = '@Local["Chọn hình thức thanh toán"]';
        }
        if (document.getElementById("textShowMessage").innerHTML == '')
            $("#save_refund").attr("disabled", false);
        else $("#save_refund").attr("disabled", true);
    }
    function CountAllAmount() {
        var total = 0;
        var x = document.getElementsByClassName("tableftMoney");
        for (let i = 0; i < x.length; i++) {
            total = total + Number(x[i].value.replace(/,/g, ''));
            let haspaid = Number(x[i].getAttribute('data-tableft').replace(/,/g, ''));
            if (haspaid < Number(x[i].value.replace(/,/g, ''))) document.getElementById("textShowMessage").innerHTML
                = "@Local["Số tiền hoàn lớn hơn số tiền khách đã đóng"]";
        }
        $('#AmountPayment').val(total);
    }

    function PaymentReturn_MethodChange() {
        let MethodID = $("#Method").dropdown("get value") ? Number($("#Method").dropdown("get value")) : 0;
        $("#PaymentReturn_MethodType").dropdown("clear");
        $("#CbbPaymentReturn_MethodType").html("");

        let data = Data_PaymentReturn_MethodType.filter(item => item.Type == MethodID);
        Load_Combo(data, "CbbPaymentReturn_MethodType", true);

        if (data.length > 0) {
            $("#PaymentReturn_MethodType").removeClass('disabled');
            $("#PaymentReturn_MethodType input.payment").attr('name', "paymentMethodType");
        }
        else {
            $("#PaymentReturn_MethodType").addClass('disabled');
            $("#PaymentReturn_MethodType input.payment").attr('name', "");
        }
    }

    //#region //ThirdAccount
    function PaymentDetailReturn_UpdateThirdAccount(id) {
        if (typeof syn_Accountbrand != 'undefined' && syn_Accountbrand && syn_Accountbrand != "") {
            APIAccount_Excute(currentID = id, type = 2, action = "save"
                , beforefunc = function () { }
                , successfunc = function (e) {
                    if (typeof LoadPaymentAjax == 'function') LoadPaymentAjax(id, 'payment');
                }
                , failfunc = function (message) { }
                , completefunc = function () { }
            );
        }
    }
    //#endregion
</script>
<style>

    .remove_amount {
        display: none;
    }
</style>
<script>js_require('/js/main.js');</script>
<script>js_require('/js/customjs/custom-validation.js');</script>

