@page
@model MLunarCoffee.Pages.Customer.Payment.PaymentList.PaymentList_CardModel
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require_notasync('/assests/dist/ColorPicker/spectrum.js', true);</script>
<link href="/assests/dist/ColorPicker/spectrum.css" rel="stylesheet" />
<div class="container-fluid py-0 px-0">
    <div class="row">
        <div class="col-12">
            <!--Master-->
            <div class="card card-plain" id="Div_Payment_List_Card_Master">
                <div class="card-header py-0">
                    <div class="d-lg-flex">
                        <ul class="nav nav-pills p-1 bg-transparent permissionlist" role="tablist">
                            <li class="nav-item" role="presentation">
                                <a class="nav-link cursor-pointer  " data-bs-toggle="collapse" href="#dtContentPaymentCard_infodes">
                                    <i class="text-gradient  text-lg text-primary fas fa-info-circle"></i>
                                </a>
                            </li>
                        </ul>
                        <div class="ms-auto my-auto mt-1">
                            <button class="btn bg-gradient-primary btn-sm mt-1 _tab_control_" data-tab="add_tab_payment_card" onclick="addNewPaymentCard()">@Local["Thu tiền"]</button>
                            <button class="btn btn-dark btn-sm mt-1 _tab_control_" data-tab="add_tab_payment_return_card" onclick="addNewPaymentReturnCard()">@Local["Hoàn tiền"]</button>
                            <div class="position-relative d-inline">
                                <button class="btn btn-dark btn-sm mt-1 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                                    @Local["Xem thêm"]
                                </button>
                                <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                                    <ul class="card card-body text-dark text-capitalize opacity-10">
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="consultant_CG_BS" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Tư vấn"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="detail" type="checkbox" checked>
                                            </div>
                                            <p class="text-sm">@Local["Chi tiết"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="created" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Thông tin tạo"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="sign" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Chữ ký"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="billcode" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Mã hóa đơn"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="thirdaccounting" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Dữ liệu kế toán"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="branch" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Chi nhánh"]</p>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="dtContentPaymentCard_infodes" class="border-dashed border-1 border-secondary border-radius-md p-3 text-sm text-dark ms-1 mb-2 mt-2 multi-collapse collapse">
                        <h6 class="mb-0">@Local["Quy định chỉnh sửa"]</h6>
                        <p class="text-sm mb-0">@Local["Xóa trong ngày. Chỉ người tạo mới được quyền xóa"]</p>
                    </div>
                </div>
                <div class="card-body pt-2 position-relative">
                    <div class="card px-3 shadow-lg position-absolute z-index-3 max-width-200" id="formMakeColorPaymentCard"
                         onsubmit="event.preventDefault(); return false;" style="display: none;">
                        <div class="row p-3 pb-0">
                            <label class="ps-0  text-dark font-weight-normal text-sm">@Local["Mã màu"]</label>
                            <input class="form-control" id="ColorCodeMarkPaymentCard" name="fillCode" type="color" />
                            <hr class="mt-3 horizontal dark">
                            <button type="button" class="btn btn-primary btn-sm" onclick="ExcuteDataMakeColorPaymentCard()">@Local["Lưu"]</button>
                            <button type="button" class="btn btn-secondary btn-sm" onclick="CancelMakeColorPaymentCard()">@Local["Đóng"]</button>
                        </div>
                    </div>
                    <div class="m-0 mb-3 mobile-responsive" style="max-height:80vh;">
                        <div id="payment_list_card_waiting" class="waitingdiv text-center" style="display: none;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div class="sheet_cart_load_empty" id="PaymentCard_List_Empty" style="display:none">
                            no content
                        </div>

                        <table data-name="ContentPaymentCard" class="table vt-table mb-0" id="dtContentPaymentCard">
                            <thead>
                                <tr>
                                    <th class="d-none">ID</th>
                                    <th style="width: 25px;">@Local["#"]</th>
                                    <th>@Local["Mã phiếu"]</th>
                                    <th>@Local["Hình thức thanh toán"]</th>
                                    <th>@Local["Tổng tiền"]</th>
                                    <th data-name="consultant_CG_BS">@Local["Tư vấn"]</th>
                                    <th data-name="created">@Local["Người tạo"]</th>
                                    <th data-name="billcode">@Local["Mã hóa đơn"]</th>
                                    <th data-name="branch">@Local["Chi nhánh"]</th>
                                    <th data-name="detail">@Local["Chi tiết"]</th>
                                    <th data-name="sign">@Local["Chữ ký"]</th>
                                    <th style="min-width: 150px;" data-name="thirdaccounting">@Local["Dữ liệu kế toán"]</th>
                                    <th>@Local["Xử lý"]</th>
                                </tr>
                            </thead>
                            <tbody id="dtContentPaymentCardBody">
                            </tbody>
                        </table>
                    </div>
                    <button id="PLC_btnloadMore" class="btn btnsysmore btn-secondary w-100 p-1 mt-1 mb-0 position-relative" style="pointer-events: auto;" onclick="event.preventDefault(); return LoadPaymentCardAjax(0, 1);">
                        @Local["Xem thêm"]
                    </button>
                </div>
            </div>
            <div id="Div_Payment_List_Card_Detail">
            </div>
        </div>
    </div>

</div>

<script type="text/javascript">
    var ser_PaymentCardID = 0;
    let shtable;
    let DataUser;
    let PLC_data;
    let PLC_limit = 100, PLC_beginID = 0;
    let PLC_isDoneLoadMore = false;
    $(document).ready(function () {
        shtable = $("#dtContentPaymentCard").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        $("#ColorCodeMarkPaymentCard").spectrum({
            showPaletteOnly: true,
            togglePaletteOnly: true,
            showInput: true,
            color: '#ffffff',
            palette: [
                ["#f00", "#f90", "#ff0", "#0f0", "#0ff", "#00f", "#90f", "#f0f"],
                ["#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#cfe2f3", "#d9d2e9", "#ead1dc"],
                ["#ea9999", "#f9cb9c", "#ffe599", "#b6d7a8", "#a2c4c9", "#9fc5e8", "#b4a7d6", "#d5a6bd"],
                ["#e06666", "#f6b26b", "#ffd966", "#93c47d", "#76a5af", "#6fa8dc", "#8e7cc3", "#c27ba0"],
            ]
        });
        $('#dtContentPaymentCard tbody').on('click', '.payment_card_mark_color', function () {
            ser_PaymentCardID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            let ColorCode = $(this).attr("data-color");
            if (ser_PaymentCardID != 0) {
                let pos_top = $(this).parent().position().top + $(this).parent().height() / 2;
                let pos_left = $(this).parent().position().left;
                $("#formMakeColorPaymentCard").css({
                    "display": "block"
                    , "left": pos_left - 10
                    , "top": pos_top - 60
                }).animate({
                    left: pos_left + 10
                    , top: pos_top - 60
                }, 300);
                $("#ColorCodeMarkPaymentCard").spectrum("set", ColorCode);
            }
        });
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data) {
                DataUser = data[0];
                LoadPaymentCardAjax(0, 0);
                EventPaymentCustomerCard();
            })
        Checking_TabControl_Permission();
    });

    //#region // Load list
    function LoadPaymentCardAjax(PLC_currentID = 0, PLC_isLoadMore = 0) {
        if (PLC_currentID == 0 && PLC_isLoadMore == 0) {
            PLC_data = [];
            PLC_beginID = 0;
            PLC_isDoneLoadMore = false;
            $('#dtContentPaymentCardBody').html('');
        }

        AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Card/?handler=LoadataPaymentCard"
            , data =
            {
                'CustomerID': ser_MainCustomerID
                , 'id': PLC_currentID
                , 'limit': PLC_limit
                , 'beginID': PLC_beginID
            }
            , async = true
            , error = null
            , success = function (result) {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    if (PLC_currentID == 0) {
                        PLC_data = PLC_data.concat(data);
                        PLC_beginID = data[data.length - 1].ID;
                        fnRenderBlock(data, "dtContentPaymentCardBody"
                            , blocknum = 50
                            , fnrender = RenderTablePaymentCard
                            , fnsuccess = function (e) { }
                            , fnbegin = function (e) { }
                        );
                    }
                    else {
                        if (data && data.length != 0) {
                            if ($('#PLC_rowContent_' + PLC_currentID).length > 0) {
                                PLC_data = PLC_data.reduce((pre, arr) => {
                                    if (arr.ID == data[0].ID) arr = data[0];
                                    pre.push(arr);
                                    return pre;
                                }, []);
                                $('#PLC_rowContent_' + PLC_currentID).replaceWith(PLC_RenderEach(data[0]));
                                EventPaymentCustomerCard();
                            }
                            else {
                                if (PLC_isDoneLoadMore) {
                                    PLC_data.push(data[0]);
                                    $('#dtContentPaymentCardBody').prepend(PLC_RenderEach(data[0]));
                                    EventPaymentCustomerCard();
                                }
                                else {
                                    LoadPaymentCardAjax(0, 0);
                                }
                            }
                        }
                        else {
                            if ($('#PLC_rowContent_' + PLC_currentID).length > 0) {
                                PLC_data = PLC_data.filter(word => {
                                    return word.ID != PLC_currentID
                                })
                                $('#PLC_rowContent_' + PLC_currentID).remove();
                            }
                        }
                    }
                }
                else if (result == "[]") {
                    if (PLC_isLoadMore == 1) {
                        $("#PLC_btnloadMore").hide();
                        PLC_isDoneLoadMore = true;
                    }
                    else {
                        if (PLC_currentID != 0) {
                            if ($('#PLC_rowContent_' + PLC_currentID).length > 0) {
                                PLC_data = PLC_data.filter(word => {
                                    return word.ID != PLC_currentID
                                })
                                $('#PLC_rowContent_' + PLC_currentID).remove();
                            }
                        }
                        else {
                            
                        }
                    }
                }
                else {
                    notiError_SW();
                }
                shtable.Refresh();
            }
            , before = function () {
                $("#payment_list_card_waiting").show();
            }
            , complete = function (e) {
                $("#payment_list_card_waiting").hide();
            });
    }
    //#endregion

    //#region // Render Data
    function RenderTablePaymentCard_Invoice(ID, MarkColor, InvoiceNum, Created) {
        let result = '<div class="d-flex align-items-center">'
            + '<div style="background-color:' + MarkColor + '" data-color="' + MarkColor + '" data-paymentid="' + ID + '" class="payment_card_mark_color icon icon-shape icon-xs me-3 shadow text-center " >'
            + '</div>'
            + '<div class="d-flex flex-column">'
            + '<h6 class="mb-1 text-dark text-sm">' + InvoiceNum + '</h6>'
            + '<span class="text-xs">' + GetDateTime_String_DMY(Created) + '</span>'
            + '</div>'
            + '</div>'
        return result;
    }

    function RenderTablePayment_Type(Amount, MethodName, MethodNameLangKey, Pos, Transfer) {
        let ty = Amount > 0 ? '<i class="text-success fas fa-plus"></i>' : '<i class="text-danger fas fa-minus"></i>';
        let method = author_get("UserLang") == 'en' ? Outlang[MethodNameLangKey] : MethodName;
        let result = '<div class="d-flex p-2 align-items-center">'
            + ty
            + '<span class="ps-3">' + method + Pos + Transfer + '</span>'
            + '</div>';

        return result;

    }

    function RenderTablePaymentCard_Detail(ServiceName, Payment, Content) {
        let classname = (Payment > 0) ? 'fa-plus text-success' : 'fa-minus text-danger';
        let result = '<div class="card-header p-0">'
            + '<p class="text-sm mb-0 px-3">'
            + Content
            + '</p>'
            + '</div>'
            + '<div class="card-body px-2 py-1">'
            + '<div class="ps-2 mb-0">'
            + '<p class="text-sm m-0">'
            + '<i class="fa ' + classname + ' pe-2"></i> '
            + '<span class="font-weight-bold pe-2">' + formatNumber(Math.abs(Payment)) + '</span>'
            + ServiceName
            + '</p>'
            + '</div>'
            + '</div>'
        return result;
    }
    function RenderTablePaymentCard_PaymentDeposit(PaymentDes) {
        let result = '<div class="card-body px-2 py-1">'
            + '<div class="ps-2 mb-0">'
            + '<p class="text-sm m-0">'
            + '<i class="fa fa-minus text-danger pe-2"></i> '
            + '<span class="font-weight-bold pe-2">' + formatNumber(Math.abs(PaymentDes)) + '</span>'
            + '@Local["Sử dụng tiền cọc"]'
            + '</p>'
            + '</div>'
            + '</div>'
        return result;
    }
    async function RenderTablePaymentCard(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = PLC_RenderEach(item);
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                        EventPaymentCustomerCard();
                        shtable.Refresh();
                    }
                }
                resolve();
            }, 30)
        })
    }

    function PLC_RenderEach(item) {
        try {
            let totalPayment = item.Amount, PaymentDeposit = Number(item.PaymentDeposit);
            let obj = Fun_GetObject_ByID(DataUser, item.Created_By);
            let name = (obj != null && obj.EmployeeName != undefined) ? obj.EmployeeName : 'unknown';
            let img = (obj != null) ? obj.Avatar : Master_Default_Pic;
            let ThirdAccount = PaymentList_Card_ThirdAccount(item?.AccountingRefid, item?.AccountingIsSuccess);
            let contentDetail = '';
            contentDetail = contentDetail + RenderTablePaymentCard_Detail(item.ServiceName, item.Payment, item.Content)
            if (PaymentDeposit != 0) contentDetail += RenderTablePayment_PaymentDeposit(PaymentDeposit);
            let isRefund = (item?.Amount < 0) ? 1 : 0;
            let strSign = '';
            if (item.IsSign != '')
                strSign = `<a data-id="${item.ID}" class="text-sm buttonSignClassPaymentCard text-primary d-block text-center">@Local["Đã ký tên"]</a>`
            else
                strSign = `<a data-id="${item.ID}" class="text-sm buttonSignClassPaymentCard text-secondary d-block text-center">@Local["Ký tên"]</a>`
            let tr =
                '<td class="d-none">' + item.ID + '</td>'

                + '<td class="vt-number-order"></td>'
                + '<td>'
                + RenderTablePaymentCard_Invoice(item.ID, item.MarkColor, item.InvoiceNum, item.Created)
                + '</td> '
                + '<td>' + RenderTablePayment_Type(item.Payment, item.MethodName, item.MethodNameLangKey, item.PosType, item.TransferType) + '</td>'
                + '<td>'
                + '<span class="">'
                + formatNumber(item.Amount)
                + '<span>'
                + '</td> '
                + '<td data-name="consultant_CG_BS">' + item.Consultant + '</td>'
                + '<td data-name="created">'
                + '<div class="d-inline"><img class="avatar avatar-xs me-2" src="' + img + '" alt="label-image" />'
                + '<span>' + name + '</span>'
                + '</div>'
                + '</td> '
                + '<td data-name="billcode">' + item.BillCode + '</td> '
                + '<td data-name="branch">' + item.BranchName + '</td> '
                /*   + '<td data-name="content">' + item.Content + '</td> '*/
                + '<td data-name="detail">'
                + contentDetail
                + '</td>'
                + '<td data-name="sign" class="text-center">'
                + strSign
                + '</td>'
                + `<td id="PayCard_ThirdAccount_${item.ID}" class="${ThirdAccount.status} text-center"  data-isRefund="${isRefund}" data-name="thirdaccounting">${ThirdAccount.value}</td>`
                + '<td>'
                + '<div class="text-nowrap">'
                + RenderTablePaymentCard_Button(item.ID, item.InvoiceNum, item.DeleteButton)
                + '</div></td>';
            tr = `<tr id="PLC_rowContent_${item.ID}" role="row" class="vt-number CLS_clsRowContent cursor-pointer vt-number">${tr}</tr>`
            return tr;
        }
        catch (ex) {
            return '';
        }
    }

    function RenderTablePaymentCard_Button(id, code, isDelete) {

        return Render_Button_Grid(
            ['<button class="buttonGrid" value="' + id + '"><i datacode="' + code + '" class="buttonPrintClass vtt-icon vttech-icon-print"></i></button>'
                , (isDelete == 1) ? '<button class="buttonGrid _tab_control_" data-tab="delete_tab_payment" value="' + id + '"><i  class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>' : ''
            ]);

    }

    //#endregion

    //#region //THIRD ACCOUNTING
    function PaymentList_Card_ThirdAccount(refid, issuccess) {
        let result = { status: '', value: '' };
        refid ??= '', issuccess ??= 0;
        if (refid != '') {
            if (issuccess == 1) {
                result.value = decodeHtml('@Local["Đã đồng bộ"]')
                result.status = 'text-success'
            }
            else {
                result.value = decodeHtml('@Local["Đang đồng bộ"]')
                result.status = 'text-secondary'
            }
        }
        return result;
    }
    //#endregion


    //#region //action
    function EventPaymentCustomerCard() {
        $('#dtContentPaymentCard tbody').on('click', '.buttonSignClassPaymentCard', function (event) {
            let ID = $(this).attr("data-id");
            AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Card/?handler=GetSign_Payment"
                , data = {
                    'id': ID
                }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result) {
                    if (result != "0") {
                        let _sigdata = JSON.parse(result);
                        let _datasign = '';
                        if (_sigdata != undefined && _sigdata.length == 1) _datasign = _sigdata[0].SignData;
                        Signature_Executed_PaymentCard(ID, _datasign);
                    }
                }
            );

        });
        $('#dtContentPaymentCard tbody').on('click', '.buttonPrintClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            let code = $(this).attr("datacode");
            syslog_cutpaid('p', code, ser_MainCustomerID);

            $("#DetailModal_Content").html('');
            $("#DetailModal_Content").load('/Print/print?Type=invoice_card&DetailID=' + ID);
            $('#DetailModal').modal('show');


        });
        $('#dtContentPaymentCard tbody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            DeletePaymentCardList(ID);
        });
    }

    //#endregion

    // #region // function
    function DeletePaymentCardList(id) {
        const promise = notiConfirm();
        promise.then(function () { ExecuteDeletePaymentCard(id); }, function () { });
    }

    function ExecuteDeletePaymentCard(id) {
        AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Card/?handler=DeleteItemCard"
            , data = { 'id': id, 'CustomerID': ser_MainCustomerID }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    let data = JSON.parse(result);

                    if ((data[0]?.Result ?? 0) == 1) {
                        if (typeof Tab_PayCard_DelThirdAccounting === 'function') Tab_PayCard_DelThirdAccounting(id); 
                        LoadPaymentCardAjax(id, 0);
                        fcm_sendtopic("payment", Master_circleAvatar, sys_employeeName_Main, '@Local["Xóa thanh toán"]');
                        syslog_cutpaid('d', data[0]?.Code, ser_MainCustomerID, `${formatNumber(data[0]["Amount"])}`);
                        if (typeof LoadCustomerPaymentInfo !== 'undefined' && $.isFunction(LoadCustomerPaymentInfo)) {
                            LoadCustomerPaymentInfo();
                        }
                    }
                    else {
                        notiError_SW();
                    }
                } else {
                    notiError_SW();
                }
            }
        );
    }

    //#region //ThirdAccount Delete
    function Tab_PayCard_DelThirdAccounting(id) {
        let isRefund = $(`#PayCard_ThirdAccount_${id}`).attr('data-isRefund');
        let type = (isRefund == 0) ? 5 : 6;
        if (typeof syn_Accountbrand != 'undefined' && syn_Accountbrand && syn_Accountbrand != "") {
            APIAccount_Excute(id, type = type, action = "del"
                , beforefunc = function () { }
                , successfunc = function (e) {
                    if (e && e?.refguid != "") {
                        syslog_misa('d', code, ser_MainCustomerID);
                    }
                }
                , failfunc = function (message) { notiWarning(message) }
                , completefunc = function () { }
            );
        }
    }
    //#endregion
    async function Signature_Executed_PaymentCard(id, dataSign) {
        await Signature_Action(dataSign, 0);
        if (Signature_ResultSignation != "") {
            AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Card/?handler=UpdateSign_PaymentCard"
                , data = { 'id': id, 'sign': Signature_ResultSignation }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result) {
                    if (result != "0") {
                        LoadPaymentCardAjax(id, 0);
                        syslog_cutpaid('s', result, ser_MainCustomerID);
                    }
                }
            );
        }

    }
    function addNewPaymentCard() {
        $("#Div_Payment_List_Card_Detail").empty();
        $("#Div_Payment_List_Card_Detail").load("/Customer/Payment/PaymentCardDetail?CustomerID=" + ser_MainCustomerID + "&ver=" + versionofWebApplication,
            function () {
                $("#Div_Payment_List_Card_Master").hide();
                $("#Div_Payment_List_Card_Detail").show();
            });
    }
    function addNewPaymentReturnCard() {
        $("#Div_Payment_List_Card_Detail").empty();
        $("#Div_Payment_List_Card_Detail").load("/Customer/Payment/PaymentCardDetailReturn?CustomerID=" + ser_MainCustomerID + "&ver=" + versionofWebApplication, function () {
            $("#Div_Payment_List_Card_Master").hide();
            $("#Div_Payment_List_Card_Detail").show();
        });
    }
    function CancelPaymentCardDetail() {
        $("#Div_Payment_List_Card_Detail").empty();
        $("#Div_Payment_List_Card_Master").show();
    }

    //Payment Card Mark Color
    function ExcuteDataMakeColorPaymentCard() {
        if (ser_PaymentCardID != 0) {
            let ColorCode = $("#ColorCodeMarkPaymentCard").spectrum('get').toHexString();
            AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Card/?handler=PaymentCardMarkColor"
                , data = { 'id': ser_PaymentCardID, 'colorcode': ColorCode }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result) {
                    if (result == "1") {
                        CancelMakeColorPaymentCard();
                        let mark_color = $('.payment_card_mark_color[data-paymentid="' + ser_PaymentCardID + '"]');
                        if (mark_color.length > 0) {
                            mark_color.css({ "border-color": ColorCode });
                            mark_color.attr("data-color", ColorCode);
                            $('.payment_card_mark_color[data-paymentid="' + ser_PaymentCardID + '"]').css({ "background-color": ColorCode });
                        }

                    } else {
                        notiError_SW();
                    }
                }
            );
        }

    }
    function CancelMakeColorPaymentCard() {
        $("#formMakeColorPaymentCard").hide();
    }

    // #endregion

</script>
<script>js_require('/js/main.js');</script>

