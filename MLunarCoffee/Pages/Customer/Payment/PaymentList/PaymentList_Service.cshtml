@page
@model MLunarCoffee.Pages.Customer.Payment.PaymentList.PaymentList_ServiceModel
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<link href="/assests/dist/ColorPicker/spectrum.css" rel="stylesheet" />
<div class="container-fluid py-0 px-0">
    <div class="row">
        <div class="col-12">
            <div class="card card-plain" id="Div_Payment_List_Service_Master">
                <div class="card-header py-0">
                    <div class="d-lg-flex mb-2 align-items-center">
                        <ul class="nav nav-pills p-1 bg-transparent" role="tablist">
                            <li class="nav-item" role="presentation">
                                <a class="nav-link cursor-pointer  " data-bs-toggle="collapse" href="#lbTotalAmount_infodes">
                                    <i class="text-gradient  text-lg text-primary fas fa-info-circle"></i>
                                </a>
                            </li>
                        </ul>
                        <div class="row  mx-0 d-flex gap-3">
                            <div class="col-w-150 border border-5 border-bottom-0 border-top-0 border-end-0 border-success py-1 bg-gray-100 rounded-2 border-radius-top-start-0 border-radius-bottom-start-0">
                                <p class="text-sm text-dark mb-0 text-capitalize">@Local["Dịch vụ"]</p>
                                <h6 id="lbTotalAmount_Service" class="font-weight-bolder mb-0">0</h6>
                            </div>
                            <div class="col-w-150 border border-5 border-bottom-0 border-top-0 border-end-0 border-success py-1 bg-gray-100 rounded-2 border-radius-top-start-0 border-radius-bottom-start-0">
                                <p class="text-sm text-dark mb-0 text-capitalize ">@Local["Sản phẩm"]</p>
                                <h6 id="lbTotalAmount_Product" class="font-weight-bolder mb-0">0</h6>
                            </div>
                            <div class="col-w-150 border border-5 border-bottom-0 border-top-0 border-end-0 border-warning py-1 bg-gray-100 rounded-2 border-radius-top-start-0 border-radius-bottom-start-0">
                                <p class="text-sm text-dark mb-0 text-capitalize">@Local["Tiền cọc"]</p>
                                <h6 id="lbTotalAmount_Other" class="font-weight-bolder mb-0"></h6>
                            </div>
                        </div>
                        <div class="ms-auto my-auto pt-2 mt-1 text-end">
                            <button class="btn bg-gradient-primary btn-sm " onclick="paylist_print()" data-bs-toggle="tooltip" data-bs-original-title="@Local["In thanh toán của dịch vụ"]" id="per_CustPrintPaymentByDate">@Local["In theo ngày"]</button>
                            <button id="btn_unlockpaymentfull" class="btn bg-gradient-danger btn-sm _tab_control_"
                                    data-tab="unlock_payment" onclick="unlockpayment()" style="display:none;">
                                @Local["Mở khóa"]
                            </button>
                            <div class="btn-group ">
                                <a class="btn btn-dark btn-sm px-3">@Local["Tiền cọc"]</a> 
                                <a class="_tab_control_ btn btn-dark border-start border-light btn-sm px-3" onclick="addNewDesposit()" data-tab="add_tab_payment_deposit">
                                    <i class="ni text-white fa fa-plus"></i>
                                </a>
                                <a class="_tab_control_ btn btn-dark border-start border-light btn-sm px-3" onclick="returnDesposit()" data-tab="add_tab_payment_return_deposit">
                                    <i class="ni text-white fa fa-minus"></i>
                                </a>
                            </div>
                            <div class="btn-group ">
                                <a class="btn btn-dark btn-sm px-3">@Local["Dịch vụ/sản phẩm"]</a>
                                <a class="_tab_control_ btn btn-dark border-start border-light btn-sm px-3" onclick="event.preventDefault(); return addNewPayment()" data-tab="add_tab_payment_service">
                                    <i class="ni text-white fa fa-plus"></i>
                                </a>
                                <a class="_tab_control_ btn btn-dark border-start border-light btn-sm px-3" onclick="event.preventDefault(); return addNewPaymentReturn()" data-tab="add_tab_payment_return">
                                    <i class="ni text-white fa fa-minus"></i>
                                </a>
                            </div>

                            <div class="position-relative d-inline">
                                <button class="btn btn-dark btn-sm position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                                    @Local["Xem thêm"]
                                </button>
                                <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                                    <ul class="card card-body text-dark text-capitalize opacity-10">

                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="detail" type="checkbox" checked>
                                            </div>
                                            <p class="text-sm">@Local["Chi tiết"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="created" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Thông tin tạo"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="einvoice" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["HĐĐT"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="thirdaccounting" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Dữ liệu kế toán"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="sign" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Chữ ký"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="signdate" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Ngày ký"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="billcode" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Mã hóa đơn"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="fileattach" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Tệp đính kèm"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="branch" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Chi nhánh"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="note" type="checkbox">
                                            </div>
                                            <p class="text-sm mb-0">@Local["Nội dung"]</p>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="lbTotalAmount_infodes" class="border-dashed border-1 border-secondary border-radius-md p-3 text-sm text-dark ms-1 mb-4 mt-2 multi-collapse collapse">
                        <h6 class="mb-0">@Local["Quy định chỉnh sửa"]</h6>
                        <p class="text-sm mb-0">@Local["Xóa trong ngày. Chỉ người tạo mới được quyền xóa"]</p>
                    </div>
                </div>
                
                <div class="card-body pt-2 position-relative">
                    <div id="psd_waiting" class="waitingdiv text-center position-absolute top-0 start-50 translate-middle-x" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div class="card px-3 shadow-lg position-absolute z-index-3 max-width-200" id="formMakeColorPayment" onsubmit="event.preventDefault(); return false;" style="display: none;">
                        <div class="row p-3 pb-0">
                            <label class="ps-0  text-dark font-weight-normal text-sm">@Local["Mã màu"]</label>
                            <input class="form-control" id="ColorCodeMarkPayment" name="fillCode" type="color" />
                            <hr class="mt-3 horizontal dark">
                            <button type="button" class="btn btn-primary btn-sm" onclick="ExcuteDataMakeColorPayment()">@Local["Lưu"]</button>
                            <button type="button" class="btn btn-secondary btn-sm" onclick="CancelMakeColorPayment()">@Local["Đóng"]</button>
                        </div>
                    </div>
                    <div class="m-0 mb-3 mt-0 mobile-responsive vt-header-sticky overflow-auto" style="max-height:80vh;">

                        <div class="sheet_cart_load_empty" id="Payment_List_Empty" style="display:none">
                            no content
                        </div>
                        <table data-name="ContentPayment" class="table vt-table mb-0" id="dtContentPayment">
                            <thead>
                                <tr>
                                    <th class="d-none">ID</th>
                                    <th class="d-none">TypeID</th>
                                    <th style="width: 25px;">#</th>
                                    <th>@Local["Mã phiếu"]</th>
                                    <th>@Local["Hình thức thanh toán"]</th>
                                    <th>@Local["Tổng tiền"]</th>
                                    <th data-name="billcode">@Local["Mã hóa đơn"]</th>
                                    <th data-name="fileattach" style="min-width: 200px;">@Local["Tệp đính kèm"]</th>
                                    <th data-name="branch">@Local["Chi nhánh"]</th>
                                    <th data-name="detail">@Local["Chi tiết"]</th>
                                    <th data-name="created">@Local["Người tạo"]</th>
                                    <th data-name="sign">@Local["Chữ ký"]</th>
                                    <th data-name="signdate">@Local["Ngày ký"]</th>
                                    <th data-name="einvoice">@Local["HĐĐT"]</th>
                                    <th style="min-width: 150px;" data-name="thirdaccounting">@Local["Dữ liệu kế toán"]</th>
                                    <th data-name="note">@Local["Nội dung"]</th>
                                    <th>@Local["Xử lý"]</th>
                                </tr>
                            </thead>
                            <tbody id="dtContentPaymentBody">
                            </tbody>
                        </table>

                    </div>
                    <button id="btnmorepay" class="btn btnsysmore btn-secondary w-100 p-1 "
                            onclick="event.preventDefault(); return PSD_Viewmore();">
                        @Local["Xem thêm"]
                    </button>
                </div>
            </div>
            <div id="Div_Payment_List_Service_Detail">
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    let DataUser;
    var ser_PaymentID = 0;
    let shtable;
    let ser_PaymentIsLock;
    let PS_Blockindex = 0;
    let PS_Splitdata = [];
    let PS_DataDetail=[];
    $(document).ready(function ()
    {
        shtable = $("#dtContentPayment").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data)
            {
                DataUser = data[0];
                LoadPaymentAjax(curid = 0, curtype = "");
                PaymentChecking_Lock();
            });
        $("#ColorCodeMarkPayment").spectrum({
            showPaletteOnly: true,
            togglePaletteOnly: true,
            showInput: true,
            color: '#ffffff',
            palette: [
                ["#f00", "#f90", "#ff0", "#0f0", "#0ff", "#00f", "#90f", "#f0f"],
                ["#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#cfe2f3", "#d9d2e9", "#ead1dc"],
                ["#ea9999", "#f9cb9c", "#ffe599", "#b6d7a8", "#a2c4c9", "#9fc5e8", "#b4a7d6", "#d5a6bd"],
                ["#e06666", "#f6b26b", "#ffd966", "#93c47d", "#76a5af", "#6fa8dc", "#8e7cc3", "#c27ba0"],
            ]
        });
        $(".border_left").popup({
            transition: "scale up",
            position: "top right"
        });
        ToolPopper();
        EventHandlePaymentCustomer();
        Payment_Out_Click();
        CheckPermissionControlInPage(sys_PerControlMH, '@Model._dtPermissionCurrentPage');
    });

    function LoadPaymentAjax (curid, curtype)
    {
        curid = curid != undefined ? curid : 0;
        curtype = curtype != undefined ? curtype : "";
        AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Service/?handler=LoadataPayment"
            , data = {
                'CustomerID': ser_MainCustomerID
                , "CurrentID": curid
                , "CurrentType": curtype
            }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result)
            {
                if (result != "") {
                    let datas = JSON.parse(result);
                    let data = datas.Table;
                    PS_DataDetail = datas.Table1;
                    let datainfo = datas.Table2;
                    if (curid != 0 && curtype!="") {
                        if (data.length == 1) {
                            let tr = RenderTablePayment_Each(data[0], PS_DataDetail); 
                            if ($('#custpaid' + curtype + curid.toString()).length)
                                $('#custpaid' + curtype + curid.toString()).replaceWith(tr);
                            else {
                                $('#dtContentPaymentBody').prepend(tr);
                            }
                            shtable.Refresh();
                            Checking_TabControl_Permission();
                        }
                        else $('#custpaid' + curtype + curid.toString()).remove();
                    }
                    else {
                        PS_Blockindex = 0;
                        $('#dtContentPaymentBody').html('');
                        PS_Splitdata = sliceIntoChunks(data, 200);
                        PSD_Viewmore();
                    }
                    LoadTotalPayment(datainfo);
                }
            }
            , sender = $('#btnmorepay')
            , before = function (e)
            {
                $("#psd_waiting").show();
            }
            , complete = function (e)
            {
                $("#psd_waiting").hide();
            }
        );
    }

    function PSD_Viewmore () {
        var p = PSD_ViewmoreBlock(data = PS_Splitdata
            , id = "dtContentPaymentBody"
            , index = PS_Blockindex
            , fnrender = RenderTablePayment
            , fnsuccess = function () {
                $("#psd_waiting").hide();
            }
            , fnbegin = function () {
                $("#psd_waiting").show();
            });
        p.then(function (v) {
            PS_Blockindex = v;
            if (PS_Blockindex <= PS_Splitdata.length) {
                $('#btnmorepay').show();
            }
            else $('#btnmorepay').hide();
        });
    }
    async function PSD_ViewmoreBlock (data, id, index, fnrender, fnsuccess, fnbegin) {
        if (typeof fnbegin === 'function') fnbegin();
        return new Promise((resolve, reject) => {
            fnrender(data[index], PS_DataDetail, id);
            index = index + 1;
            if (typeof fnsuccess === 'function') fnsuccess();
            resolve(index);
        });
    }
    function LoadTotalPayment(data)
    {
        if (data != undefined  && data.length==1) {
            $("#lbTotalAmount_Service").html(formatNumber(data[0].ServicePaid))
            $("#lbTotalAmount_Product").html(formatNumber(data[0].ProductPaid))
            $("#lbTotalAmount_Other").html(formatNumber(data[0].Deposit))
        }
    }
    function PaymentChecking_Lock()
    {
        AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Service/?handler=CheckingLock"
            , data = { 'CustomerID': ser_MainCustomerID }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result)
            {
                ser_PaymentIsLock = Number(result);
                if (ser_PaymentIsLock == 1) {
                    let objs = $("#divCustomerTabContent [data-tab='/Customer/PaymentList?CustomerID=']");
                    if (objs != undefined && objs.length == 1) objs.addClass('locked');
                    $('#btn_unlockpaymentfull').show();
                }
                else {
                    let objs = $("#divCustomerTabContent [data-tab='/Customer/PaymentList?CustomerID=']");
                    if (objs != undefined && objs.length == 1) objs.removeClass('locked');
                    $('#btn_unlockpaymentfull').hide();
                }
            }
        );
    }

    //#region //Event Handle Payment

    function EventHandlePaymentCustomer()
    {
        $('#dtContentPayment tbody').on('click', '.buttonPrintClass', function ()
        {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            let Type = $(this).closest('tr')[0].childNodes[1].innerHTML;
            let code = $(this).attr("datacode");
            switch (Type) {
                case "payment":
                    syslog_cutpaid('p', code, ser_MainCustomerID);
                    $("#DetailModal_Content").html('');
                    $("#DetailModal_Content").load('/Print/print?Type=invoice_service&DetailID=' + ID);
                    $('#DetailModal').modal('show');
                    break;
                case "deposit":
                    syslog_cutpaid('p', code, ser_MainCustomerID);
                    $("#DetailModal_Content").html('');
                    $("#DetailModal_Content").load('/Print/print?Type=invoice_deposit&DetailID=' + ID);
                    $('#DetailModal').modal('show');
                    break;
            }
        });

        $('#dtContentPayment tbody').on('click', '.buttonDeleteClass', function ()
        {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            let Type = $(this).closest('tr')[0].childNodes[1].innerHTML;
            let einvoice = $(this).attr('data-num');
            DeletePaymentList(ID, Type, einvoice)
        });
        $('#dtContentPayment tbody').on('click', '.buttonEinvoice', function ()
        {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            PaymentList_EInvoice(ID);
        });
        $('#dtContentPayment tbody').on('click', '.buttonCancelEinvoice', function ()
        {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            let num = $(this).attr('data-num');
            PaymentList_CancelEInvoice(ID, num);
        });

        $('#dtContentPayment tbody').on('click', '.btnAttachFile', function ()
        {
            let Code = encodeURIComponent($(this).attr('data-code'));
            let CreatedCode = encodeURIComponent($(this).attr('data-createdcode'));
            if (Code != "") {
                $("#DetailModal_Content").html('');
                $("#DetailModal_Content").load(`/Library/LibraryAttach/LibraryAttachDetail?OriginID=${Code}&OriginCode=${Code}&CreatedCode=${CreatedCode}&ver=${versionofWebApplication}`
                    , function (responseTxt, statusTxt, xhr)
                    {
                        if (statusTxt == "success") {
                            if (typeof LAD_Init === 'function')
                                LAD_Init(RenderTablePayment_AttachmentFile);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })

                $('#DetailModal').modal('show');
            }
            else {
                notiWarning("@Local["Không có mã"]");
            }
        });

        $('#dtContentPayment tbody').on('click', '.payment_mark_color', function ()
        {

            ser_PaymentID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            let ColorCode = $(this).attr("data-color");
            if (ser_PaymentID != 0) {
                let pos_top = $(this).parent().position().top + $(this).parent().height() / 2;
                let pos_left = $(this).parent().position().left;
                $("#formMakeColorPayment").css({
                    "display": "block"
                    , "left": pos_left - 10
                    , "top": pos_top - 60
                }).animate({
                    left: pos_left + 10
                    , top: pos_top - 60
                }, 300);
                $("#ColorCodeMarkPayment").spectrum("set", ColorCode);
            }
        });

        $("#dtContentPayment tbody").on('click', '.buttonSignClassCustomerPayment', function (event)
        {
            let ID = $(this).attr('data-id');
            let Type = $(this).attr('data-type');

            AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Service/?handler=GetSign_Payment"
                , data = {
                    'id': ID,
                    'type': Type
                }
                , async = true
                , error = function () {notiError_SW()}
                , success = function (result) {
                    if (result != "0") {
                        let _sigdata = JSON.parse(result);
                        let _datasign = '';
                        if (_sigdata != undefined && _sigdata.length == 1) _datasign = _sigdata[0].SignData;
                        Signature_Executed_Payment(ID, Type, _datasign);
                    }
                }
            );

        });
        $("#dtContentPayment tbody").on('click', '.buttonNoteClass', function (event) {
            let ID = $(this).attr('data-id');
            let Type = $(this).attr('data-type');
            let IsRefund = $(this).attr('data-isrefund');
            $("#DetailModal_Content").html('');
            $("#DetailModal_Content").load(`/Customer/Payment/PaymentDetail_QuickNote?CurrentID=${ID}&Type=${Type}&IsRefund=${IsRefund}&ver=${versionofWebApplication}`)
            $('#DetailModal').modal('show');

        });

        $('#dtContentPayment tbody').on('click', '.btnSendSms', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            $("#DetailModal_Content").html('');
            $("#DetailModal_Content").load("/Sms/SmsDetail?TypeCare=" + "7" + "&CustomerID=" + ser_MainCustomerID + "&PaymentID=" + ID + "&ver=" + versionofWebApplication);
            $('#DetailModal').modal('show');
        });
    }

    function DeletePaymentList(id, type, einvoice)
    {

        if (einvoice != "" && einvoice != undefined) {
            notiWarning('@Local["Phiếu thu này có xuất hóa đơn điện tử"]');
        }
        const promise = notiConfirm();
        promise.then(function () { ExecuteDeletePayment(id, type); }, function () { });
    }

    function ExecuteDeletePayment(id, type)
    {
        AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Service/?handler=DeleteItem"
            , data = {
                'id': id,
                'type': type,
                'customerID': ser_MainCustomerID
            }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result)
            {
                if (result != "0") {

                    let data = JSON.parse(result);
                    
                    if ((data[0]?.Result ?? 0) == -1) notiError_SW('@Local["Đã chốt sổ, không thể thêm thanh toán trước thời gian chốt"]');
                    else if((data[0]?.Result ?? 0) == 1) {
                        notiSuccess();
                        if (typeof Tab_PaySer_DelThirdAccounting === 'function') Tab_PaySer_DelThirdAccounting(id)
                        LoadPaymentAjax(id, type);
                        if (typeof LoadCustomerPaymentInfo === 'function') LoadCustomerPaymentInfo();
                        if (typeof LoadTabDepositAjax === 'function') LoadTabDepositAjax();
                        fcm_sendtopic("payment", Master_circleAvatar, sys_employeeName_Main, "@Local["Xóa thanh toán"]");
                        syslog_cutpaid('d', data[0]?.Code ?? "", ser_MainCustomerID, `${formatNumber(data[0]["Amount"])}`);
                    }
                    else {
                        notiError_SW('@Local["Tiền đã được sử dụng hoặc không tồn tại hóa đơn này"]');
                    }
                } else {
                    notiError_SW();
                }
            }
        );


    }
    //#region //ThirdAccount Delete
    function Tab_PaySer_DelThirdAccounting(id)
    {
        let isRefund = $(`#PayList_ThirdAccount_${id}`).attr('data-isRefund');
        let typepay = $(`#PayList_ThirdAccount_${id}`).attr('data-typepay');
        let type = typepay == "payment" ? (isRefund == 0 ? 1 : 2) : (isRefund == 0 ? 3 : 4);
        if (typeof syn_Accountbrand != 'undefined' && syn_Accountbrand && syn_Accountbrand != ""){
            APIAccount_Excute(id , type, action = "del"
                , beforefunc = function () { }
                , successfunc = function (e)
                {
                    if(e && e?.refguid != ""){
                        syslog_misa('d', code, ser_MainCustomerID);
                    }
                }
                , failfunc = function (message) {notiWarning(message)}
                , completefunc = function () { }
            );
        }
    }
    //#endregion
    async function Signature_Executed_Payment(id, type ,signdata)
    {
        await Signature_Action(signdata,0);
        if (Signature_ResultSignation != "") {
            AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Service/?handler=UpdateSign_Payment"
                , data = {
                    'id': id,
                    'sign': Signature_ResultSignation,
                    'type': type
                }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result)
                {
                    if (result != "0") {
                        LoadPaymentAjax(id, type);
                        syslog_cutpaid('s', result, ser_MainCustomerID);
                    }
                }
            );
        }

    }

    //#endregion

    //#region //EInvoice
    function PaymentList_EInvoice(id)
    {
        EInvoice_TT(typett = syn_Einvoicetype, editmode = 1, invoicenumber = "0", paymentid = id
            , beforefunc = function () { $("#psd_waiting").show(); }
            , successfunc = function (e)
            {
                AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Service/?handler=UpdateEInvoice"
                    , data = {
                        'id': id,
                        'EInvoice': e
                    }
                    , async = true
                    , error = function () { notiError_SW() }
                    , success = function (result)
                    {
                        if (result != "0") {
                            LoadPaymentAjax(id, 'payment');
                            syslog_cutpaid('ei', result, ser_MainCustomerID);
                        }
                    }
                );
            }
            , failfunc = function (message) {notiWarning(message)}
            , completefunc = function () { $("#psd_waiting").hide(); }
        );
    }
    function PaymentList_CancelEInvoice(id, num)
    {
        const promise = notiConfirm();
        promise.then(function ()
        {
            EInvoice_TT(typett = syn_Einvoicetype, editmode = 3, invoicenumber = num, paymentid = id
                , beforefunc = function () { $("#psd_waiting").show(); }
                , successfunc = function (e)
                {
                    AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Service/?handler=RemoveEInvoice"
                        , data = {
                            'id': id
                        }
                        , async = true
                        , error = function () { notiError_SW() }
                        , success = function (result)
                        {
                            if (result != "0") {
                                LoadPaymentAjax(id,'payment');
                                syslog_cutpaid('ed', result, ser_MainCustomerID);
                            }
                        }
                    );
                }
                , failfunc = function (message) {notiWarning(message)}
                , completefunc = function () { $("#psd_waiting").hide(); }
            );
        }, function () { });
    }
    //#endregion

    //#region //Payment Mark Color

    function ExcuteDataMakeColorPayment()
    {

        if (ser_PaymentID != 0) {
            let ColorCode = $("#ColorCodeMarkPayment").spectrum('get').toHexString();
            AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Service/?handler=PaymentMarkColor"
                , data = {
                    'id': ser_PaymentID, 'colorcode': ColorCode
                }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result)
                {
                    if (result == "1") {
                        CancelMakeColorPayment();
                        let mark_color = $('.payment_mark_color[data-paymentid="' + ser_PaymentID + '"]');
                        if (mark_color.length > 0) {
                            mark_color.css({ "border-color": ColorCode });
                            mark_color.attr("data-color", ColorCode);
                            $('.payment_mark_color[data-paymentid="' + ser_PaymentID + '"]').css({ "background-color": ColorCode });
                        }

                    } else {
                        notiError_SW();
                    }
                }
            );
        }

    }

    function CancelMakeColorPayment()
    {
        $("#formMakeColorPayment").hide();
    }

    //#endregion


    //#region // Render Data

    async function RenderTablePayment(data,datadetail, id)
    {
        new Promise((resolve) =>
        {
            setTimeout(() =>
            {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    let stringContent = '';
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = RenderTablePayment_Each(item, datadetail);
                            stringContent = stringContent + tr;
                        }
                    }
                    myNode.innerHTML = myNode.innerHTML + stringContent;
                }
                shtable.Refresh();
                Checking_TabControl_Permission();
            }, 10)
        })
    }
    function RenderTablePayment_Each (item, datadetail) { 

        let totalPayment = item.Amount, PaymentDeposit = Number(item.PaymentDeposit);
        let contentDetail = '', ThirdAccount = '';
        ThirdAccount = RenderTablePayment_ThirdAccount(item?.AccountingRefid, item?.AccountingIsSuccess);
        let _detail = datadetail.filter(v => v.ID === Number(item.ID) && item.TypePayment == 'payment');
        for (let j = 0; j < _detail.length; j++) {
            contentDetail = contentDetail
                + RenderTablePayment_Detail(_detail[j].TabCode, _detail[j].ServiceName, _detail[j].Payment, _detail[j].Price_Discounted);
        }
        if (PaymentDeposit != 0) contentDetail += RenderTablePayment_PaymentDeposit(PaymentDeposit);
        let strSign = '';
        if (item.IsSign != '')
            strSign = `<a data-id="${item.ID}" data-type="${item.TypePayment}" class="text-sm buttonSignClassCustomerPayment text-primary d-block text-center">@Local["Đã ký tên"]</a>`
        else
            strSign = `<a data-id="${item.ID}" data-type="${item.TypePayment}" class="text-sm buttonSignClassCustomerPayment text-secondary d-block text-center">@Local["Ký tên"]</a>`
        let isRefund = (item?.Amount < 0) ? 1 : 0;
        let tr = '<td class="d-none">' + item.ID + '</td>'
            + '<td class="d-none">' + item.TypePayment + '</td>'
            + '<td class="vt-number-order"></td>'
            + '<td>' + RenderTablePayment_Invoice(item.ID, item.MarkColor, item.InvoiceNum, item.Created, item.TypePayment) + '</td> '
            + '<td>' + RenderTablePayment_Type(item.Amount, item.MethodName, item.MethodNameLangKey, item.PosType, item.TransferType, item.MethodDetail) + '</td>'
            + '<td>' + formatNumber(totalPayment) + '</td> '
            + '<td data-name="billcode">' + item.BillCode + '</td> '
            + '<td id="PLS_AttachFile_' + item.InvoiceNum.replace(/[^\w\s]/gi, '') + '" data-name="fileattach" class="text-center cursor-pointer font-weight-bold">'
            + `<span class="btnAttachFile text-center text-primary" data-code="${item.InvoiceNum}" data-createdcode="${item.Created}">${item?.FileAttach > 0 ? item?.FileAttach + ' @Local["Tệp"]' : '@Local["Tải tệp lên"]'} </span>`
            + '</td>'
            + '<td data-name="branch">' + item.BranchName + '</td> '
            + '<td data-name="detail" class="block-horizontal">'
            + contentDetail
            + '</td>'
            + '<td data-name="created">' + RenderTablePayment_Created(item.Created_By) + '</td> '
            + '<td data-name="sign" class="text-center">'
            + strSign
            + '</td>'
            + '<td data-name="signdate">' + ConvertDateTimeUTC_DMYHM(item.SignDate) + '</td>'
            + '<td data-name="einvoice">'
            + RenderTablePayment_Einvoice(item.ID, item.TypePayment, item.EInvoice, item.EInvoiceDate, item.EinvoiceUser)
            + '</td>'
            + `<td id="PayList_ThirdAccount_${item.ID}" class="${ThirdAccount.status} text-center" data-isRefund="${isRefund}" data-typepay="${item.TypePayment}" data-name="thirdaccounting">${ThirdAccount.value}</td>`
            + '<td data-name="note">'
            + item.Content
            + '</td>'
            + '<td>'
            + '<div class="text-nowrap">'
            + RenderTablePayment_Button(item.ID, item.IsPassingDate, item.IsCreatedBy, item.IsCreatedDate
                , item.TypePayment, isRefund, item.InvoiceNum, item.EInvoice)
            + '</div>';
            + '</td>';
        tr= '<tr id="custpaid' + item.TypePayment + '' + item.ID + '" role="row" class="vt-number border-5 border-bottom-0 border-top-0 border-end-0 border-3 ' + RenderTablePayment_TypeSer(item.TypePayment) + '">' + tr + '</tr>'
        return tr;
    }
    //#region //THIRD ACCOUNTING
    function RenderTablePayment_ThirdAccount(refid, issuccess){
        let result = { status: '', value: ''};
        refid ??= '', issuccess ??= 0;
        if(refid != '') {
            if(issuccess == 1) {
                result.value = decodeHtml('@Local["Đã đồng bộ"]')
                result.status = 'text-success'
            }
            else {
                result.value = decodeHtml('@Local["Đang đồng bộ"]')
                result.status = 'text-secondary'
            }
        }
        return result;
    }
    //#endregion

    function RenderTablePayment_AttachmentFile(Code = '', Created, Total = 0) {
         if(Code != '') {
            let result = `<span class="btnAttachFile text-center text-primary" data-code="${Code}" data-createdcode="${Created}">${Total > 0 ? Total + ' @Local["Tệp"]' : '@Local["Tải tệp lên"]'} </span>`;
            $(`#PLS_AttachFile_${Code.replace(/[^\w\s]/gi, '')}`).html(result);
            EventHandlePaymentCustomer();
         }
    }

    function RenderTablePayment_Invoice(ID, MarkColor, InvoiceNum, Created, TypePayment)
    {
        let _color = '';
        if (TypePayment == "deposit") {

        }
        else {
            _color = '<div style="background-color:' + MarkColor + '" data-color="' + MarkColor + '" data-paymentid="' + ID + '" class="payment_mark_color icon icon-shape icon-xs me-3 shadow text-center " >'
                + '</div>';
        }
        let result = '<div class="d-flex align-items-center">'
            + _color
            + '<div class="d-flex flex-column">'
            + '<h6 class="mb-1 text-dark text-sm">'
            + (InvoiceNum != '' ? InvoiceNum : 'Deposit')
            + '</h6>'

            + '<span class="text-xs">' + GetDateTime_String_DMY(Created) + '</span>'
            + '</div>'
            + '</div>'
        return result;

    }
    function RenderTablePayment_Detail(Code, ServiceName, Payment, PriceDiscount)
    {
        let classname = (Payment >= 0) ? 'fa-plus text-success' : 'fa-minus text-danger';
        let name = '<span class="text-primary" > <strong>' + Code + '</strong>' + ' ' + ServiceName + ' - ' + formatNumber(PriceDiscount) + '</span>';

        let result = '<div class="card-body px-2 py-1">'
            + '<div class="ps-2 mb-0">'
            + '<p class="text-sm m-0">'
            + '<i class="fa ' + classname + ' pe-2"></i> '
            + '<span class="font-weight-bold pe-2">' + formatNumber(Math.abs(Payment)) + '</span>'
           // + ((Type == 'payment') ? name : '@Local["Tiền cọc"]')
            + name
            + '</p>'
            + '</div>'
            + '</div>'
            + '<hr class="horizontal dark my-0">'

        return result;
    }
    function RenderTablePayment_PaymentDeposit(PaymentDes)
    {
        let result = '<div class="card-body px-2 py-1">'
            + '<div class="ps-2 mb-0">'
            + '<p class="text-sm m-0">'
            + '<i class="fa fa-minus text-danger pe-2"></i> '
            + '<span class="font-weight-bold pe-2">' + formatNumber(Math.abs(PaymentDes)) + '</span>'
            + '@Local["Sử dụng tiền cọc"]'
            + '</p>'
            + '</div>'
            + '</div>'
        return result;
    }
    function RenderTablePayment_Type(Amount, MethodName, MethodNameLangKey, PosType, TransferType, MethodDetail)
    {
        let ty = Amount >= 0 ? '<i class="text-success fas fa-plus"></i>' : '<i class="text-danger fas fa-minus"></i>';
        let method = author_get("UserLang") == 'en' ? Outlang[MethodNameLangKey] : MethodName;
        let result = '<div class="d-flex p-2 align-items-center">'
            + ty
            + '<span class="ps-3">'
            + method
            + ((PosType != '') ? ' - ' + PosType : '')
            + ((TransferType != '') ? ' - ' + TransferType : '')
            + ((MethodDetail != '') ? ' - ' + MethodDetail : '')
            + '</span>'
            + '</div>';

        return result;
    }
    function RenderTablePayment_Einvoice(ID, TypePayment, EInvoice, EInvoiceDate, EinvoiceUser)
    {
        let result = "";
        if (TypePayment == "payment") {
            if (EInvoice != "") {
                let obj = Fun_GetObject_ByID(DataUser, EinvoiceUser);
                let name = (obj != null) ? obj.Name : 'unknown';
                let img = (obj != null) ? obj.Avatar : Master_Default_Pic;
                result = `
                                <span class="fw-bold text-primary ms-3 ">
                                      @Local["Mã hóa đơn"]: ${EInvoice}
                                      <button class="buttonGrid text-danger ms-2" title="@Local["Hủy hóa đơn điện tử"]" value="${ID}"><i data-num="${EInvoice}" class="buttonCancelEinvoice fas fa-ban"></i></button>
                                </span>
                                <div class="d-flex ms-2">
                                    <div class="icon icon-shape icon-sm me-2 text-center">
                                        <img class="avatar avatar-xs mt-2" src="${img}">
                                    </div>
                                    <div class="d-flex flex-column">
                                        <h6 class="text-dark text-sm mb-0">${name}</h6>
                                        <span class="text-xs">${GetDateTime_String_DMY(EInvoiceDate)}</span>
                                    </div>
                                </div>
                                `
            }
            else {
                result = `<div class="d-flex justify-content-center "><button title="@Local["Hóa đơn điện tử"]" class="buttonGrid text-primary text-lg"  value="${ID}"><i  class="buttonEinvoice  fas fa-receipt"></i></button></div>`
            }

        }
        return result;
    }
    function RenderTablePayment_Button(id, IsPassingDate, IsCreatedBy, IsCreatedDate,
        TypePayment, IsRefund, InvoiceNum, EInvoice)
    {
        let buttons = [('<button class="buttonGrid" value="' + id + '"><i dataid=' + id + ' datacode="' + InvoiceNum + '" class="buttonPrintClass vtt-icon vttech-icon-print"></i></button>')
            , ('<button data-id=' + id + ' data-type="' + TypePayment + '" data-isrefund="' + IsRefund + '" class="buttonGrid buttonNoteClass"><i class="vtt-icon vttech-icon-edit-content"></i></button>')];
        switch (TypePayment) {
            case "payment":
                if ((IsPassingDate == 1 || (IsCreatedBy == 1 && IsCreatedDate == 1))
                ) {
                    buttons.push('<button class="buttonGrid _tab_control_" data-tab="delete_tab_payment" value="' + id + '"><i  class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>')
                }
                break;
            case "deposit":
                if (IsPassingDate == 1 || (IsCreatedBy == 1 && IsCreatedDate == 1)) {
                    buttons.push('<button class="buttonGrid _tab_control_" data-tab="delete_tab_deposit" value="' + id + '"><i data-num="' + EInvoice + '" class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>');
                }
                break;
            default:
                break;
        }
        buttons.push('<button title="@Local["Gửi sms"]" class="buttonGrid" data-id="' + id + '"><i  class="btnSendSms fas fa-sms"></i></button>');
        return Render_Button_Grid(buttons);
    }
    function RenderTablePayment_TypeSer(type)
    {
        try {
            let result = `border-success`;
            if (type == 'deposit')
                result = 'border-warning';
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    function RenderTablePayment_Created(createdBy)
    {
        try {
            let result = '';
            let obj = Fun_GetObject_ByID(DataUser, createdBy);
            let name = (obj != null && obj.EmployeeName!= undefined) ? obj.EmployeeName : 'unknown';
            let img = (obj != null) ? obj.Avatar : Master_Default_Pic;
            result = `
                            <div class="d-inline">
                                <img class="avatar avatar-xs me-2" src="${img}" alt="label-image" />
                                <span>${name}</span>
                            </div>`
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    //#endregion

    //#region // Event

    function addNewPaymentReturn()
    {

        $("#Div_Payment_List_Service_Detail").empty();
        $("#Div_Payment_List_Service_Detail").load("/Customer/Payment/PaymentDetailReturn?CustomerID=" + ser_MainCustomerID + "&ver=" + versionofWebApplication, function (e)
        {
            $("#Div_Payment_List_Service_Master").hide();
            $("#Div_Payment_List_Service_Detail").show();
        });
    }
    function CancelPaymentReturn()
    {
        $("#Div_Payment_List_Service_Detail").empty();
        $("#Div_Payment_List_Service_Master").show();
    }
    function addNewPayment()
    {
        if (ser_PaymentIsLock == 1) {
            notiConfirm_Type("noti_lock_payment");
        } else {
            $("#Div_Payment_List_Service_Detail").empty();
            $("#Div_Payment_List_Service_Detail").load("/Customer/Payment/PaymentDetail?CustomerID=" + ser_MainCustomerID + "&ver=" + versionofWebApplication, function (e)
            {
                $("#Div_Payment_List_Service_Master").hide();
                $("#Div_Payment_List_Service_Detail").show();
            });
        }
    }
    function CancelPaymentDetail()
    {
        $("#Div_Payment_List_Service_Detail").empty();
        $("#Div_Payment_List_Service_Master").show();
    }
    function Payment_Out_Click()
    {
        $(document).on("click", function (e)
        {
            let column_btn = $(".column_btn");
            if (!$(column_btn).is(e.target) && $(column_btn).has(e.target).length === 0) {
                $('.column_btn .title,.column_btn .content').removeClass("active");
            }
        })
    }
    //#endregion

    //#region // Unlock Payment

    function unlockpayment()
    {
        const promise = notiConfirm("@Local["Mở khóa"]");
        promise.then(function () { unlockpayment_execute(); }, function () { });
    }

    function unlockpayment_execute()
    {
        AjaxLoad(url = "/Customer/Payment/PaymentList/PaymentList_Service/?handler=Unlockpayment"
            , data = {
                'id': ser_MainCustomerID
            }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result)
            {
                if (result == "1") {
                    ser_PaymentIsLock = 0;
                    $('#btn_unlockpaymentfull').hide();
                    let objs = $("#divCustomerTabContent [data-tab='/Customer/PaymentList?CustomerID=']");
                    if (objs != undefined && objs.length == 1) objs.removeClass('locked');
                    notiSuccess();
                }
            }
        );


    }

    //#endregion



    function addNewDesposit()
    {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Customer/Deposit/TabDepositDetail?CustomerID=" + ser_MainCustomerID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
    }
    function returnDesposit()
    {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Customer/Deposit/TabDepositDetail_Return?CustomerID=" + ser_MainCustomerID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
    }
    function paylist_print()
    {
        syslog_cutpaid('p', '', ser_MainCustomerID);
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Print/Condi/SelectTime", function ()
        {
            prtime_assignlink(`/Print/print?Type=paymentbyday_form&DetailID=${ser_MainCustomerID}`);
        });
        $('#DetailModal').modal('show');
    }

</script>

<script>js_require('/js/main.js');</script>

