@page
@model MLunarCoffee.Pages.Customer.Treatment.TreatmentMesure.MesViewModel
@{
    Layout = null;
}
<div id="">
    <canvas id="myCanvas" width="500" height="500">Your browser does not support the HTML5 canvas tag.</canvas>
</div>
<script type="text/javascript">
    let c = document.getElementById("myCanvas");
    let ctx = c.getContext("2d");
    let point_size = 3;
    let center_x = 250;
    let center_y = 250;
    let font_size = "24px";
    let dataMes = [{ID: 1, Name: "Chiều cao"}
    , {ID: 2, Name: "Cân nặng"}
    , {ID: 3, Name: "Sức bền"}
    , {ID: 4, Name: "Độ dẻo"}
    , {ID: 5, Name: "Tốc độ"}
    , {ID: 6, Name: "Sức mạnh"}
    , {ID: 7, Name: "Trí tuệ"}
    ]
    let TMV_radius = 150;
    let TMV_dataSkeletonPoint = {};

    $(document).ready(function () {
        TMW_initSkeletonFrame(dataMes);
        
    });

    //#region //INIT
    function TMW_initSkeletonFrame(data) {
        ctx.moveTo(0, 0);
        ctx.lineWidth = 0.3;
        TMV_dataSkeletonPoint = TMW_initPoint(dataMes);
        //TMW_renderSkeleton();

        //TMV_renderLabel(center_x, center_y, '')
        //TMV_drawPolygon(TMV_dataSkeletonPoint);
        //TMV_drawPolygon(TMV_dataSkeletonPoint, staticPoint = {x: center_x, y: center_y});
       
    }

    function TMW_renderSkeleton(limitRuler = 10) {
        //let unit = TMV_radius/limitRuler;
        //white(limitRuler >= 0) {

        //}
        //for(let i = 0; i < limitRuler; i++) {
        //    $.each(objPoint, function(i, value) {
        //        let currIndex = Number(i) - 1;
        //        let nextIndex = isStatic ? currIndex : ((currIndex+1 != keys.length) ? currIndex+1 : 0);
        //        let item = isStatic ? staticPoint : value;
        //        let itemNext = objPoint[keys[nextIndex]];
        //        TMV_joinEdge(item, itemNext)
        //    }); 
        //    TMV_drawPolygon(TMV_dataSkeletonPoint);
        //}
    }
    //#endregion

    //#region //POINT
    function TMW_initPoint(data, radius = TMV_radius) {
        let angle = 0;
        let equalAngle = 360 / dataMes.length;
        let obj = {}
        for(let i = 0; i < data.length; i++) {
            let item = data[i]
            angle = i*equalAngle;
            var x = center_x + radius * Math.sin(angle * Math.PI / 180); //xa = sin(alpha/2)*radius
            var y = center_y - radius * Math.cos(angle * Math.PI / 180);
            TMV_renderLabel(x , y, item.Name)
            obj[item?.ID ?? 0] = {x, y};
        }
        return obj;
    }
    //#endregion

    //#region //EDGE

    //#endregion

    //#region //FILL COLOR

    //#endregion

    //#region //EVENT
    //#endregion

    function TMV_renderLabel(x , y, label) {
        let posXText = 0, posYText = 0; 
        ctx.beginPath();
        ctx.arc(x, y, 1.5, 0, 2 * Math.PI);
        ctx.fill();

        ctx.font = font_size;
        ctx.fillStyle = "#1e1e1e";
        if(x == center_x) {
            ctx.textAlign = "center";
            posXText = x;
        }
        else if(x > center_x) {
            ctx.textAlign = "left";
            posXText = x + 10;
        }
        else {
            ctx.textAlign = "right";
            posXText = x - 10;
        }

        posYText = y > center_y ? y + 15 : y - 15;  

        ctx.fillText(label, posXText, posYText);
        ctx.closePath();
    }

    function TMV_drawPolygon(objPoint, staticPoint = {}) {
        let isStatic = Object.keys(staticPoint).length > 0;
        let keys = Object.keys(objPoint);
        $.each(objPoint, function(i, value) {
            let currIndex = Number(i) - 1;
            let nextIndex = isStatic ? currIndex : ((currIndex+1 != keys.length) ? currIndex+1 : 0);
            let item = isStatic ? staticPoint : value;
            let itemNext = objPoint[keys[nextIndex]];
            TMV_joinEdge(item, itemNext)
        }); 
    }

    function TMV_joinEdge(p1, p2) {
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
        ctx.closePath();
    }
</script>