@page
@model MLunarCoffee.Pages.Customer.Treatment.TreatmentWork.TreatWorkListModel
@{
    Layout = null;
}

<script>js_require('/js/comon/initialize_setting.js');</script>

<div class="container-fluid pb-3 pt-0 px-0">
    <div class="row">
        <div class="col-12">
            <div id="treatWorkList">
                <div class="card-header pb-0 pt-0">
                    <div class="d-lg-flex">
                        <ul class="nav nav-pills p-1 bg-transparent permissionlist" role="tablist">
                            <li class="nav-item" role="presentation">
                                <a class="nav-link cursor-pointer" data-bs-toggle="collapse" href="#TWL_infodes">
                                    <i class="text-gradient text-lg text-primary fas fa-info-circle"></i>
                                </a>
                            </li>
                        </ul>
                       @* <div class="w-50 col-auto my-auto">
                            <div class="h-100">
                                <h6 class="mb-0">@Local["Danh sách công việc điều trị"]</h6>
                                <p class="text-sm mb-0">@Local["Chi tiết danh sách công việc điều trị"]</p>
                            </div>
                        </div>*@
                        <div class="ms-auto my-auto mt-1">
                            <button class="btn bg-gradient-primary btn-sm mt-1" onclick="AddTreatWord()">
                                @Local["Thêm mới"]
                            </button>
                            <div class="position-relative d-inline">
                                <button class="btn btn-dark btn-sm mt-1 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                                    @Local["Xem thêm"]
                                </button>
                                <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                                    <ul class="card card-body text-dark text-capitalize opacity-10">
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="created" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Người tạo"]</p>
                                        </li>
                                        <li class="d-flex">
                                            <div class="form-check form-switch">
                                                <input class="shtoogle form-check-input" data-name="date" type="checkbox">
                                            </div>
                                            <p class="text-sm">@Local["Ngày tạo"]</p>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="TWL_infodes" class="border-dashed border-1 border-secondary border-radius-md p-3 text-sm text-dark ms-1 mb-2 mt-2 multi-collapse collapse">
                        <h6 class="mb-0">@Local["Danh sách công việc điều trị"]</h6>
                        <p class="text-sm mb-0">@Local["Chi tiết danh sách công việc điều trị"]</p>
                    </div>
                    <div class="card-body px-0 pt-2">
                        <div class="m-0 mb-3 mobile-responsive" style="max-height:80vh;">
                            <div id="div_treatment_work_waiting" class="waitingdiv text-center" style="display: none;">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </div>
                            <table data-name="ContentTreatmentWork" class="table vt-table mb-0" id="dtContentTreatmentWork">
                                <thead>
                                    <tr>
                                        <th class="d-none">ID</th>
                                        <th style="width: 50px;">#</th>
                                        <th style="width: 180px;">@Local["Nhân viên"]</th>
                                        <th style="min-width: 130px;" class="no-sort">@Local["Công việc điều trị"]</th>
                                        <th style="min-width: 130px;" class="no-sort">@Local["Ghi chú"]</th>
                                        <th data-name="created" style="min-width: 130px;">@Local["Người tạo"]</th>
                                        <th data-name="date" style="min-width: 130px;">@Local["Ngày tạo"]</th>
                                        <th class="no-sort" style="width: 40px;">@Local["Xử lý"]</th>
                                    </tr>
                                </thead>
                                <tbody id="dtContentTreatmentWorkBody">
                                </tbody>
                            </table>
                        </div>
                        <button id="TWL_btnloadMore" class="btn btnsysmore btn-secondary w-100 p-1 mt-1 mb-0 position-relative" style="pointer-events: auto;" onclick="event.preventDefault(); return LoadTreatmentWorkAjax(0, 1);">
                            @Local["Xem thêm"]
                        </button>
                    </div>
                </div>
            </div>
            <div id="treatWorkDetail">
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    //#region //DECLARE - INIT
    var ser_TreatCustomerID = '@Model._TreatCustomerID';
    var DataTreatTask = {};
    let shtable;
    let TWL_data;
    let TWL_limit = 100, TWL_beginID = 0;
    let TWL_isDoneLoadMore = false;

    $(document).ready(function () {
        shtable = $("#dtContentTreatmentWork").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        if (typeof LoadCustomerPaymentInfo !== 'undefined' && $.isFunction(LoadCustomerPaymentInfo)) {
            LoadCustomerPaymentInfo();
        }
        LoadTreatmentWorkAjax(0, 0);

    });
    //#endregion

    //#region //LOAD DATA
    function LoadTreatmentWorkAjax(TWL_currentID = 0, TWL_isLoadMore = 0) {
        if (TWL_currentID == 0 && TWL_isLoadMore == 0) {
            TWL_data = [];
            TWL_beginID = 0;
            TWL_isDoneLoadMore = false;
            $('#dtContentTreatmentWorkBody').html('');
        }

        AjaxLoad(url = "/Customer/Treatment/TreatmentWork/TreatWorkList/?handler=Loadata"
            , data =
            {
                'CustomerID': ser_TreatCustomerID
                , 'id': TWL_currentID
                , 'limit': TWL_limit
                , 'beginID': TWL_beginID
            }
            , async = true
            , error = null
            , success = function (result) {
                if (result != "[]") {
                    let datas = JSON.parse(result);
                    let data = datas.Table;
                    if (datas.Table1 && datas.Table1.length > 0) {
                        DataTreatTask = (datas.Table1).reduce((pre, arr) => { if (!pre[arr.ID]) pre[arr.ID] = arr; return pre; });
                    }
                    if (TWL_currentID == 0) {
                        TWL_data = TWL_data.concat(data);
                        TWL_beginID = data[data.length - 1].ID;
                        fnRenderBlock(data, "dtContentTreatmentWorkBody"
                            , blocknum = 50
                            , fnrender = RenderTableTreatmentWork
                            , fnsuccess = function (e) { }
                            , fnbegin = function (e) { }
                        );
                    }
                    else {
                        if (data && data.length != 0) {
                            if ($('#TWL_rowContent_' + TWL_currentID).length > 0) {
                                TWL_data = TWL_data.reduce((pre, arr) => {
                                    if (arr.ID == data[0].ID) arr = data[0];
                                    pre.push(arr);
                                    return pre;
                                }, []);
                                $('#TWL_rowContent_' + TWL_currentID).replaceWith(TWL_RenderEach(data[0]));
                                TWL_Event();
                            }
                            else {
                                if (TWL_isDoneLoadMore) {
                                    TWL_data.push(data[0]);
                                    $('#dtContentTreatmentWorkBody').prepend(TWL_RenderEach(data[0]));
                                    TWL_Event();
                                }
                                else {
                                    LoadTreatmentWorkAjax(0, 0);
                                }
                            }
                        }
                        else {
                            if ($('#TWL_rowContent_' + TWL_currentID).length > 0) {
                                TWL_data = TWL_data.filter(word => {
                                    return word.ID != TWL_currentID
                                })
                                $('#TWL_rowContent_' + TWL_currentID).remove();
                            }
                        }
                    }
                }
                else if (result == "[]") {
                    if (TWL_isLoadMore == 1) {
                        $("#TWL_btnloadMore").hide();
                        TWL_isDoneLoadMore = true;
                    }
                    else {
                        if (TWL_currentID != 0) {
                            if ($('#TWL_rowContent_' + TWL_currentID).length > 0) {
                                TWL_data = TWL_data.filter(word => {
                                    return word.ID != TWL_currentID
                                })
                                $('#TWL_rowContent_' + TWL_currentID).remove();
                            }
                        }
                        else {
                            
                        }
                    }
                }
                else {
                    notiError_SW();
                }
                shtable.Refresh();
            }
            , before = function () {
                $("#div_treatment_work_waiting").show();
            }
            , complete = function (e) {
                $("#div_treatment_work_waiting").hide();
            });
    }
    //#endregion

    //#region //RENDER
    async function RenderTableTreatmentWork(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (var i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = TWL_RenderEach(item);
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                        TWL_Event();
                        shtable.Refresh();
                    }
                }
                resolve();
            }, 30)
        });
    }

    function TWL_RenderEach(item) {
        try {
            let tr =
                '<td class="d-none">' + item.ID + '</td>'
                + '<td class="vt-number-order"></td>'
                + '<td>' + item.EmployeeName + '</td>'
                + '<td><span class="treat_list_task">' + Fun_GetString_ByToken(DataTreatTask, item.TaskID) + '</span></td>'
                + '<td>' + item.Content + '</td>'
                + '<td data-name="created">' + item.CreateName + '</td>'
                + '<td data-name="date">' + item.Created + '</td>'
                + '<td>'
                + '<div class="text-nowrap">'
                + TWL_RenderTable_Button(item.ID, item.EditButton, item.DeleteButton) 
                + '</div>'
                + '</td>'
            tr = `<tr id="TWL_rowContent_${item.ID}" role="row" class="vt-number CLS_clsRowContent cursor-pointer vt-number">${tr}</tr>`
            return tr;
        }
        catch (ex) {
            return '';
        }
    }
    function TWL_RenderTable_Button(ID, EditButton, DeleteButton) {
        let buttons = [];
        if (EditButton === 1) {
            buttons.push('<button class="buttonGrid" value="'
                + ID
                + '"><i class="buttonEditClass vtt-icon vttech-icon-edit"></i></button>');
        }
        if (DeleteButton === 1) {
            buttons.push('<button class="buttonGrid" value="'
                + ID
                + '"><i  class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>');
        }

        return Render_Button_Grid(buttons)
    }
    //#endregion

    //#region //EVENT
    function TWL_Event() {
        $('#dtContentTreatmentWork tbody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            EditTreatWord(ID);
        });
        $('#dtContentTreatmentWork tbody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            DeleteTreatmentWorkList(ID)
        });
    }

    function AddTreatWord() {
        $("#treatWorkList").css("display", "none");
        $("#treatWorkDetail").css("display", "block");
        $("#treatWorkDetail").empty();
        $("#treatWorkDetail").load("/Customer/Treatment/TreatmentWork/TreatWorkDetail?CustomerID=" + ser_TreatCustomerID + "&ver=" + versionofWebApplication);
    }
    function CancelTreatWorkDetail() {
        $("#treatWorkList").css("display", "block");
        $("#treatWorkDetail").css("display", "none");
        $("#treatWorkDetail").empty();
    }
    function DeleteTreatmentWorkList(id) {
        const promise = notiConfirm();
        promise.then(function () { ExecuteDeleteTreatmentWork(id); }, function () { });
    }
    function ExecuteDeleteTreatmentWork(id) {
        AjaxLoad(url = "/Customer/Treatment/TreatmentWork/TreatWorkList/?handler=DeleteItem"
            , data = { 'id': id }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                if (result == "1") {
                    notiSuccess();
                    syslog_cuttreat('d', ser_TreatCustomerID, "");
                    LoadTreatmentWorkAjax(id, 0);
                } else {
                    notiError_SW();
                }
            }
        );
    }
    function EditTreatWord(ID) {
        $("#treatWorkList").css("display", "none");
        $("#treatWorkDetail").css("display", "block");
        $("#treatWorkDetail").empty();
        $("#treatWorkDetail").load("/Customer/Treatment/TreatmentWork/TreatWorkDetail?CurrentID=" + ID + "&CustomerID=" + ser_TreatCustomerID + "&ver=" + versionofWebApplication);
    }
    //#endregion
</script>
<script>js_require('/js/main.js');</script>

