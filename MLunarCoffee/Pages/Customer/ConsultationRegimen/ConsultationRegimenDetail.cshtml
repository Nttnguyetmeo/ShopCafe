@page
@model MLunarCoffee.Pages.Customer.ConsultationRegimen.ConsultationRegimenDetailModel
@{
    Layout = null;
}

<div class="container-fluid py-3 px-0">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body pt-2">
                    <div class="row px-1">
                        <div class="field col-12px-1 mt-2">
                            <label>@Local["Tên"]</label>
                            <input id="nameTemplate" class="form-control" name="name" type="text" placeholder="eg .@Local["Tên"]" />
                        </div>
                    </div>
                    <div class="row px-1">
                        <div class="field col-12px-1 mt-2">
                            <label>@Local["Nội dung"]</label>
                            <table id="dtTableRegimen" class="ui compact table">
                                <tbody id="dtTableRegimenBody">
                                </tbody>
                            </table>
                            <button class="btn btn-secondary button_chose p-3" onclick="Add_New_Row_Regimen()">@Local["Thêm mới"]</button>
                        </div>
                    </div>
                </div>
                <div class="card-footer fixed-botombutton">
                    <div class="action_Save">
                        <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
                        <div class="action_Save-Content">
                            <button class="btn btn-secondary" form="formcustomer" onclick="CloseRegimenDetail()">@Local["Hủy"]</button>
                            <button id="button_status_detail_save" form="formcustomer" type="button" class="btn bg-gradient-primary mt-2 me-2"
                                    onclick="ExcuteDataRegimen()">
                                @Local["Lưu"]
                                </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>
<script>js_require('/js/comon/initialize_setting.js');</script>

<script type="text/javascript">
    var _RegimenDetailID ='@Model._CurrentDetailID' ;
    var data_regimen_question = {};

    $(document).ready(function () {
        if (_RegimenDetailID!="0") RegimenCustomerIni();
    });
    function RegimenCustomerIni() {
        AjaxLoad(url = "/Customer/ConsultationRegimen/ConsultationRegimenDetail/?handler=Loadata"
            , data = {
                'id': _RegimenDetailID
            }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                let data = JSON.parse(result);

                let RegimenList = JSON.parse(data[0].Data);
                $('#nameTemplate').val(data[0].Name);
                for (let i = 0; i < RegimenList.length; i++) {
                    let item = RegimenList[i];
                    var element = {};
                    element.id = item.id;
                    element.text = item.text;
                    element.status = item.status;
                    element.answer = item.answer;

                    data_regimen_question[item.id] = element;
                    RenderRegimen_Add(item.id, element, 'dtTableRegimenBody');
                }
            }
        );
    }


    // save
    function ExcuteDataRegimen() {
        Checking_Validate_Question_Regimen();
        if ($('#textShowMessage').html() == "") {
            let dataQuestions = [];
            for ([key, value] of Object.entries(data_regimen_question)) {
                dataQuestions.push(value);
            }
            var data = new Object();
            data.Name = $('#nameTemplate').val() ? $('#nameTemplate').val() : "";
            data.Data = JSON.stringify(dataQuestions);
            $('#form3').form('validate form')
            if ($('#form3').form('is valid')) {
                AjaxLoad(url = "/Customer/ConsultationRegimen/ConsultationRegimenDetail/?handler=ExcuteData"
                    , data = {
                        'data': JSON.stringify(data),
                        'CurrentID': _RegimenDetailID }
                    , async = true
                    , error = function () { notiError_SW() }
                    , success = function (result) {
                        if (result= "0") {
                            CloseRegimenDetail();
                            LoadDataRegimenAjax();
                            notiSuccess();
                        }
                    }
                    , sender = null
                    , before = function () {
                    }
                    , complete = function (e) {
                    }
                );
            }
        }
        return false
    }

    function Add_New_Row_Regimen() {
        let element = {};
        let id = (new Date()).getTime();
        element.id = id;
        element.text = '';
        element.status = 2;
        element.answer = '';
        data_regimen_question[id] = element;
        RenderRegimen_Add(id, element, 'dtTableRegimenBody');
        console.log(data_regimen_question);
        return id;
    }
    function RenderRegimen_Add(key, value, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            let tr =
                '<td style="display:none !important;">' + key + '</td>'
                + '<td>' + AddCell_Question(key, value.note) + '</td>'
                + '<td style="width: 50px;">'
                + '<button class="buttonGrid"><i class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>'
                + '</td>'
            tr = '<tr id=row_' + key + '>' + tr + '</tr>';
            document.getElementById(id).innerHTML = document.getElementById(id).innerHTML + tr;
        }
        Fill_Data_Question_Regimen(data_regimen_question);
        Event_Element_Question_Regimen();
    }

    function AddCell_Question(randomNumber, value) {
        let resulf = '<textarea rows="2" class="form-control questionRegimen" id="questionRegimen_' + randomNumber + '" value="' + value + '"></textarea>';
        resulf = resulf;
        return resulf;
    }

    function Fill_Data_Question_Regimen(data) {
        for ([key, value] of Object.entries(data)) {
            $('#questionRegimen_' + key).val(value.text);
        }

    }
    function Event_Element_Question_Regimen() {
        $(".questionRegimen").change(function () {
            let id = this.id.replace("questionRegimen_", "")
            data_regimen_question[id].text = this.value;
        });
        $('#dtTableRegimen tbody').on('click', '.buttonDeleteClass', function (event) {
            let timespan = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            delete data_regimen_question[timespan];
            $('#row_' + timespan).remove();
            event.stopPropagation();
        });
    }

    function Checking_Validate_Question_Regimen() {
        $('#textShowMessage').html('');
        let isError_ = 0;
        for ([key, value] of Object.entries(data_regimen_question)) {

            if (Number(value.text) == '') {
                $('#questionRegimen_' + key).css('background-color', 'rgb(255 216 216)'); isError_ = 1;
            }
            else $('#questionRegimen_' + key).css('background-color', 'white');

        }
        if (isError_ == 1) $('#textShowMessage').html(@Local["Kiểm Tra Dữ Liệu"]);
    }

</script>
<script>js_require('/js/main.js');</script>
<script>js_require('/js/customjs/custom-validation.js');</script>

<style type="text/css">
    #dtTableRegimen td {
        white-space: unset !important;
        padding: 0;
        padding-bottom: 5px;
    }

    #dtTableRegimen textarea {
        border-radius: 0 !important;
    }

    #dtTableRegimen {
        margin: 0;
    }
</style>


