@page
@model SourceMain.Pages.Customer.Diagnose.DiagnoseDetailTM
@{
    Layout = null;
}
<script>js_require_notasync('/assests/js/fabric.js', true);</script>
<script>js_require('/js/comon/initialize_setting.js');</script>
<div class="container-fluid py-3 px-0">
    <div class="row">
        <div class="col-12">
            <div id="diagnose_detail" style="min-height:500px">
                <div class="card-body pt-2">
                    <div class="mb-0 d-flex">
                        @*<div class="form-group  mx-2">
                <div class="input-group">
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="fas fa-hand-point-up"></i>
                        </a>
                    </span>
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="fas fa-pen"></i>
                        </a>
                    </span>
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="fas fa-eraser"></i>
                        </a>
                    </span>
                </div>
            </div>
            <div class="form-group  mx-2">
                <div class="input-group">
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="text-xs fas fa-circle"></i>
                        </a>
                    </span>
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="text-sm fas fa-circle"></i>
                        </a>
                    </span>
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="text-lg fas fa-circle"></i>
                        </a>
                    </span>
                </div>
            </div>
            <div class="form-group mx-2">
                <div class="input-group">
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="fas fa-square"></i>
                        </a>
                    </span>
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="fas fa-square"></i>
                        </a>
                    </span>
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="fas fa-square"></i>
                        </a>
                    </span>
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            <i class="fas fa-square"></i>
                        </a>
                    </span>
                </div>
            </div>
            <div class="form-group mx-2">
                <div class="input-group">
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            Undo
                        </a>
                    </span>
                    <span class="input-group-text p-0">
                        <a class="fw-bold nav-link cursor-pointer ">
                            Clear
                        </a>
                    </span>

                </div>
            </div>*@
                    </div>
                  
               
                    <div id="per_DiagnoseBodyArea">
                       
                        <div id="BodyArea">
                            <div class="row px-2">
                                <div class="col-12 col-md-6 col-xl-5 p-1 position-relative">
                                    <div class="d-flex justify-content-center">
                                        <object id="svgbody" type="image/svg+xml" data="/Canvas/body.svg" style="height:1px;"></object>
                                        <canvas id="canvasbody" width="300" height="500"></canvas>
                                    </div>
                                    <div id="diagnose_body_popupaction" class="position-absolute bg-white" style="z-index: 2000; display: none;">
                                        <div class=" rounded-3 shadow-lg p-3" style="width: 300px;">
                                            <label>@Local["Tìm kiếm"]</label>
                                            <input class="form-control" onkeyup="Key_SearchBody()" id="searchDiagnoseBody" type="text" placeholder="@Local["Tìm kiếm"]" autocomplete="off">
                                            <ul id="DiagBodyList" class="bg-white border-radius-lg d-block height-200 mt-2 nav nav-pills overflow-auto px-0">
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-6 col-xl-7 p-1">
                                    <div class="mt-4">
                                        <label>@Local["Chi tiết bệnh"]</label>
                                        <div class="overflow-auto" style="height: 270px;">
                                            <ul class="row font-weight-normal mx-auto p-0 m-0 " id="DiagBody_DataStatus">
                                            </ul>
                                        </div>
                                    </div>

                                    <div class="mt-2">
                                        <label>@Local["Ghi chú"]</label>
                                        <textarea id="DianoseBody_Note" class="form-control" name="content" rows="3"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-lg-flex">
                        <div class="ms-auto my-auto d-flex mb-3">
                            <div class="ui fluid search selection dropdown form-control col-w-200 d-none" id="Diagnose_FillForm" onchange="event.preventDefault(); return Diagnose_ChangeForm();">
                                <input type="hidden" name="statusType" />
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg. @Local["Loại"]</div>
                                <div id="Diagnose_CbbFillForm" class="menu" tabindex="-1">
                                </div>
                            </div>
                            <button class="btn bg-gradient-info my-0 ms-2 me-1 w-auto" onclick="Diagnose_Print()">@Local["In"]</button>
                        </div>
                    </div>
                    <div class="row overflow-auto border-dashed border-radius-md  border-1 border-secondary m-0 position-relative">
                        <div id="Diag_Waiting" class="position-absolute top-0 start-50 translate-middle waitingdiv text-center w-100 mt-5 d-none">
                            <div class="spinner-border text-primary" role="status">
                            </div>
                        </div>
                        <div class="row w-100 d-flex justify-content-center" id="Diag_DataQuestion">

                        </div>
                    </div>
                    <div class="row px-2 form3">
                        <div class="col-12 col-sm-12 p-1">
                            <label>@Local["Ghi chú"]</label>
                            <textarea id="DianoseFace_Note" class="form-control" name="content"></textarea>
                        </div>
                    </div>
                </div>
                <div class="card-footer fixed-botombutton">
                    <div class="action_Save">
                        <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
                        <div class="action_Save-Content">

                            <button class="btn btn-secondary" onclick="DiaDetail_Close()">@Local["Đóng"]</button>
                            <button id="BtnDiagnose_Delete" class="btn btn-danger" style="display: none;"
                                    onclick="event.preventDefault();DiaDetail_Delete()">
                                @Local["Xóa"]
                            </button>
                            <button type="button" class="btn bg-gradient-primary mt-2 me-3" id="Diagnose_btnSave" onclick="Diagnose_Save()">@Local["Lưu"]</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>


<script type="text/javascript">
    let Current_Question = [];
    let BodyStatus;
    let FaceStatus;
    let BodyFaceArray;
    let TeethType = 0;
    let TeethArray;
    let DiagnoseQuestion;
    let BodyFaceObjs;
    var Facepaths;
    var Bodypaths;
    var colorStrokeDefault = '#5A5A5A';
    var colorFillDefault = 'transparent';
    var colorFillChoose = '#ffa3a399';
    var FaceChoose = '';
    var BodyChoose = '';
    let FaceChooseData = {};
    let BodyChooseData = {};
   
    


    var DiagnoseStatus;
   
    //#region // Onload
    $(document).ready(function () {
        Diagnose_Detail_LoadOutside();
        $(".iconhover").popup({
            transition: "scale up",
            position: "top right"
        });
        $('#Diag_DataQuestion textarea').each(function() {
            this.setAttribute('style', 'height:' + (this.Height) + 'px;overflow-y:hidden;');
        });
        $(document).on("mousedown", function (e) {
            let canvasbody = $("#canvasbody");
            let popup2 = $("#diagnose_body_popupaction");
            if (!$(popup2).is(e.target) && $(popup2).has(e.target).length === 0
                && !$(canvasbody).is(e.target) && $(canvasbody).has(e.target).length === 0) {
                $("#diagnose_body_popupaction").hide();
            }


            let canvasface = $("#canvasface");
            let popup3 = $("#diagnose_face_popupaction");
            if (!$(popup3).is(e.target) && $(popup3).has(e.target).length === 0
                && !$(canvasface).is(e.target) && $(canvasface).has(e.target).length === 0) {
                $("#diagnose_face_popupaction").hide();
            }
        });

        CheckPermissionControlInPage(sys_PerControl, '@Model.CurrentPath');
        CheckPermissionControlInPage(sys_PerControlMH,'@Model.CurrentPath');
    });
    





    function Diagnose_Detail_LoadOutside () {
        CurrentFace_Question = [];
        CurrentBody_Question = [];
        BodyFaceArray = [];
        FaceStatus = []; BodyStatus = [];
        DiagnoseQuestion = [];
        $('#textShowMessage').html('');
        if (ser_DiagnoseDetail != 0) $('#BtnDiagnose_Delete').show();
        else {
            $('#Diagnose_FillForm').removeClass('d-none');
            $('#BtnDiagnose_Delete').hide();
        }
        Load_Initiliaze_Diagnose();
    }
    async function Load_Initiliaze_Diagnose () {
        return new Promise((resolve, reject) => {
            AjaxLoad(url = "/Customer/Diagnose/DiagnoseDetailTM/?handler=LoadInitialize"
                , data = {
                    'CurrentID': ser_DiagnoseDetail,
                    'CustomerID': ser_MainCustomerID
                }
                , async = false
                , error = function () {notiError_SW()}
                , success = function (result) {
                    if (result != "0") {
                        let data = JSON.parse(result);
                        //DiagnoseStatus = data.DiagnoseStatus;
 
                        //debugger
                        //DiagnoseQuestion = data.Question;
 
                        //DiaQuestionField = data.QuestionField;
                        //BodyFaceArray = data.AreaName;
                        //BodyFaceObjs = BodyFaceArray.reduce(function (r, e) {
                        //    r[e.ID] = e;
                        //    return r;
                        //}, {});
                        //Canvas_DrawIni("canvasbody", "svgbody", "body");
                        //Canvas_DrawIni("canvasface", "svgface", "face");
                        //$('#DiagFace_DataStatus').html('');
                        //$('#DiagBody_DataStatus').html('');

                        //if (ser_DiagnoseDetail == 0) {
                        //    Load_Combo(DiagnoseQuestion, "Diagnose_CbbFillForm", true)
                        //    $("#Diagnose_FillForm").dropdown('refresh');
                        //    $("#Diagnose_FillForm").dropdown('set selected', DiagnoseQuestion[0].ID);
                        //}
                        //if (DiagnoseStatus != undefined) {
                        //    FaceStatus = DiagnoseStatus.filter(word => word["Type"] == 'face');
                        //    Diagnose_RenderStatusList(FaceStatus, "DiagFaceList", 'face');
                        //    BodyStatus = DiagnoseStatus.filter(word => word["Type"] == 'body');
                        //    Diagnose_RenderStatusList(BodyStatus, "DiagBodyList", 'body');
                        //}
                        //Diagnose_StatusEvent();
                        //if (ser_DiagnoseDetail != 0) {
                        //    let dataDetail = data.DataDetail;
                        //    $('#Dianose_Note').val(dataDetail[0].Note)
                        //    $('#DianoseFace_Note').val(dataDetail[0].NoteFace)
                        //    $('#DianoseBody_Note').val(dataDetail[0].NoteBody)

                        //    if (dataDetail != undefined && dataDetail.length == 1) {
                        //        FaceChooseData = JSON.parse(dataDetail[0].DataFace);
                        //        BodyChooseData = JSON.parse(dataDetail[0].DataBody);
                        //        Diagnose_RenderStatus(FaceChooseData, FaceStatus, 'face', "DiagFace_DataStatus");
                        //        Diagnose_RenderStatus(BodyChooseData, BodyStatus, 'body', "DiagBody_DataStatus");
                        //        if (dataDetail[0].DataQuestion != '') {
                        //            Current_Question = JSON.parse(dataDetail[0].DataQuestion);
                        //            if (Current_Question != undefined) {
                        //                RenderDiagnose_Question(Current_Question, DiaQuestionField, "Diag_DataQuestion");
                        //            }
                        //        }
                        //    }
                        //}


                    } else {
                        notiError_SW();
                    }
                }
            );
        })
    }
    //#endregion

    //#region //  Status
    async function Diagnose_RenderStatusList (data, id, type) {
        return new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {

                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let tr = `
                            <li class="nav-item diagnose_${type} cursor-pointer" data-id="${item.ID}">
                                <a class="text-sm nav-link cursor-pointer" data-hover >${item.Name}</a>
                            </li>
                        `
                        stringContent = stringContent + tr;
                    }
                }
                document.getElementById(id).innerHTML = stringContent;
            }
            Diagnose_StatusEvent();
        })
    }
    function Diagnose_StatusEvent () {
        $(".diagnose_face").unbind('click').click(function () {
            if (FaceChoose != '') {
                let id = $(this).attr("data-id");
                let key = (new Date()).getTime();
                let e = {};
                e.id = id;
                e.area = FaceChoose;
                FaceChooseData[key] = e;
                Diagnose_RenderStatus(FaceChooseData, FaceStatus, 'face', "DiagFace_DataStatus");
                FaceChoose = '';
                Canvas_DrawWhole("canvasface", Facepaths, FaceChoose);
                $("#diagnose_face_popupaction").hide();
            }
        })
        $(".diagnose_body").unbind('click').click(function () {
            if (BodyChoose != '') {
                let id = $(this).attr("data-id");
                let key = (new Date()).getTime();
                let e = {};
                e.id = id;
                e.area = BodyChoose;
                BodyChooseData[key] = e;
                Diagnose_RenderStatus(BodyChooseData, BodyStatus, 'body', "DiagBody_DataStatus");
                BodyChoose = '';
                Canvas_DrawWhole("canvasbody", Bodypaths, BodyChoose);
                $("#diagnose_body_popupaction").hide();
            }
        })
    }
    async function Diagnose_RenderStatus (data, datastatus, type, id) {
        return new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                for ([key, value] of Object.entries(data)) {
                    let area, status = '', _color = 'white';
                    area = Fun_GetString_ByToken(BodyFaceObjs, value.area);
                    let _d = datastatus.filter(word => word["ID"] == value.id);
                    if (_d != undefined && _d.length == 1) {
                        status = _d[0].Name;
                        _color = _d[0].Color;
                    }
                    let tr = `
                        <div class="col-12 col-md-6 col-xl-4 px-1 mt-2">
                            <div class="px-2 py-0 ps-0">
                                <div class="d-flex ">
                                    <span style="height: 23px; background:${_color}" class="badge me-2 mt-1"> </span>
                                    <div class="d-flex flex-column justify-content-center">
                                        <h6 class="text-dark fw-bold mb-0 text-sm">${status}</h6>
                                        <h6 class="d-inline mb-0  text-sm">${area}</h6>
                                    </div>
                                    <div class="d-flex ms-auto">
                                        <button data-id='${key}' class="btn btn-link btn-icon-only btn-rounded btn-sm text-dark my-auto removeStatus${type}"><i class="remove icon removeStatusTeeth"></i></button>
                                    </div>
                                </div>
                            </div>
                            <hr class="horizontal dark my-2">
                        </div>
                    `
                    document.getElementById(id).insertAdjacentHTML('beforeend', tr);
                    i++;
                }
            }
            $(".removeStatus" + type).click(function () {
                let id = $(this).attr("data-id");
                if (type == 'face') {

                    delete FaceChooseData[id];
                    Diagnose_RenderStatus(FaceChooseData, FaceStatus, 'face', "DiagFace_DataStatus")
                }
                else{
                    delete BodyChooseData[id];
                    Diagnose_RenderStatus(BodyChooseData, BodyStatus, 'body', "DiagBody_DataStatus");
                }
            })
        })
    }
    //#endregion


    //#region // Canvas
    function Canvas_DrawIni (can, svg, type) {
        var a = document.getElementById(svg);
        a.addEventListener("load", function () {
            var svgDoc = a.contentDocument;
            if (type == 'face') {
                Facepaths = svgDoc.querySelectorAll('path');
                Canvas_DrawLayout(can, Facepaths, type);
            }
            else {
                Bodypaths = svgDoc.querySelectorAll('path');
                Canvas_DrawLayout(can, Bodypaths, type);
            }
        }, false);
    }
    function Canvas_DrawWhole (can, paths, choosen) {
        var canvas = document.getElementById(can);
        var ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.beginPath();
        for (var i = 0; i < paths.length; i++) {
            var x = paths[i];
            var path = x.getAttribute("d");
            let dataid = x.getAttribute('data-id');
            var p = new Path2D(path);
            ctx.strokeStyle = colorStrokeDefault;
            ctx.stroke(p);
            if ((',' + choosen).includes(',' + dataid + ',')) {
                ctx.fillStyle = colorFillChoose;
            }
            else {
                ctx.fillStyle = colorFillDefault;
            }

            ctx.fill(p);

        }
    }
    function Canvas_DrawLayout (can, paths, type) {
        var canvas = document.getElementById(can);
        var ctx = canvas.getContext('2d');
        Canvas_DrawWhole(can, paths, '');
        canvas.addEventListener("click", function (e) {
            for (var i = 0; i < paths.length; i++) {
                var r = this.getBoundingClientRect();
                var x1 = e.clientX - r.left
                var y1 = e.clientY - r.top;
                var x = paths[i];
                let dataid = x.getAttribute('data-id');
                if (dataid != undefined && dataid != "0") {
                    var path = x.getAttribute("d");
                    var p = new Path2D(path);

                    if (ctx.isPointInPath(p, x1, y1)) {
                        if (type == 'face') {
                            if ((',' + FaceChoose).includes(',' + dataid + ',')) {
                                FaceChoose = FaceChoose.replace(dataid + ',', '')
                            }
                            else {
                                FaceChoose = FaceChoose + dataid + ','
                            }
                            Canvas_DrawWhole(can, paths, FaceChoose);
                            if(!$("#diagnose_face_popupaction").is(":visible"))
                                $("#diagnose_face_popupaction").css({
                                    "top": 50,"left": '95%'
                                }).animate({
                                    "left": '100%'
                                }).show();
                        }
                        else {
                            if ((',' + BodyChoose).includes(',' + dataid + ',')) {
                                BodyChoose = BodyChoose.replace(dataid + ',', '')
                            }
                            else {
                                BodyChoose = BodyChoose + dataid + ','
                            }
                            Canvas_DrawWhole(can, paths, BodyChoose);
                            if (!$("#diagnose_body_popupaction").is(":visible"))
                                $("#diagnose_body_popupaction").css({
                                    "top": 50,"left": '95%'
                                }).animate({
                                    "left": '100%'
                                }).show();
                        }
                    }
                }
            }
        })



    }



    //#region //  Question
    async function RenderDiagnose_Question (data, datafield, id) {
        return new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                fn_RenderForm(myNode, data);
                if (datafield != undefined && datafield.length == 1) {
                    fn_FillForm(item = datafield[0], id = id);
                }
                Diagnose_QuestionEvent();

            }
        })
    }
    function Diagnose_QuestionEvent () {
        $("#Diag_DataQuestion input[type='checkbox']").change(function (event) {
            let answer = this.checked;
            let id = $(this).attr("id");
            fn_FormUpdate(id, answer, Current_Question);
        });
        $("#Diag_DataQuestion input[type='radio']").change(function (event) {
            let id = $(this).attr("id");
            let name = $(this).attr("name");
            let _obj = $('#Diag_DataQuestion input[type="radio"][name="' + name + '"]');
            if (_obj != undefined) {
                _obj.each(function () {
                    if ($(this).attr("id") == id) {
                        fn_FormUpdate($(this).attr("id"), 'on', Current_Question);
                    } else fn_FormUpdate($(this).attr("id"), '', Current_Question);

                });
            }
        });

        Diagnose_QuestionEvent_Textarea();
    }

    function Diagnose_QuestionEvent_Textarea() {
        $("#Diag_DataQuestion input[type!='checkbox'][type!='radio'],#Diag_DataQuestion textarea").change(function () {
            let id = $(this).attr("id");
            let answer = $(this).val();
            fn_FormUpdate(id, answer, Current_Question);
        })
        $('#Diag_DataQuestion textarea').each(function () {
            this.setAttribute('style', 'height:' + (this.scrollHeight) + 'px;overflow-y:hidden;');
        }).on('input', function () {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });
    }

    function Diagnose_Print () {
        fn_Print(printedid = "Diag_DataQuestion"
            , beforefun = function () {
                $('#Diag_Waiting').removeClass('d-none');
                $("#Diag_DataQuestion textarea").replaceWith(function () {
                    return $("<pre />", {
                        id: $(this).attr('id'),
                        html: $(this).val(),
                        class: this.classList.value,
                        css: { "white-space": "break-spaces" }
                    })
                })
            }
            , afterfun = function () {
                $('#Diag_Waiting').addClass('d-none');
                $("#Diag_DataQuestion pre").replaceWith(function () {
                    return $("<textarea />", {
                        id: $(this).attr('id'),
                        html: $(this).html(),
                        class: this.classList.value,
                        css: { "oveflow-y": "hidden" }
                    })
                });
                Diagnose_QuestionEvent_Textarea();
            }
        );

    }
    function Diagnose_Save () {

        let Dia_Note = $('#Dianose_Note').val() ? $('#Dianose_Note').val() : '';
        let DiaFace_Note = $('#DianoseFace_Note').val() ? $('#DianoseFace_Note').val() : '';
        let DiaBody_Note = $('#DianoseBody_Note').val() ? $('#DianoseBody_Note').val() : '';

        AjaxLoad(url = "/Customer/Diagnose/DiagnoseDetailTM/?handler=ExcuteData"
            , data = {
                'CurrentID': ser_DiagnoseDetail,
                'CustomerID': ser_MainCustomerID,
                'dataFace': JSON.stringify(FaceChooseData),
                'dataBody': JSON.stringify(BodyChooseData),
                'dataQues': JSON.stringify(Current_Question),
                'Note': Dia_Note,
                'NoteFace': DiaFace_Note,
                'NoteBody': DiaBody_Note
            }
            , async = true
            , error = function () {notiError_SW()}
            , success = function (result) {
                if (result != "0") {
                    if (typeof DiaList_Load !== 'undefined') {
                        DiaList_Load();
                    }
                    syslog_cutdia(ser_DiagnoseDetail == 0 ? 'i' : 'u', ser_MainCustomerID, '');
                    notiSuccess();
                }
            }
            , sender = $('#Diagnose_btnSave')
        );
        $('#textShowMessage').html('');
        return false

    }
    //#endregion
    function Key_SearchFace () {
        let search = xoa_dau($('#searchDiagnoseFace').val().toLowerCase());
        data = FaceStatus.filter(word => xoa_dau((word["Name"]).toLowerCase()).includes(search));
        Diagnose_RenderStatusList(data, "DiagFaceList", 'face');
    }
    function Key_SearchBody () {
        let search = xoa_dau($('#searchDiagnoseBody').val().toLowerCase());
        data = BodyStatus.filter(word => xoa_dau((word["Name"]).toLowerCase()).includes(search));
        Diagnose_RenderStatusList(data, "DiagBodyList", 'body');
    }
    //#endregion

    //#region //Event

    function Diagnose_ChangeForm () {
        let TemplateID = Number($("#Diagnose_FillForm").dropdown("get value")) ? Number($("#Diagnose_FillForm").dropdown("get value")) : 0;
        let DTQuestion = DiagnoseQuestion.filter(item => item.ID == TemplateID);

        if (DTQuestion.length == 1) {
            Current_Question = JSON.parse(DTQuestion[0].Form);
            RenderDiagnose_Question(Current_Question, questionField, "Diag_DataQuestion");
        }
    }

    //#endregion


</script>

<script>js_require('/js/customjs/custom-validation.js');</script>
<script>js_require('/js/main.js');</script>

<style>
    #Diag_DataQuestion textarea {
        border: 1px solid #e2e2e2 !important;
        resize: none;
    }
</style>


