@page
@model MLunarCoffee.Pages.Customer.DentistChart.DentistChartCanvas
@{
    Layout = null;
}

<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require('/js/comon/html2canvas.js');</script>
<div class="card">
    <div class="card-header pb-0">
        <div class="d-lg-flex">
            <div class="w-50 col-auto my-auto">
                <div class="h-100">
                    <h6 class="mb-0">@Local["Tình trạng răng"]</h6>
                    <p class="text-sm mb-0">@Local["Tình trạng răng người trưởng thành và trẻ em"]</p>

                </div>
            </div>
            <div class="ms-auto my-auto mt-1">
            </div>
        </div>

    </div>

    <div class="card-body pt-2 pb-0">
        <div id="CandisArea_Short" class="p-1 mb-2">
            <div id="Candisease_Short" class="pt-2 px-1 row">
            </div>
        </div>
        <div class="d-lg-flex">
            <div id="CandisArea_Large" class="p-1 col-w-300" style="width: 350px;">
                <div class="input-group flex-nowrap" id="Dissearch_Area">
                    <div class="input-group-text input-group-text px-2">
                        <i class="fas fa-search" aria-hidden="true"></i>
                        <div class="spinner-border spinner-border-sm d-none"></div>
                    </div>
                    <input id="Dissearch_Input" type="text" class="form-control" placeholder="eg .@Local["Tìm kiếm"]">
                    <div class="input-group-text"><i class="btn_clear fas fa-minus-circle opacity-1"></i></div>
                </div>
                <div class="overflow-auto" style="height: calc(100vh - 150px);">
                    <div id="Candisease" class="pt-2 ps-0">
                    </div>
                </div>
            </div>

            <div class="p-1 w-100">
                <div class="position-relative mt-n4" style="height: 410px;">
                    <div class="overflow-auto position-absolute end-0 start-0 d-xxl-flex justify-content-center" id="Canteeth_TeethArea">
                        <div id="Canteeth_UpDown" class="position-relative ">
                            <div id="Canteeth_Up" class="w-100 d-flex justify-content-center pb-2 z-index-1 overflow-hidden">
                            </div>
                            <hr class="horizontal dark my-1">
                            <div id="CanteethVR"></div>
                            <div id="Canteeth_Down" class="w-100 d-flex justify-content-center pt-2 z-index-1 overflow-hidden">
                            </div>
                        </div>

                    </div>

                </div>
                <div class="mt-3">
                    <div class="row">
                        <div class="col-12 col-sm-12">
                            <h6 class="my-3 fw-bold text-sm">@Local["Chi tiết răng"]</h6>
                            <div class="m-0 my-3 ">
                                <table class="table vt-table mb-0" id="CanDisease_Detail">
                                    <thead>
                                        <tr>
                                            <th style="text-align: center; width: 30px;">@Local["#"]</th>
                                            <th style="text-align: center; width: 100px;">@Local["Răng"]</th>
                                            <th>@Local["Tình trạng"]</th>
                                            <th>@Local["Phân loại"]</th>
                                            <th style="min-width: 150px;">@Local["Điều trị"] </th>
                                            <th style="min-width: 150px;">@Local["Ghi chú"] </th>
                                            <th style="text-align: center; width: 30px;">@Local["#"]</th>

                                        </tr>
                                    </thead>
                                    <tbody id="CanDisease_DetailBody">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="col-12 col-sm-12">
                      
                            <div class="row px-1 form3" id="formteeth">
                                <div class="field col-12 px-1 mt-2">
                                    <label>@Local["Ghi chú"]</label>
                                    <textarea id="Canteeth_Note" name="name" class="form-control" rows="2" placeholder="eg .@Local["Ghi chú"]"></textarea>
                                </div>
                            </div>
                            <div class="row px-1">
                                <div class="field col-12 col-lg-12 px-1 mt-2">
                                    <label>@Local["Cận lâm sàn"]</label>
                                    <textarea id="Canteeth_Subclinical" name="name" class="form-control" rows="2" placeholder="eg .@Local["Cận lâm sàn"]"></textarea>
                                </div>
                                <div class="field col-12 col-lg-12 px-1 mt-2">
                                    <label>@Local["Chẩn đoán"]</label>
                                    <textarea id="Canteeth_Diagnose" name="name" class="form-control" rows="2" placeholder="eg .@Local["Chẩn đoán"]"></textarea>
                                </div>
                            </div>
                            <div class="row px-1">
                                <div class="field col-12 col-lg-6 px-1 mt-2">
                                    <label>@Local["Chỉ định điều trị"]</label>
                                    <textarea id="Canteeth_IndicaTreat" name="name" class="form-control" rows="2" placeholder="eg .@Local["Chỉ định điều trị"]"></textarea>
                                </div>
                                <div class="field col-12 col-lg-6 px-1 mt-2">
                                    <label>@Local["Thời gian điều trị ước tính"]</label>
                                    <textarea id="Canteeth_EstimatedTreat" name="name" class="form-control" rows="2" placeholder="eg .@Local["Thời gian điều trị ước tính"]"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="card-body pt-2" id="Dendis_PrintDiv" style="display:none;">
        <div class="overflow-auto border-dashed border-radius-md  border-1 border-secondary m-0 position-relative p-3">
            <div class="row w-100 d-flex justify-content-center position-absolute" id="Dendis_PrintForm">
            </div>
        </div>
    </div>
    <div class="card-footer fixed-botombutton pt-0">
        <div class="action_Save">
            <div class="action_Save-Content">
                <div id="Dendis_Print_WaitingDiv" class="ms-n4 mt-4 position-absolute text-center top-0 translate-middle waitingdiv d-none">
                    <div class="spinner-border text-primary" role="status">
                    </div>
                </div>
                <button id="btnDenprint" class="btn btn-success d-none" form="formteeth" onclick="Dendis_Print()">@Local["In"]</button>
                <button class="btn btn-secondary" form="formteeth" onclick="Dendis_Cancel()">@Local["Đóng"]</button>
                <button id="btnDensave" form="formteeth" type="button" class="btn bg-gradient-primary mt-2 me-2 d-none" onclick="Dendis_Save()">@Local["Lưu"]</button>
            </div>
        </div>
    </div>

</div>

<script type="text/javascript">


    var TeethChart_Type = '@Model._Type';
    var TeethChart_ID = '@Model._CurrentID';
    var TeethSelected = {};
    var ImageCollection = {};
    var TeethCollection = [];
    var TeethCollkv = {}
    var DiseaseList = {};
    var DiseaseCatList = {};
    var TeethHeight = 90, TeethWidth = 40;
    var TeethCircle = 40;
    var Teethcanvas, Teethctx;
    var Teethpaths = {};
    var Dissearch_Timer;
    var Diss_Timeout;
    var CurrentDisease = [];
    var DiseaseCollection = [];
    var DisClassi = [];
    var canpattern = Canele_Pattern('green', 3);
    $(document).ready(function () {
        Dencan_Load();
        Dencan_Search();
        if (TeethChart_Type == 1) {
            $('#Canteeth_UpDown').width(884);
        }
        else {
            $('#Canteeth_UpDown').width(544);
        }
        if (isCurrentView_Detail == 0) {
            $('#btnDensave').removeClass('d-none');
        }
        else {
            $('#btnDensave').addClass('d-none');
            $('#btnDensave').remove();
            $('#btnDenprint').removeClass('d-none');
        }
    });
    function Dencan_Load() {
        AjaxLoad(url = "/Customer/DentistChart/DentistChartCanvas/?handler=LoadIni"
            , data = { 'Type': TeethChart_Type }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                let datas = JSON.parse(result);
                TeethCollection = datas.TeethDefault;
                DiseaseCollection = datas.TeethDisease;
                DisClassi = datas.Classi;
                

                let dataimg = datas.ImageDisease;
                Dendis_Render(DiseaseCollection, "Candisease", function () {
                    $('#Candisease .collapsesticky').first().addClass('show');
                });
                Dendis_RenderShort(DiseaseCollection, "Candisease_Short");
                for (let i = 0; i < DiseaseCollection.length; i++) {
                    DiseaseList[DiseaseCollection[i].ID] = DiseaseCollection[i];
                    if (!DiseaseCatList[DiseaseCollection[i].Type])
                        DiseaseCatList[DiseaseCollection[i].Type] = DiseaseCollection[i];
                }
                for (let i = 0; i < dataimg.length; i++) {
                    ImageCollection[dataimg[i].ID] = dataimg[i];
                }
                for (let i = 0; i < TeethCollection.length; i++) {
                    TeethCollkv[TeethCollection[i].ID] = TeethCollection[i];
                }

                let dataUp = TeethCollection.filter(word => word["UpDown"] == "U");
                let dataDown = TeethCollection.filter(word => word["UpDown"] == "D");

                Dencan_Render(dataUp, 'Canteeth_Up', 'U');
                Dencan_Render(dataDown, 'Canteeth_Down', 'D');
         
                Can_DrawDefault($('.canvasTeethFace'), TeethWidth, TeethHeight
                    , function (paths) {
                        Object.assign(Teethpaths, paths);
                    }
                    , unselect = function (dataid, canid) {
                        let objid = dataid.toString() + '-' + canid.toString();
                        delete TeethSelected[objid];
                        Can_ClearRootFace(teeth = canid, function () {
                            for (const [key, value] of Object.entries(TeethSelected)) {
                                if (value.Teeth == canid) {
                                    let _passid = 'teethface_' + value.Teeth + '_' + value.Part;
                                    let _canvasid = 'teethface_' + value.Teeth;
                                    var canvas = document.getElementById(_canvasid);
                                    var ctx = canvas.getContext('2d');
                                    Can_DrawSelected(ctx, Teethpaths[_passid].path);
                                }
                            }
                            for (let k = 0; k < CurrentDisease.length; k++) {
                                if (CurrentDisease[k].Teethid == canid) {
                                    let _disdata = JSON.parse(DiseaseList[CurrentDisease[k].Diseaseid].Data).data;
                                    let _distype = DiseaseList[CurrentDisease[k].Diseaseid].Type;
                                    Dencan_DrawDisease(CurrentDisease[k].Teethid, CurrentDisease[k].Part, _disdata, _distype);
                                }
                            }
                        });

                    }
                    , goselect = function (dataid, canid) {
                        let objid = dataid.toString() + '-' + canid.toString();
                        let e = {};
                        e.Part = dataid;
                        e.Teeth = canid;
                        TeethSelected[objid] = e;
                    });
                Can_DrawDefault($('.canvasTeethCircle'), TeethCircle, TeethCircle
                    , function (paths) {
                        Object.assign(Teethpaths, paths);
                    }
                    , unselect = function (dataid, canid) {
                        let objid = dataid.toString() + '-' + canid.toString();
                        delete TeethSelected[objid];
                        Can_ClearCircle(teeth = canid, function () {
                            for (const [key, value] of Object.entries(TeethSelected)) {
                                if (value.Teeth == canid) {
                                    let _passid = 'teethcircle_' + value.Teeth + '_' + value.Part;
                                    let _canvasid = 'teethcircle_' + value.Teeth;
                                    var canvas = document.getElementById(_canvasid);
                                    var ctx = canvas.getContext('2d');
                                    Can_DrawSelected(ctx, Teethpaths[_passid].path);
                                }
                            }
                            for (let k = 0; k < CurrentDisease.length; k++) {
                                if (CurrentDisease[k].Teethid == canid) {
                                    let _disdata = JSON.parse(DiseaseList[CurrentDisease[k].Diseaseid].Data).data;
                                    let _distype = DiseaseList[CurrentDisease[k].Diseaseid].Type;
                                    Dencan_DrawDisease(CurrentDisease[k].Teethid, CurrentDisease[k].Part, _disdata, _distype);
                                }
                            }
                        });
                    }, goselect = function (dataid, canid) {
                        let objid = dataid.toString() + '-' + canid.toString();
                        let e = {};
                        e.Part = dataid;
                        e.Teeth = canid;
                        TeethSelected[objid] = e;
                    });
                if (TeethChart_ID != 0) {
                    Dendis_LoadDetail();
                }
            }

        );
    }

    function Dentist_AddDisease(diseaseID, type) {
        for (const [key, value] of Object.entries(TeethSelected)) {
            let isAdd = 0;
            if (value.Part == 'face' || value.Part == 'root') {
                if (type == 1) {
                    isAdd = 1;
                    let currf = CurrentDisease.filter(v => v.Diseaseid == diseaseID
                        && v.Teethid == value.Teeth && (v.Part == 'face' || v.Part == 'root'));
                    if (currf != undefined && currf.length > 0) isAdd = 0;
                }

            }
            else {
                if (type == 2) {
                    isAdd = 1
                };
            }

            let curdis = CurrentDisease.filter(v => v.Diseaseid == diseaseID
                && v.Teethid == value.Teeth && v.Part == value.Part);
            if (curdis != undefined && curdis.length > 0) isAdd = 0;
            if (isAdd == 1) {
                let e = {};
                e.Detailid = 0;
                e.Diseaseid = diseaseID;
                e.Classification = 0;
                e.Type = type;
                e.Note = "";
                e.Treat = "";
                e.DeleteButton = 1;
                e.Part = value.Part;
                e.Teethid = value.Teeth;
                CurrentDisease.push(e);
            }
        }
        Dendis_RenderDisease(CurrentDisease, "CanDisease_DetailBody");
    }
    async function Dencan_Draw1Teeth(indexteeth, datadisease, diseasetype) {
        new Promise((resolve) => {
            Can_ClearWholeTeeth(indexteeth, function () {
                for (const [key, value] of Object.entries(TeethSelected)) {
                    if (value.Teeth == indexteeth) {
                        if (datadisease != '') {
                            Dencan_DrawDisease(value.Teeth, value.Part, datadisease, diseasetype);
                            delete TeethSelected[key];
                        }

                    }
                }
                for (let k = 0; k < CurrentDisease.length; k++) {
                    if (CurrentDisease[k].Teethid == indexteeth) {
                        let _disdata = JSON.parse(DiseaseList[CurrentDisease[k].Diseaseid].Data).data;
                        let _distype = DiseaseList[CurrentDisease[k].Diseaseid].Type;
                        Dencan_DrawDisease(CurrentDisease[k].Teethid, CurrentDisease[k].Part, _disdata, _distype);
                    }
                }
            })
        });
    }
    async function Dencan_DrawDisease(teeth, part, datadisease, typedisease) {
        new Promise((resolve) => {
            let isallowdraw = 0;
            if (part == 'face' || part == 'root') {
                if (typedisease == 1) isallowdraw = 1;
            }
            else {
                if (typedisease == 2) isallowdraw = 1;
            }
            if (isallowdraw == 1) {
                if (typedisease == 2) {
                    Dencan_DrawItem(teeth, part, datadisease[0].data, iscircle = 1);
                }
                else {

                    for (let i = 0; i < datadisease.length; i++) {
                        let area = datadisease[i].area;
                        let data = datadisease[i].data;
                        switch (area) {
                            case "rootface": {
                                for (let j = 0; j < data.length; j++) {
                                    Dencan_DrawItem(teeth, data[j].area, data[j].data, iscircle = 0);
                                }
                                break;
                            }
                            case "l": case "t": case "r": case "b": case "c": {
                                Dencan_DrawItem(teeth, area, data, iscircle = 1);
                                break;
                            }
                        }
                    }
                }
            }
        });
    }
    function Dencan_DrawItem(teeth, part, datadesign, iscircle) {
        var canvas, ctx, _2d, _typedesign;
        var objid, canvasid;
        if (iscircle == 1) {
            objid = 'teethcircle' + '_' + teeth + '_' + part;
            canvasid = 'teethcircle' + '_' + teeth;
        }
        else {
            objid = 'teethface' + '_' + teeth + '_' + part;
            canvasid = 'teethface' + '_' + teeth;
        }
        canvas = document.getElementById(canvasid);
        ctx = canvas.getContext('2d');
        if (Teethpaths[objid] != undefined) {
            _2d = Teethpaths[objid].path;
            _typedesign = Teethpaths[objid].type;
            for (let xx = 0; xx < datadesign.length; xx++) {

                switch (datadesign[xx].type) {
                    case "color":
                        if (datadesign[xx].having == "1") {
                            let canpattern = Canele_Pattern(datadesign[xx].fill, 4);
                            let pattern = ctx.createPattern(canpattern, "repeat");
                            ctx.fillStyle = pattern;
                            ctx.strokeStyle = datadesign[xx].stroke;
                            ctx.fill(_2d);
                            ctx.stroke(_2d);
                        }
                        break;
                    case "text":
                        if (datadesign[xx].having == "1") {
                            $('#teethfacetext_' + teeth).html(datadesign[xx].content);
                            $('#teethfacetext_' + teeth).css("color", datadesign[xx].stroke);
                            $('#teethfacetext_' + teeth).css("background-color", datadesign[xx].fill);
                        }
                        break;
                    case "pattern":
                        if (datadesign[xx].having == "1") {
                            let img = new Image();
                            img.src = ser_imageFeature_Disease + datadesign[xx].patternlink + '.png';
                            img.onload = function () {
                                var pattern = ctx.createPattern(img, 'repeat');
                                ctx.fillStyle = pattern;
                                ctx.fill(_2d);
                            };
                        }
                        break;
                    case "image":
                        if (datadesign[xx].having == "1") {
                            let linkimage = Dencan_GetImage(datadesign[xx].imageid, _typedesign);
                            var img = new Image();

                            linkimage = ser_imageFeature_Disease + linkimage + '.svg';
                             
                            img.src = linkimage;
                            img.onload = function () {
                                if (_typedesign == "circle") {
                                    ctx.beginPath();
                                    switch (part) {
                                        case "l":
                                            ctx.drawImage(img, 0, 13, 14, 14);
                                            //ctx.arc(7, 20, 7, 0, 2 * Math.PI);
                                            break;

                                        case "t":
                                            ctx.drawImage(img, 13, 0, 14, 14);
                                            //ctx.arc(20, 7, 7, 0, 2 * Math.PI);
                                            break;

                                        case "r":
                                            ctx.drawImage(img, 23, 13, 14, 14);
                                            //ctx.arc(33, 20, 7, 0, 2 * Math.PI);
                                            break;
                                        case "b":
                                            ctx.drawImage(img, 13, 23, 14, 14);
                                            //ctx.arc(20, 33, 7, 0, 2 * Math.PI);
                                            break;
                                        case "c":
                                            ctx.drawImage(img, 13, 13, 14, 14);
                                            //ctx.arc(20, 20, 7, 0, 2 * Math.PI);
                                            break;
                                    }
                                    ctx.fillStyle = 'red';
                                    ctx.fill();
                                }
                                else {
                                    ctx.drawImage(img, 0, 0, TeethWidth, TeethHeight);
                                }
                            }
                        }
                        break;
                }
            }
        }
    }
    function Dencan_GetImage (imageid, typesign) {
      
        let _image = ImageCollection[imageid];
        let resulf = "";
        switch (typesign) {
            case "r1u": resulf = _image.r1u; break;
            case "r3u": resulf = _image.r3u; break;
            case "r1d": resulf = _image.r1d; break;
            case "r3d": resulf = _image.r3d; break;
            case "circle": resulf = _image.circle; break;
            default: break;
        }
        return resulf;
    }

    function Dendis_LoadDetail() {
        AjaxLoad(url = "/Customer/DentistChart/DentistChartCanvas/?handler=LoadDetail"
            , data = { 'currentid': TeethChart_ID }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                let datas = JSON.parse(result);
                let info = datas.Table;
                CurrentDisease = datas.Table1;
                
                if (info != undefined && info.length == 1) {
                    let item = info[0];
                    $('#Canteeth_Note').val(item.Note);
                    $('#Canteeth_Subclinical').val(item.Subclinical);
                    $('#Canteeth_Diagnose').val(item.Diagnose);
                    $('#Canteeth_IndicaTreat').val(item.IndicaTreat);
                    $('#Canteeth_EstimatedTreat').val(item.EstimatedTreat);
                }
                Dendis_RenderDisease(CurrentDisease, "CanDisease_DetailBody");
                Dendis_RenderDetail();
            }

        );
    }

    async function Dendis_RenderDetail() {
        new Promise((resolve) => {
          
            Diss_Timeout = setInterval(function () {
                if ((Object.keys(Teethpaths).length == 224 && TeethChart_Type == 1)
                    || (Object.keys(Teethpaths).length == 140 && TeethChart_Type == 2)) {

                    clearInterval(Diss_Timeout)
                    for (let k = 0; k < CurrentDisease.length; k++) {
                        
                        let _disdata = JSON.parse(DiseaseList[CurrentDisease[k].Diseaseid].Data).data;
                        let _distype = DiseaseList[CurrentDisease[k].Diseaseid].Type;
                        Dencan_DrawDisease(CurrentDisease[k].Teethid, CurrentDisease[k].Part, _disdata, _distype);
                    }

                }
            }, 100);

        });
    }
    function Dendis_Save() {
        $('#formteeth').form('validate form');
        if ($('#formteeth').form('is valid')) {

            let objData = {};
            objData.Note = $('#Canteeth_Note').val() ? $('#Canteeth_Note').val() : "";
            objData.Subclinical = $('#Canteeth_Subclinical').val() ? $('#Canteeth_Subclinical').val() : "";
            objData.Diagnose = $('#Canteeth_Diagnose').val() ? $('#Canteeth_Diagnose').val() : "";
            objData.IndicationsTreat = $('#Canteeth_IndicaTreat').val() ? $('#Canteeth_IndicaTreat').val() : "";
            objData.EstimatedTreat = $('#Canteeth_EstimatedTreat').val() ? $('#Canteeth_EstimatedTreat').val() : "";
            objData.Type = TeethChart_Type;
            objData.CustomerID = ser_MainCustomerID;

            AjaxLoad(url = "/Customer/DentistChart/DentistChartCanvas/?handler=Execute"
                , data = {
                    'data': JSON.stringify(CurrentDisease),
                    'dataDetail': JSON.stringify(objData),
                    'CurrentID': TeethChart_ID
                }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result) {
                    if (result == "1") {
                        notiSuccess();
                        syslog_cutteeth(TeethChart_ID == 0 ? 'i' : 'u', ser_MainCustomerID, '');
                        if (typeof Dendis_Cancel === "function") Dendis_Cancel();
                        if (typeof MainCust_AcceptTeeth === "function") MainCust_AcceptTeeth();
                        if (typeof CDC_Load === "function") CDC_Load(TeethChart_ID, 0);
                    }
                    else {
                        notiError_SW();
                    }
                }
                , sender = $("#btnDensave")
            );
        }
    }

    //#region //  Render disease
    function Dendis_Event() {
        $("#Candisease .diseaseitem,#Candisease_Short .diseaseitem").unbind().click(function () {
            let diseaseID = $(this).attr('data_id');

            if (Object.keys(TeethSelected).length != 0) {
                if (DiseaseList[diseaseID] != undefined && DiseaseList[diseaseID] != '') {
                    let datadisease = JSON.parse(DiseaseList[diseaseID].Data).data;
                    let diseasetype = DiseaseList[diseaseID].Type;
                    Dentist_AddDisease(diseaseID, diseasetype)
                    let listteeth = [];
                    for (const [key, value] of Object.entries(TeethSelected)) {
                        listteeth.push(value.Teeth)
                    }
                    let uniqueTeeth = [...new Set(listteeth)]
                    for (let i = 0; i < uniqueTeeth.length; i++) {
                        let indexteeth = uniqueTeeth[i];
                        Dencan_Draw1Teeth(indexteeth, datadisease, diseasetype);
                    }
                }
            }
        });
    }
    function Dencan_Search() {
        $('#Dissearch_Input').keyup(function () {
            if ($(this).val().length > 0) $("#Dissearch_Area .btn_clear").removeClass('opacity-1');
            else $("#Dissearch_Area .btn_clear").addClass('opacity-1');
            $("#Dissearch_Area .fa-search").hide();
            $("#Dissearch_Area .spinner-border").removeClass('d-none');
            clearTimeout(Dissearch_Timer);
            Dissearch_Timer = setTimeout(function (e) {
                Dissearch_Filter("Candisease");
            }, 500);
        });
        $("#Dissearch_Area").on('click', '.btn_clear', function (e) {
            $('#Dissearch_Input').val('');
            $("#Dissearch_Area .btn_clear").addClass('opacity-1');
            Dissearch_Filter("Candisease");
        });
    }
    async function Dissearch_Filter(id) {
        await new Promise((resolve, reject) => {
            setTimeout(
                () => {

                    let textsearch = $('#Dissearch_Input').val().trim();
                    if (textsearch == "") {
                        Dendis_Render(DiseaseCollection, id, function () { $('#Candisease .collapsesticky').addClass('show'); });
                    }
                    else {
                        let search = xoa_dau(textsearch.toLowerCase());
                        if (search == "") {
                            Dendis_Render(DiseaseCollection, id, function () { $('#Candisease .collapsesticky').addClass('show'); });
                        }
                        else {

                            let data = DiseaseCollection.filter(word => {
                                return (xoa_dau(word.Name.toLowerCase()).includes(search));
                            });
                            Dendis_Render(data, id, function () { $('#Candisease .collapsesticky').addClass('show'); });
                        }
                    }
                    $("#Dissearch_Area .fa-search").show();
                    $("#Dissearch_Area .spinner-border").addClass('d-none');
                    resolve()
                }
            )
        })
    }
    function Dencan_Render(data, id, updown) {

        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            let tr = "";
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    let item = data[i];
                    if (updown == 'D') {
                        tr = `<div class="teethElement mx-2 text-center position-relative">
                                              <div class="gum"></div>
                                            <div class="teeth_part_circle">
                                                <canvas data-id=${item.ID} id="teethcircle_${item.ID}" width="${TeethWidth}" height="${TeethWidth}" class="canvasTeethCircle"></canvas>
                                            </div>
                                            <div style="height:10px;"></div>
                                            <div class="teeth_nameTeeth text-primary fw-bold text-sm">${item.TeethName}</div>
                                            <div class="teeth_part_root_face">
                                                <canvas data-id=${item.ID} id="teethface_${item.ID}" width="${TeethWidth}" height="${TeethHeight}" data-updown="${item.UpDown}"
                                                    data-imgex="${item.ImageExtension}"
                                                    data-sign="${item.E_Root}" class="canvasTeethFace"></canvas>
                                            </div>
                                            <div id="teethfacetext_${item.ID}" class="teeth_text d-flex justify-content-center align-items-center text-sm fw-bold rounded-2"></div>
                                        </div>`;
                    }
                    else {
                        tr = `<div class="teethElement mx-2 text-center position-relative ">
                                            <div id="teethfacetext_${item.ID}" class="teeth_text d-flex justify-content-center align-items-center text-sm fw-bold rounded-2"></div>
                                            <div class="teeth_part_root_face">
                                                <canvas data-id=${item.ID} id="teethface_${item.ID}" width="${TeethWidth}" height="${TeethHeight}"
                                                    data-updown="${item.UpDown}"
                                                    data-imgex="${item.ImageExtension}"
                                                    data-sign="${item.E_Root}" class="canvasTeethFace"></canvas>
                                            </div>
                                            <div class="teeth_nameTeeth text-primary fw-bold text-sm">${item.TeethName}</div>
                                            <div style="height:10px;"></div>
                                            <div class="teeth_part_circle">
                                                <canvas data-id=${item.ID} id="teethcircle_${item.ID}" width="${TeethWidth}" height="${TeethWidth}" class="canvasTeethCircle"></canvas>
                                            </div>
                                            <div class="gum"></div>
                                        </div>` ;
                    }
                    stringContent = stringContent + tr;
                }
            }
            document.getElementById(id).innerHTML = stringContent;

        }

    }
    async function Dendis_Render(data, id, callback) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                let tr = "";
                if (data && data.length > 0) {
                    let CategoryID = 0;
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let imgcat = item.CatImg != ''
                            ? `<img class="border-radius-lg border-1 bg-gray-300 avatar avatar-sm p-2 me-2"  src="${ser_imageFeature_Disease + item.CatImg}" alt="label-image">`
                            : ``;
                        if (item.CategoryID != CategoryID) {
                            CategoryID = item.CategoryID;
                            stringContent = stringContent
                                + `<div class="accordion" id="Listdes${item.CategoryID}">
                                                <div class="accordion-item mb-1">
                                                    <h6 class="accordion-header" id="Listhes${item.CategoryID}">
                                                        <button class="accordion-button text-sm fw-normal text-primary p-1 py-2 border-bottom collapsed" type="button"
                                                                data-bs-toggle="collapse" data-bs-target="#descoslap${item.CategoryID}"
                                                                aria-expanded="false" aria-controls="descoslap${item.CategoryID}">
                                                             ${imgcat}
                                                             ${item.CatName}
                                                        </button>

                                                    </h6>
                                                    <div id="descoslap${item.CategoryID}" class="accordion-collapse collapse collapsesticky"
                                                         aria-labelledby="Listhes${item.CategoryID}" data-bs-parent="#Listdes${item.CategoryID}">
                                                        <ul class="pt-2 ps-0" >`;
                        }

                        tr = `<li id="desease_${item.ID}" data_type="${item.Type}" data_id="${item.ID}" class=" diseaseitem mb-0 pb-0 cursor-pointer list-group-item border-0 justify-content-between ps-2 border-radius-lg">
                                            <div class="d-flex align-items-center">
                                                <div class="me-3 text-center">
                                                    <img style="height: 30px;width: 30px;" title="${item.DescriptionTip}" src="${ser_imageFeature_Disease + item.ImageFeature}" alt="label-image">
                                                </div>
                                                <div class="d-flex flex-column">
                                                    <h6 class="mb-0 fw-bold text-dark text-sm">${item.Name}</h6>
                                                    <span class="text-sm text-secondary">${item.DescriptionTip}</span>
                                                </div>
                                            </div>
                                            <hr class="horizontal dark mt-2 mb-1">
                                        </li>`
                        stringContent = stringContent + tr;
                        if (i == data.length - 1 || item.CategoryID != data[i + 1].CategoryID) {
                            stringContent = stringContent
                                + `</ul>
                                                </div>
                                            </div>
                                        </div>`;
                        }

                    }
                }
                document.getElementById(id).innerHTML = stringContent;
                Dendis_Event();

                if (typeof callback !== 'undefined' && typeof callback === 'function') callback();
                resolve();
            }
        });
    }
    async function Dendis_RenderShort(data, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                let tr = "";
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        tr = `<a id="desease_${item.ID}" data_type="${item.Type}" data_id="${item.ID}" class="col-auto diseaseitem shortitem  m-1 p-0 cursor-pointer border-1 rounded-2  border-radius-lg" style="border: 1px solid #dee2e6;">
                                                 <img style="height: 30px;width: 30px;" title="${item.Name + ' ' + item.DescriptionTip}" src="${ser_imageFeature_Disease + item.ImageFeature}" alt="label-image">
                                        </a>`
                        stringContent = stringContent + tr;
                    }
                }
                document.getElementById(id).innerHTML = stringContent;
                Dendis_Event();
                resolve();
            }
        });
    }
    //#endregion
    //#region //PRINT
    function Dendis_Print() {
        Dendis_Print_LoadTemplate();
    }

    async function Dendis_Print_LoadTemplate() {
        AjaxLoad(url = "/Customer/DentistChart/DentistChartCanvas/?handler=LoadTemplate"
            , data = {}
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                if (result != "0") {
                    if (JSON.parse(result)[0] != undefined) {
                        let data = JSON.parse(JSON.parse(result)[0].Form);
                        Dendis_Print_LoadData(data, "Dendis_PrintForm");
                    }
                  
                } else {
                    notiError_SW();
                }
            }
            , sender = null
            , before = function (e) {
                $('#Dendis_Print_WaitingDiv').removeClass('d-none');
            }
            , complete = function (e) {
                $('#Dendis_Print_WaitingDiv').addClass('d-none');
            }
        );
    }

    async function Dendis_Print_LoadData(DataValue, id) {
        return new Promise((resolve, reject) => {
            let datafield, dtTables = {};
            let Commmand_teethStatus = 38;
            AjaxLoad(url = "/Customer/DentistChart/DentistChartCanvas/?handler=LoadDataForm"
                , data = { 'commandid': Commmand_teethStatus, 'currentID': TeethChart_ID }
                , async = true
                , error = function () { notiError_SW(); }
                , success = function (result) {
                    if (result != "") {
                        if (result == "[]") Dendis_Print_RenderDataForm(DataValue, datafield, dtTables, id);
                        else {
                            let data = JSON.parse(result);
                            for (const [key, value] of Object.entries(data)) {
                                if (key == 'Table') datafield = value;
                                else {
                                    dtTables[key] = value;
                                }
                            }
                            if (datafield != undefined && datafield.length != 0) {
                                Dendis_Print_RenderDataForm(DataValue, datafield, dtTables, id);
                            }
                        }
                    }
                });
        });
    }

    async function Dendis_Print_RenderDataForm(data, datafield, dtTables, id) {
        return new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                fn_RenderForm(myNode, data);
                if (datafield != undefined && datafield.length == 1) {
                    fn_FillForm(item = datafield[0], id = id);
                }
                if (dtTables != undefined && Object.keys(dtTables).length > 0) {
                    fn_FillTables(dtTables, item = datafield[0], id = id);
                }
            }
            Dendis_Print_CaptureDomTeeth();
        });
    }
    function Dendis_Print_CaptureDomTeeth() {
        let element = document.getElementById("Canteeth_UpDown");

        html2canvas(element, {
            allowTaint: true
        }).then(canvas => {
            $(".div-statusteeth-canvas").html(canvas);
            fn_Print(printedid = "Dendis_PrintForm"
                , beforefun = function () {
                    $("#Dendis_PrintForm textarea").replaceWith(function () {
                        return $("<pre />", {
                            id: $(this).attr('id'),
                            html: $(this).val(),
                            class: this.classList.value,
                            css: { "white-space": "break-spaces" }
                        })
                    })
                }
                , afterfun = function () {
                    $('#Dendis_Print_WaitingDiv').addClass('d-none');
                    $("#Dendis_PrintForm  pre").replaceWith(function () {
                        return $("<textarea />", {
                            id: $(this).attr('id'),
                            html: $(this).html(),
                            class: this.classList.value,
                            css: { "oveflow-y": "hidden" }
                        })
                    });
                });
        });
    }
    //#endregion
</script>
<script>js_require('/js/main.js');</script>
<script>js_require('/js/customjs/custom-validation.js');</script>

<style>

    @@media (max-width: 1299px) {
        #CandisArea_Large {
            display: none !important;
        }

        #CandisArea_Short {
            display: flex !important;
        }
    }

    @@media (min-width: 1300px) {
        #CandisArea_Large {
            display: block !important;
        }

        #CandisArea_Short {
            display: none !important;
        }
    }

    .shortitem:hover {
        background: rgb(var(--bs-primary )) !important;
    }

    #CandisArea_Short {
        overflow-y: auto;
        max-height: 170px;
        overflow-x: hidden;
    }

    .teethElement .teeth_text {
        height: 25px;
    }

    #CanteethVR {
        position: absolute;
        height: 97px;
        width: 2px;
        background: #eeeff0;
        left: 50%;
        top: 39%;
        margin-left: -1px;
    }

    #Canteeth_UpDown {
        z-index: 10;
    }

    .teethElement .gum {
        background-image: url(/image/step.png);
        position: absolute;
        height: 60px;
        width: 40px;
        opacity: 0.5;
        z-index: -1;
        background-repeat-y: no-repeat;
        background-repeat-x: repeat;
    }

    #Canteeth_Up .teethElement .gum {
        left: -27px;
        top: 50px;
    }

    #Canteeth_Down .teethElement .gum {
        left: -27px;
        top: 87px;
        transform: rotate(180deg);
    }
</style>

