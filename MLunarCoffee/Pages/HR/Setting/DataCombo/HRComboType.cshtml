@page
@model MLunarCoffee.Pages.HR.Setting.DataCombo.HRComboTypeModel
@{
    Layout = null;
}
<div class="container-fluid px-0">
    <div class="row m-0">
        <div class="d-lg-flex">
            <div class="col-w-300 mt-3 mx-auto pe-lg-2">
                <div class="card card-plain">
                    <div class="vtcardheader card-header pb-0 p-0">
                        <div class="left">
                            <h6 class="mb-0">@Local["Nhóm"]</h6>
                            <p class="text-sm mb-0">@Local["Danh sách nhóm"]</p>
                        </div>
                        <div class="right">
                            <button class="btn bg-gradient-primary btn-sm" onclick="return openAddNewStatus(0)">@Local["Thêm mới"]</button>
                        </div>
                    </div>
                    <div class="card-body pt-0 p-0">
                        <table class="table vt-table mb-0" id="dtContentStatusParent">
                            <thead>
                                <tr>
                                    <th colspan="2">@Local["Loại"]</th>
                                </tr>
                            </thead>
                            <tbody id="dtContentStatusParentBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="flex-grow-1">
                <div class="pt-2">
                    <div class="card card-plain">
                        <div class="vtcardheader card-header pb-0 p-0">
                            <div class="left">
                                <h6 class="mb-0">@Local["Trạng thái"]</h6>
                                <p class="text-sm mb-0">@Local["Danh sách trạng thái"]</p>
                            </div>
                            <div class="right">
                                <button class="btn btn-primary btn-sm mt-1" data-tab="add_tab_Customer_Care_Status" data-value="fade up" onclick="return AddNewCustomerCareStatus()">@Local["Thêm mới"]</button>
                            </div>
                        </div>
                        <div class="card-body pt-0 p-0">
                            <table class="table vt-table mb-0" id="dtContentStatus">
                                <thead class="hiddenCollapse">
                                    <tr role="row">
                                        <th class="d-none">ID</th>
                                        <th style="width:40px;">#</th>
                                        <th>@Local["Trạng thái"]</th>
                                        <th>@Local["Người sửa"]</th>
                                        <th style="width:40px;">@Local["Xóa"]</th>
                                    </tr>
                                </thead>
                                <tbody id="dtContentStatusBody">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="container-fluid px-0 formAddNewStatusParent" onsubmit="event.preventDefault(); return false;" style="display: none;">
            <div class="row m-0">
                <div class="col-12">
                    <div class="card card-plain">
                        <div class="vtcardheader card-header pb-0 p-0">
                            <div class="left">
                                <h6 class="mb-0">@Local["Nhóm trạng thái"]</h6>
                                <p class="text-sm mb-0">@Local["Danh sách nhóm trạng thái"]</p>
                            </div>
                        </div>
                        <div class="card-body pt-0 p-0">
                            <div class="px-1">
                                <div class="row px-1 form3" id="formHRComboTypeParent">
                                    <div class="field col-12 p-1">
                                        <label>@Local["Nhóm trạng thái"]</label>
                                        <input id="txtNameParent" class="form-control" name="name" type="text" />
                                    </div>
                                </div>
                            </div>
                            <div class="fixed-botombutton">
                                <div class="action_Save">
                                    <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
                                    <div class="action_Save-Content">
                                        <button class="btn btn-secondary" form="formHRComboTypeParent" onclick="event.preventDefault();closeAddNewStatus()">@Local["Đóng"]</button>
                                        <button form="formHRComboTypeParent" type="button" class="btn bg-gradient-primary mt-2 me-2 _tab_control_" data-tab="edit_tab_customer" onclick="event.preventDefault();ExcuteDataStatusParent()">@Local["Lưu"]</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var ser_TypeStatusID;
    var dataStatusParent;
    var dataStatus;
    var isEditStatusParent = false;
    var CurrentStatusParentID = 0;
    $(document).ready(function () {
        ser_TypeStatusID = @Model.sys_HRTypeID;
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data) {
                DataUser = data[0];
                LoadListHRTypeAjax();
            });
        $('#dtContentStatusParentBody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).closest('tr')[0].getAttribute('data-id'));

            let Name = $(this).closest('tr')[0].getAttribute('data-name');
            console.log(Name)
            EditStatusParent(ID, Name);
            CurrentGroupTypeID = ID;
        });
        $('#dtContentStatusParentBody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).closest('tr')[0].getAttribute('data-id'));
            DeleteHRComboType(ID)
        });
        $('#dtContentStatus tbody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            EditCustomerCustomerCareStatus(ID);
        });
        $('#dtContentStatus tbody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            DeleteHRComboType(ID)
        });

        //$('#dtContentStatusParent tbody').on('click', '.buttonEditClass', function () {
        //    let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
        //    let Name = $(this).closest('tr')[0].childNodes[1].innerHTML;
        //    EditStatusParent(ID, Name);
        //});
        //$('#dtContentStatusParent tbody').on('click', '.buttonDeleteClass', function () {
        //    let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
        //    DeleteHRComboType(ID)
        //});

    });
    let DataUser;
    // load datalist
    function LoadListHRTypeAjax() {
        AjaxLoad(url = "/HR/Setting/DataCombo/HRComboType/?handler=LoadataHRType"
            , data = {
                TypeStatusID: ser_TypeStatusID
            }, async = true, error = null
            , success = function (result) {
                if (result != "") {
                    dataStatusParent = JSON.parse(result)["Table"];
                    dataStatus = JSON.parse(result)["Table1"];
                    RenderTableHRTypeParent(dataStatusParent, 'dtContentStatusParentBody');
                    TriggerClick_HRTypeParent();
                    //$('#dtContentStatusBody').empty();
                }
            });
    }

    //render statusParent
    function RenderTableHRTypeParent(data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            let total = 0;

            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    total = total + Number(item.TotalChildren);
                    stringContent +=
                        `<tr class="rowStatusParent" data-id="${item.ID}" data-name="${item.Name}">
                            <td class="d-none">
                                ${item.ID}
                            </td>
                            <td>
                                <div class="d-flex ms-2">
                                    <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center rounded-2 text-center" title="Quantity">
                                        <h6 class="text-white mt-2">
                                            ${Number(item.TotalChildren)}
                                        </h6>
                                    </div>
                                    <div class="d-flex flex-column">
                                        <h6 class="text-dark text-sm mb-0 text-decoration-underline buttonEditClass">
                                            ${item.Name}
                                        </h6>
                                    </div>
                                </div>
                            </td>
                                <td class="col-3">
                                <div class="d-flex justify-content-center setting_projectclosure">
                                    ${item.DeleteButton == 1 ? `<button class="btn btn-link btn-icon-only text-dark my-auto buttonDeleteClass"><i title="Remove" class="remove icon" aria-hidden="true"></i></button>` : ""}
                                </div>
                            </td>
                        </tr>
                        `
                }
                stringContent =
                    `<tr class="rowStatusParent" data-id="0">
                        <td class="d-none">
                            0
                        </td>
                        <td colspan="2">
                            <div class="d-flex ms-2">
                                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark rounded-2 text-center" title="Quantity">
                                    <h6 class="mt-2 text-white">
                                        ${Number(total)}
                                    </h6>
                                </div>
                                <div class="d-flex flex-column">
                                    <h6 class="text-dark text-sm mb-0">
    @Local["Tổng"]
                                    </h6>
                                </div>
                            </div>
                        </td>
                    </tr>
                    `
                    + stringContent;
                document.getElementById(id).innerHTML = stringContent;
            }
        }
        EventRowStatusParent();
    }
    function TriggerClick_HRTypeParent() {
        if ($('.rowStatusParent[data-id="' + CurrentStatusParentID + '"]').get(0) != undefined)
            $('.rowStatusParent[data-id="' + CurrentStatusParentID + '"]').get(0).click();
    }
    function EventRowStatusParent() {
        $(".rowStatusParent").on('click', function (event) {
            let id = Number($(this).attr("data-id"));
            CurrentStatusParentID = id;
            if (id == 0) ViewDetail(id, 1);
            else {
                ViewDetail(id, 0);
            }
            $('.rowStatusParent').removeClass('active');//add class mauf
            $(this).addClass('active')
        });


    }

    function ViewDetail(idDetail, all) {
        var data = dataStatus;
        if (all == 0) {
            data = dataStatus.filter(word => word["ParentID"] == idDetail);
            for (var i = 0; i < data.length; i++) {
                data[i].STT = i + 1;
            }
        }
        RenderTableStatus(data, 'dtContentStatusBody');
    }

    // render statuslistchildren
    function RenderTableStatus(data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    let item = data[i];
                    let obj = Fun_GetObject_ByID(DataUser, item.PerEditor);
                    let name = (obj != null) ? obj.Name : 'unknown';
                    let img = (obj != null) ? obj.Avatar : Master_Default_Pic;

                    let tr =
                        '<td class="d-none">' + item.ID + '</td>'
                        + '<td class="vt-number-order"></td>'
                        + '<td><a class="text-decoration-underline fw-bold buttonEditClass">' + item.Name + '</a></td>'
                        + '<td>'
                        + '<div class="d-flex">'
                        + '<div class="icon icon-shape icon-sm me-2 text-center" >'
                        + '<img class="avatar avatar-xs mt-2" src="' + img + ' " alt="label-image">'
                        + '</div>'
                        + '<div class="d-flex flex-column">'
                        + '<h6 class="text-dark text-sm mb-0">' + name + '</h6>'
                        + '<span class="text-xs">' + GetDateTime_String_DMY(item.DayEditor) + '</span>'
                        + '</div>'
                        + '</div>' + '</td>'
                        + '<td>'
                        + ((item.DeleteButton === 1)
                            ? Render_Button_Grid(['<button class="buttonGrid" value="'
                                + item.ID
                                + '"><i class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>'])
                            : '')
                        + '</td>'
                    stringContent = stringContent + '<tr class="vt-number" role="row">' + tr + '</tr>';
                }
            }

            document.getElementById(id).innerHTML = stringContent;
        }

        //hover title
        $("#dtContentStatusBody img,#dtContentStatusBody span").popup({
            transition: "scale up",
            position: "top right"
        });
        Checking_TabControl_Permission();
    }


    //edit
    function EditStatusParent(id, name) {
        $(".formAddNewStatusParent").show();
        $("#txtNameParent").val(name);
        isEditStatusParent = true;
        CurrentStatusParentID = id;
    }

    //delete
    function DeleteHRComboType(id) {
        const promise = notiConfirm();
        promise.then(function () { ExecuteDeleteHRComboType(id); }, function () { });
    }
    function ExecuteDeleteHRComboType(id) {
        AjaxLoad(url = "/HR/Setting/DataCombo/HRComboType/?handler=DeleteItem"
            , data = {
                StatusID: id
            }, async = true, error = null
            , success = function (result) {
                if (result == "1") {
                    notiSuccess();
                    LoadListHRTypeAjax();
                } else {
                    notiError_SW();
                }
            });
    }

    function EditCustomerCustomerCareStatus(CurrentID) {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/HR/Setting/DataCombo/HRComboTypeDetail?CurrentID=" + CurrentID + "&TypeStatusID=" + ser_TypeStatusID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    function AddNewCustomerCareStatus() {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/HR/Setting/DataCombo/HRComboTypeDetail?TypeStatusID=" + ser_TypeStatusID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    // add new
    function openAddNewStatus() {
        $(".formAddNewStatusParent").show();
    }

    function closeAddNewStatus() {
        $(".formAddNewStatusParent").hide();
        $('#txtNameParent').val("");

    }
    function ExcuteDataStatusParent() {
        var StatusName = $('#txtNameParent').val() ? $('#txtNameParent').val() : "";

        var parentStatusID = 0;
        if (isEditStatusParent == true) {
            parentStatusID = CurrentStatusParentID
        }

        $('#formHRComboTypeParent').form('validate form');
        if ($('#formHRComboTypeParent').form('is valid')) {
            AjaxLoad(url = "/HR/Setting/DataCombo/HRComboType/?handler=ExcuteDataHRTypeParent"
                , data = {
                    StatusName: StatusName,
                    CurrentID: parentStatusID,
                    TypeStatusID: ser_TypeStatusID
                }, async = true, error = null
                , success = function (result) {
                    if (result == "1") {
                        LoadListHRTypeAjax();
                        $(".formAddNewStatusParent").hide();
                        isEditStatusParent = false;
                        $('#txtNameParent').val("");
                    } else {
                        notiError_SW();
                    }
                });
        }
        return false;
    }
</script>
<script>js_require('/js/main.js');</script>

<script>js_require('/js/customjs/custom-validation.js');</script>

