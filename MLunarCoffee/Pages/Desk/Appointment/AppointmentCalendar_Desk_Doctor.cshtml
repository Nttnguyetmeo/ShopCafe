@page
@model MLunarCoffee.Pages.Desk.Appointment.AppointmentCalendar_Desk_DoctorModel
@{
    Layout = null;
}
<script>js_require('/js/Calendar_Custom/appointment.js')</script>
<div id="Loader_Calendar" style="display: none; position: relative; height: calc(100vh - 80px)">
    <div class="ui active inverted dimmer">
        <div class="ui large text loader"></div>
    </div>
</div>

<div class="col-12 p-0 position-relative">
    <div class="card card-plain" id="vtt_master">
        <div class="vtcardheader card-header pb-0">
            <div class="left">
                <h6 class="mb-0">Calendar</h6>
                <p class="text-sm mb-0">@Local["Lịch hẹn"]</p>
            </div>
        </div>
        <div class="card-body pt-2 pb-0">
            <div class="vtcondition">
                <a class="sign" data-open="@Local["Hiển thị"]" data-close="@Local["Thu gọn"]" data-bs-toggle="collapse" aria-expanded="true"></a>
                <div class="fulllap collapse collapsesticky show">
                    <div class="row px-2 form3">
                        <div class="col-12 col-lg p-1">
                            <div class="ui fluid search selection dropdown form-control" id="ScheduleBranchID">
                                <input type="hidden" name="CalendarBranch" />
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg .@Local["Chi nhánh"]</div>
                                <div id="cbbCalendarBranch" class="menu" tabindex="-1">
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg p-1">
                            <div class="ui fluid search selection dropdown form-control" id="CalAppointmentDoctorID">
                                <input type="hidden" name="CalendarBranch" />
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg .@Local["Bác sĩ"]</div>
                                <div id="cbbCalAppointmentDoctor" class="menu" tabindex="-1">
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg p-1">
                            <div class="ui fluid search selection dropdown form-control" id="CalAppointmentServiceCare">
                                <input type="hidden" name="" />
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg .@Local["Dịch vụ quan tâm"]</div>
                                <div id="cbbCalAppointmentServiceCare" class="menu" tabindex="-1">
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-auto p-1">
                            <button id="BtnCalApp" class="btn btn-primary px-5" onclick="Calendar_ReloadData()">OK</button>
                        </div>
                    </div>
                    <div class="d-lg-flex">
                        <div class="w-lg-50 w-100 d-flex">
                            <div class="form-check me-3">
                                <input id="Canfil_Treat" data-type="0" class="form-check-input pr-2 Calendar_FillterType" type="checkbox" checked>
                                <label class="custom-control-label">@Local["Điều trị"]</label>
                            </div>
                            <div class="form-check me-3">
                                <input id="Canfil_Cons" data-type="1" class="form-check-input pr-2 Calendar_FillterType" type="checkbox" checked>
                                <label class="custom-control-label">@Local["Tư vấn"]</label>
                            </div>
                            <div class="form-check me-3">
                                <input id="Canfil_Can" data-type="2" class="form-check-input pr-2 Calendar_FillterType" type="checkbox" checked>
                                <label class="custom-control-label">@Local["Lịch hủy"]</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body pt-0 ">
            <div class="ms-auto my-auto mb-1">
                <div class="fc fc-media-screen fc-direction-ltr fc-theme-standard">
                    <div class="fc-header-toolbar fc-toolbar mb-0">
                        <div class="vtcardheader w-100 pb-0">
                            <div class="left">
                                <div class="fc-toolbar-chunk me-3">
                                    <h2 class="fc-toolbar-title"></h2>
                                </div>
                            </div>
                            <div class="right">
                                <div class="fc-toolbar-chunk">
                                    <div class="fc-button-group">
                                        <button class="fc-dayGridMonth-button fc-button fc-button-primary fc-button-active" type="button">@Local["Tháng"]</button>
                                        <button class="fc-timeGridWeek-button fc-button fc-button-primary" type="button">@Local["Tuần"]</button>
                                        <button class="fc-timeGridday-button fc-button fc-button-primary" type="button">@Local["Ngày"]</button>
                                        <button class="fc-today-button fc-button fc-button-primary" type="button">@Local["Hôm nay"]</button>
                                    </div>
                                    <div class="fc-button-group">
                                        <button class="fc-prev-button fc-button fc-button-primary" type="button" aria-label="prev">
                                            <span class="fc-icon fc-icon-chevron-left"></span>
                                        </button>
                                        <button class="fc-next-button fc-button fc-button-primary" type="button" aria-label="next">
                                            <span class="fc-icon fc-icon-chevron-right"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="LoaderCalendar" class="waitingdiv position-absolute top-50 start-50 translate-middle" style="display:none">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="position-relative">
                <div class="calendar" data-bs-toggle="calendar" id="calendar"></div>
                <div id="calendarpopper" class="position-fixed transition d-none z-index-sticky">
                    <div class="card col-w-250 overflow-hidden rounded-1 shadow min-height-150">
                        <div class="align-items-center bg-gray-300 card-header d-flex justify-content-between px-3 py-2 rounded-0">
                            <span id="calendarpopper_title" class="d-block fw-bold text-dark text-sm"></span>
                            <span class="fc-popover-close fc-icon fc-icon-x"></span>
                        </div>
                        <div id="calendarvmloader" class="waitingdiv position-absolute top-50 start-50 translate-middle" style="display:none">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div id="calendarvmbody" class="card-body px-2 pt-2 max-height-300 overflow-auto d-flex flex-column">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    

    <div id="vtt_actiontarea" class="position-fixed top-10 start-50 translate-middle-x bg-gradient-dark text-white shadow-lg card d-none">
        <div class="p-3 pb-0 d-flex">
            <div class="col-auto my-auto">
                <div class="d-flex justify-content-end">
                    <img id="Apptem_Avatar" class="avatar avatar-md me-3" src="/default.png" alt="label-image" onerror="Master_OnLoad_Error_Image(this)" />
                    <div class="mt-1">
                        <h6 id="Apptem_CustName" class="text-sm fw-bold text-white mb-0 "></h6>
                        <p id="Apptem_Code" class="d-inline-flex mt-1 text-xs text-white mb-1"></p>
                    </div>
                </div>
            </div>
            <div class="ms-auto my-auto d-flex justify-content-end">
                <span id="Apptem_Doctor" class="fw-bold mx-1"></span>
                <span id="Apptem_Room" class="fw-bold me-1"></span>

            </div>
        </div>
        <hr class="horizontal light">
        <div class="card-body border-radius-lg  text-sm p-3 pt-0">
            <div>
                <span id="Apptem_Cancel" class="badge bg-gradient-danger text-white cursor-pointer" style="display: none;">
                </span>
                <span id="Apptem_btnroom" onclick="event.preventDefault(); Apptem_ChangeRoom();"
                      class="badge bg-gradient-light text-primary  cursor-pointer d-none">@Local["Phòng"]</span>
                <span onclick="event.preventDefault(); Apptem_Sms();"
                      class="badge bg-gradient-light text-primary  cursor-pointer d-none">SMS</span>
                <span onclick="event.preventDefault(); Apptem_Call();"
                      class="badge bg-gradient-light text-primary cursor-pointer d-none">@Local["Gọi"]</span>
                <span id="Apptem_btnprint" onclick="event.preventDefault(); Apptem_Print();"
                      class="badge bg-gradient-light text-primary  cursor-pointer">@Local["In"]</span>
                <span onclick="event.preventDefault(); Apptem_CustLink();"
                      class="badge bg-gradient-light text-primary  cursor-pointer">@Local["Đến khách hàng"]</span>
            </div>
            <div class="mt-3">
                <span>@Local["Thời gian"]</span>
                <span id="Apptem_DateFrom" class="fw-bold mx-1 border-bottom"></span>
                <span id="Apptem_Status" class="fw-bold mx-1 border-bottom"></span>

            </div>
            <span class="d-block mt-2">
                <span>@Local["Chi nhánh"]</span>
                <span id="Apptem_Branch" class="fw-bold mx-1 border-bottom"></span>
                <span id="Apptem_Service" class="fw-bold mx-1 border-bottom"></span>
            </span>
            <span class="d-block mt-2">
                <span id="Apptem_Content" class="content_line_clamp text-white"></span>
            </span>

        </div>
        <hr class="horizontal light">
        <div class="card-footer pt-0">
            <div class="mb-3 me-1 d-flex justify-content-end">
                <svg id="Apptem_Code2D"></svg>
            </div>
            <div class="d-flex justify-content-end">
                <div class="d-flex">
                    <button id="Apptem_btncancel" class="btn btn-sm bg-gradient-danger d-none mb-0 "
                            onclick="Apptem_DestroyApp()">
                        @Local["Hủy lịch"]
                    </button>
                    <button id="Apptem_btnEdit" class="btn btn-sm bg-gradient-info d-none mb-0 ms-1"
                            onclick="Apptem_Edit()">
                        @Local["Sửa lịch"]
                    </button>
                    <button class="btn btn-sm bg-gradient-secondary mb-0 ms-1"
                            onclick="Apptem_Cancel()">
                        @Local["Đóng"]
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/assets/js/plugins/fullcalendar.min.js"></script>
<script src='/js/Calendar/Detect_Calendar_Type.js' type="text/javascript"></script>

<script type="text/javascript">
    var appcalendar_time = [];
    var Object_Schedule_Calendars = [];
    let calendar_Date_From;
    let calendar_Date_To;
    let isCalendar_Start = 0;
    let sys_branchID = Number("@Model._branchID");
    let sys_employeeID_Main = Number("@Model._employeeID_Main");
    let sys_viewByDoctor = Number("@Model._viewByDoctor");
    //  var calendar_color;
    var calendar;
    //var calendarDataEvents;
    let ser_AppointmentActionID;
    let CanDataServiceCare, CanDataService, CanDataBranch, CanDataEmployee, CanDataReasonCancel;
    let xhrCalendarLoad;
    let calendar_curid = 0;
    let calendar_defaultview = sys_isMobile == 0 ? 'dayGridMonth' : 'listWeek';
    var calendar_defaultheight = sys_isMobile == 0 ? undefined : '90vh';
    // let calendar_eventdata = [];
    let calendar_MonthView = 1;
    //#region // INITIALIZE DATA

    $(document).ready(function () {
        if (sys_isMobile == 1) $(".fc-today-button").addClass("fc-button-active").siblings().removeClass("fc-button-active");
        Master_IndexDB_Reads(_Session_Data, [_Session_ServiceCare, _Session_Service, _Session_Branch, _Session_Employee]
            , function (data) {
                CanDataServiceCare = data[0];
                CanDataService = data[1];
                CanDataBranch = data[2];
                CanDataEmployee = data[3];
                Calendar_Initialize();
                Calendar_TriggerDate();
                Calendar_EventCheckBox();
                Calendar_EventTooltip();
            })

    })

    function Calendar_Initialize() {
        AjaxLoad(url = "/Desk/Appointment/AppointmentCalendar_Desk_Doctor/?handler=LoadComboMain"
            , data = {}
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    let DataCalendarBranch = data.Branch;
                    let DataCalAppointmentDoctor = sys_viewByDoctor == 0 ? data.Doctor : (data.Doctor).filter((doctor) => { return doctor.ID == sys_employeeID_Main });
                    CanDataReasonCancel = (data.ReasonCancel).reduce((pre, arr) => { if (arr.ID) { pre[arr.ID] = arr }; return pre }, {});
                    for ([key, value] of Object.entries(CanDataServiceCare)) {
                        value.Name = `<i style="color:${value.Color};" class="fas fa-circle  me-2 colorServiceCare ${value.Color}"></i>` + value.Name;
                    }

                    Load_Combo(DataCalendarBranch, "cbbCalendarBranch", true);
                    $("#ScheduleBranchID").dropdown("refresh");
                    $("#ScheduleBranchID").dropdown("set selected", Number(sys_branchID));
                    Load_Combo(Object.values(CanDataServiceCare), "cbbCalAppointmentServiceCare", true, "@Local["Tất cả"]");
                    $("#CalAppointmentServiceCare").dropdown("refresh");
                    $("#CalAppointmentServiceCare").dropdown("set selected", "0");

                    if (sys_viewByDoctor == 0) {
                        Load_Combo(DataCalAppointmentDoctor, "cbbCalAppointmentDoctor", true, "@Local["Tất cả bác sĩ"]");
                        $("#CalAppointmentDoctorID").dropdown("refresh");
                        let currentDoctorID = DataCalAppointmentDoctor.reduce((pre, arr) => {
                            if (Number(arr["ID"]) == sys_employeeID_Main) pre = sys_employeeID_Main;
                            return pre;
                        }, 0);
                        $("#CalAppointmentDoctorID").dropdown("set selected", currentDoctorID.toString());
                    }
                    else {
                        if (DataCalAppointmentDoctor && DataCalAppointmentDoctor.length != 0) {
                            Load_Combo(DataCalAppointmentDoctor, "cbbCalAppointmentDoctor", true);
                            $("#CalAppointmentDoctorID").dropdown("refresh");
                            $("#CalAppointmentDoctorID").dropdown("set selected", sys_employeeID_Main.toString());
                        }
                        else return false;
                    }

                    isCalendar_Start = 1;
                    Calendar_LoadSchedule();
                }
            }
            , sender = null
            , before = function (e) {
                $("#pageCalendar").hide();
            }
            , complete = function (e) {
                $("#pageCalendar").show();
            }
        );
    }

    //#endregion

    //#region // LOAD CALENDAR

    function Calendar_LoadSchedule() {
        if (isCalendar_Start == 1) {
            calendar = new FullCalendar.Calendar(document.getElementById("calendar"), {
                locale: author_get("UserLang") == 'en' ? 'en' : 'vi',
                headerToolbar: false,
                firstDay: 1,
                initialView: calendar_defaultview,
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                },
                selectable: true,
                editable: true,
                stickyHeaderDates: false,
                fixedWeekCount: false,
                lazyFetching: true,
                eventDisplay: 'block',
                progressiveEventRendering: true,
                eventDidMount: function (info) {
                    let colorServiceCare = info.event._def.extendedProps.ColorCode;
                    if (colorServiceCare != undefined && colorServiceCare != ''){
                        info.el.style.setProperty(`border-left`,`5px solid ${colorServiceCare}`, 'important');
                        info.el.style.borderTopLeftRadius = `0`;
                        info.el.style.borderBottomLeftRadius = `0`;
                    }

                    new bootstrap.Tooltip(info.el, {
                        title: info.event.extendedProps.description,
                        placement: 'top',
                        delay: { show: 100 },
                        trigger: 'hover',
                        container: 'body',
                        customClass: 'expand',
                        html: true
                    });

                },
                views: {
                    month: {
                        titleFormat: {
                            month: "long",
                            year: "numeric"
                        },
                        dayMaxEventRows: 6,
                        moreLinkClick: function (info) {
                            Calendar_LoadDataMore(info);
                        }
                    },
                    agendaWeek: {
                        titleFormat: {
                            month: "long",
                            year: "numeric",
                            day: "numeric"
                        }
                    },
                    agendaDay: {
                        titleFormat: {
                            month: "short",
                            year: "numeric",
                            day: "numeric"
                        }
                    }
                },
                eventContent: function(arg) { 
                    if (calendar.currentData.currentViewType == 'listWeek') {
                        let _ele = {}
                        _ele.html = Calendar_RenderContentByListWeek(arg.event._def.title,arg.event._def.extendedProps);
                        return _ele
                    }
                },                
                events: function (info, successCallback, failureCallback) {
                    Calendar_LoadData({ info, successCallback, failureCallback, calendar_curid })
                },
                eventClick: function (info) {
                    let TypeID = info.event._def.extendedProps.TypeID;
                    if ((info != undefined) && (TypeID != 0)) {
                        let id = info.event.id;
                        callvtt_action(id);
                    }
                }, 
                eventDragStart: function (info) {
                },
                eventDrop: function (info) {
                    Calendar_UpdateTime(info)
                },
                eventResize: function (info) {
                    Calendar_UpdateTime(info)
                },
                eventMouseEnter: function (info) {

                },
                eventMouseLeave: function (info) {

                },
                eventClassNames: function (e) {
                    let str = e.event._def.extendedProps.MasterClass;
                    return str;
                },
                loading: function (isComplete) {
                    if (isComplete) {
                        $("#BtnCalApp").addClass("disabled");
                        $("#LoaderCalendar").show();
                        $("#calendar").addClass("opacity-5");
                    }
                    else {
                        $("#BtnCalApp").removeClass("disabled");
                        $("#LoaderCalendar").hide();
                        $("#calendar").removeClass("opacity-5");
                        $(".fc-toolbar-title").html(calendar.view.title);
                    }
                    calendar_curid = 0;
                },
                moreLinkContent: function (args) {
                    return decodeHtml('@Local["Xem thêm"]');
                },
                moreLinkClassNames: function (args) {
                    return 'cursor-pointer'
                },
                height: calendar_defaultheight
            });
            calendar.render();
        }
    }

    

    function Calendar_LoadData({ info, successCallback, failureCallback, appID = 0, viewMore = 0 }) {
        if (xhrCalendarLoad && xhrCalendarLoad.readyState != 4) xhrCalendarLoad.abort();
        let ScheduleBranchID = Number($('#ScheduleBranchID').dropdown('get value')) ? Number($('#ScheduleBranchID').dropdown('get value')) : 0;
        let CalAppointmentDoctorID = Number($('#CalAppointmentDoctorID').dropdown('get value')) ? Number($('#CalAppointmentDoctorID').dropdown('get value')) : 0;
        let ServiceCareID = Number($('#CalAppointmentServiceCare').dropdown('get value')) ? Number($('#CalAppointmentServiceCare').dropdown('get value')) : 0;
        xhrCalendarLoad = AjaxLoad(url = "/Desk/Appointment/AppointmentCalendar_Desk_Doctor/?handler=LoadScheduler"
            , data = {
                'doctorID': CalAppointmentDoctorID
                , 'branchID': ScheduleBranchID
                , 'date_from': ConvertDateTimeUTC_YMD(new Date(info?.start || info?.date))
                , 'date_to': ConvertDateTimeUTC_YMD(new Date(info?.end || info?.date))
                , 'AppID': appID
                , 'SerCareID': ServiceCareID
                , 'ViewType': calendar?.view?.type || calendar_defaultview

            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    if (viewMore != 0){
                        Calendar_ViewMore(info, data)
                    }
                    else{
                        if (appID != 0) {
                            if (data != undefined && data.length == 1)
                                Calendar_RenderBlock(data, successCallback, appID);
                        }
                        else {
                            // calendar_eventdata = [];
                            let array = sliceIntoChunks(data, 500);
                            Calendar_RenderBlock(array[0], successCallback, appID = 0)
                            new Promise((resolve, reject) => {
                                if (appcalendar_time && appcalendar_time.length != 0) {
                                    appcalendar_time.forEach(clearTimeout);
                                    appcalendar_time = [];
                                }
                                var promises = [];
                                for (let i = 1; i < array.length; i++) {
                                    promises.push(Calendar_RenderBlock_Each(array[i], function (e) {
                                        calendar.addEventSource(e);
                                    }));
                                }
                                Promise.all(promises).then(() => {

                                })
                                resolve();
                            });
                        }
                    }
                }
                else {
                    notiError();
                    if (typeof failureCallback === 'function') failureCallback();
                }
            }
            , sender = null
            , before = function(e){
                if (viewMore != 0) {
                    $("#calendarvmloader").show();
                    $("#calendarvmbody").addClass('opacity-0');
                }
            }
            , complete = function(e){
                if (viewMore != 0) {
                    $("#calendarvmloader").hide();
                    $("#calendarvmbody").removeClass('opacity-0');
                }
            }
        );
    }

    //#region // RENDER VIEW MORE

    function Calendar_LoadDataMore(info) {
        let { top, left } = info.jsEvent.currentTarget.getBoundingClientRect();
        if ($(window).height() < top + 300){
            top = $(window).height() - 400;
        }
        $("#calendarpopper").removeClass('d-none');
        $("#calendarpopper").css({
            "top": top,
            "left": left
        });
        Calendar_LoadData({ info, viewMore: 1 })
    }

    function Calendar_ViewMore(info, data){
        if (info) {
            $("#calendarpopper_title").html(ConvertDateTimeToString_DOW(info?.date) + ', ' + ConvertDateTimeUTC_DMY(info?.date));
        }
        let dataByDate = Calendar_FilterData(data);
        Calendar_RenderViewMore(dataByDate, 'calendarvmbody');
        Calendar_EventCheckExeAll();
    }

    function Calendar_RenderViewMore(data, id){
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    let tr = `
                        <div data-id="${item.id}"
                             class="appmore border-radius-bottom-start-0 border-radius-top-start-0 cursor-pointer d-flex gap-2 px-1 py-1 rounded-1 text-sm text-white"
                                style="background-color: ${item.backgroundColor};
                                    margin-top: 3px;
                                    border-left: 5px solid ${item.ColorCode}">
                        <div class="fw-bold ps-1" style="width: 50px;">${ConvertDateTimeUTC_Time_OnlyHour(item.start)}</div>
                        <div class="ellipsis_one_line flex-fill text-start">${item.title}</div>
                    </div>
                    `
                    stringContent = stringContent + '<tr role="row" class="vt-number">' + tr + '</tr>';
                }
            }
            myNode.innerHTML = stringContent;
            Calendar_EventViewMore();
        }
    }

    function Calendar_EventViewMore(){
        $("#calendarvmbody .appmore").each(function (elem) {
            let id = Number($(this).attr('data-id'));
            let desc = Calendar_Description(id);
            new bootstrap.Tooltip(this, {
                title: desc,
                placement: 'top',
                delay: { show: 100 },
                trigger: 'hover',
                container: 'body',
                customClass: 'expand',
                html: true
            });
        });
        $("#calendarvmbody .appmore").on('click', function () {
            let id = Number($(this).attr('data-id'));
            callvtt_action(id);
        })
    }

    //#endregion

    function Calendar_RenderBlock(data, successCallback, appID) {
        let dataEvent = Calendar_FilterData(data);
        if (appID == 0) {
            successCallback(dataEvent);
        }
        else {
            calendar.getEventById(appID).source.refetch();
        }
        Calendar_EventCheckExeAll();
    }

    function Calendar_FilterData(data){
        try{
            let dataTemp = [];
            if (data != undefined && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    Object_Schedule_Calendars[data[i].ID] = item;
                    let e = {};
                    e.id = item.ID;
                    e.MasterID = item.ID;
                    e.title = item.CustomerName;
                    e.start = item.Date_From;
                    e.end = item.Date_To;
                    e.allDay = false;
                    e.description = Calendar_Description(item.ID);
                    e.sourceId = item.CustomerID;
                    e.ColorCode = CanDataServiceCare[item.SerCareID] ? CanDataServiceCare[item.SerCareID].Color : "";
                    if (item.OptionlColor == '') e.backgroundColor = item.IsCancel == 0 ? (item.TypeID == 1 ? "#00ffff" : "#3d85c6") : "red";
                    else e.backgroundColor = item.IsCancel == 0 ? item.OptionlColor : 'red';
                    e.MasterClass = item.IsCancel == 0 ? (item.TypeID == 1 ? "consult" : "treat") : "cancel";
                    e.TypeID = item.IsCancel == 0 ? item.TypeID : 0;
                    e.Content = item.Content;
                    if (item.TypeID == 1) {
                        e.Service = Fun_GetString_ByToken(CanDataServiceCare, item.ServiceCare_ID);
                    } else {
                        e.Service = Fun_GetString_ByToken(CanDataService, item.ServiceTreat_ID);
                    }
                    dataTemp.push(e);
                }
            }
            return dataTemp;
        }
        catch(ex){
            return [];
        }
    }
    async function Calendar_RenderBlock_Each(data, successCallback) {
        new Promise((resolve, reject) => {
            appcalendar_time.push(
                setTimeout(() => {
                    Calendar_RenderBlock(data, successCallback, appID = 0)
                }, 300)
            );
        });
    }
    function Calendar_UpdateTime(info) {
        let id = info.event.id;
        let start = ConvertDateTimeToStringYMDHHMMSS(info.event.start);
        let end = ConvertDateTimeToStringYMDHHMMSS(info.event.end);
        let cust = Object_Schedule_Calendars[id] != undefined ? Object_Schedule_Calendars[id].CustomerID : 0;
        AjaxLoad(url = "/Desk/Appointment/AppointmentCalendar_Desk_Doctor/?handler=ChangeDateApp"
            , data = { 'CustomerID': cust, 'CurrentID': id, 'start': start, 'end': end }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result == "1") {
                    notiSuccessMess("@Local["Đổi giờ lịch hẹn thành công"]");
                }
                else {
                    if (result == "-1") {
                        notiError("@Local["Lịch hẹn đã đổi trạng thái không thể chỉnh sửa hoặc xóa"]");
                    }
                    if (result == "-2") {
                        notiError("@Local["Khách hàng đã có lịch hẹn tại chi nhánh"]");
                    }
                    info.revert();

                }
            }
            , sender = null
        );
    }
    function Calendar_ReloadData(_appCurrent) {
        if (_appCurrent != undefined) {
            calendar_curid = _appCurrent;
            calendar.getEventById(_appCurrent).source.refetch();
        }
        else {
            if (isCalendar_Start == 1) {
                calendar.refetchEvents();
            }
        }

    }
    //#endregion

    //#region // DESCIPTION

    function Calendar_Description(id) {
        try {
            let result = "";
            let data = Object_Schedule_Calendars[id] != undefined ? Object_Schedule_Calendars[id] : [];
            if (data.length != 0) {
                var Service = "";
                if (data.TypeID == 1) {
                    Service = Fun_GetString_ByToken(CanDataServiceCare, data.ServiceCare_ID);
                } else {
                    Service = Fun_GetString_ByToken(CanDataService, data.ServiceTreat_ID);
                }
                result = `<div class="text-start">
                                    <div class="row px-2">
                                        <div class="fw-bold col-12 col-sm-3 p-1">@Local["MSKH"]</div>
                                        <div class="border-start border-success col-12 col-sm-9 p-1  ps-2">${data.Cust_Code}</div>
                                    </div>
                                    <hr class="horizontal bg-white my-1">
                                    <div class="fw-bold row px-2">
                                        <div class="col-12 col-sm-3 p-1">@Local["Tên"]</div>
                                        <div class="border-start border-success col-12 col-sm-9 p-1 ps-2">${data.CustomerName}</div>
                                    </div>
                                    <hr class="horizontal bg-white my-1">
                                    <div class="row px-2">
                                        <div class="fw-bold col-12 col-sm-3 p-1">@Local["Ngày"]</div>
                                        <div class="border-start border-success col-12 col-sm-9 p-1  ps-2">${ConvertDateTimeUTC_DMYHM(data.Date_From)}</div>
                                    </div>
                                    <hr class="horizontal bg-white my-1">
                                    <div class="row px-2">
                                        <div class="fw-bold col-12 col-sm-3 p-1">@Local["Chi nhánh"]</div>
                                        <div class="border-start border-success col-12 col-sm-9 p-1 ps-2 ">${Fun_GetName_ByID(CanDataBranch, data.BranchID)}</div>
                                    </div>
                                    <hr class="horizontal bg-white my-1">
                                    <div class="row px-2">
                                        <div class="fw-bold col-12 col-sm-3 p-1">@Local["Dịch vụ"]</div>
                                        <div class="border-start border-success col-12 col-sm-9 p-1  ps-2">${Service}</div>
                                    </div>
                                    <hr class="horizontal bg-white my-1">
                                    <div class="row px-2">
                                        <div class="fw-bold col-12 col-sm-3 p-1">@Local["Nội dung"]</div>
                                        <div class="content_line_clamp border-start border-success col-12 col-sm-9 p-1 ps-2">${data.Content}</div>
                                    </div>
                                    <hr class="horizontal bg-white my-1">
                                    <div class="row px-2">
                                        <div class="fw-bold col-12 col-sm-3 p-1">@Local["Người tạo"]</div>
                                        <div class="content_line_clamp border-start border-success col-12 col-sm-9 p-1 ps-2">
                                            ${Fun_GetName_ByID(CanDataEmployee, data.CreatedBy)}
                                        </div>
                                    </div>
                                    <hr class="horizontal bg-white my-1">
                                    <div class="row px-2">
                                        <div class="fw-bold col-12 col-sm-3 p-1">@Local["Ngày tạo"]</div>
                                        <div class="content_line_clamp border-start border-success col-12 col-sm-9 p-1 ps-2">
                                            ${ConvertDateTimeUTC_DMYHM(data.Created)}
                                        </div>
                                    </div>
                                        ${(data.IsCancel != "0")
                        ? `
                                            <hr class="horizontal bg-white my-1">
                                            <div class="row px-2">
                                                    <div class="fw-bold col-12 col-sm-3 p-1">@Local["Lý do hủy"]</div>
                                                <div class="content_line_clamp border-start border-success col-12 col-sm-9 p-1 ps-2">
                                                    ${Fun_GetName_ByID(CanDataReasonCancel, data.ReasonCancelID)}
                                                </div>
                                            </div>`
                        : ''
                    }
                                </div>`

            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    function Calendar_RenderContentByListWeek(name,extend){
        let result = '';
        if(name && name != ''){
            result += `<div class="gap-2 row">
                <div class="col-11 col-md-3">
                    <span class="text-sm text-dark pe-5">${name}</span>
                </div>
                <div class="col-11 col-md-3">
                    <div class="text-sm text-dark">${extend.Service != '' ? `<span class="fw-bold">@Local["Dịch vụ"] : </span>${extend.Service}` : ''}</div>
                </div>
                <div class="col-11 col-md">
                    <div class="text-sm text-dark content_line_clamp">${extend.Content != '' ? `<span class="fw-bold">@Local["Nội dung"] : </span>${extend.Content}` : ''}</div>
                </div>
            </div>
            `
        }
        return result;
    }

    //#endregion

    //#region // TRIGGER CHANGE DATE

    function Calendar_TriggerDate() {
        $(".fc-prev-button").on('click', function () {
            calendar.prev();
        });
        $(".fc-next-button").on('click', function () {
            calendar.next();
        });
        $(".fc-today-button").on('click', function () {
            $(this).addClass("fc-button-active").siblings().removeClass("fc-button-active");
            calendar.today();
            $(".fc-toolbar-title").html(calendar.view.title);
        });
        $(".fc-dayGridMonth-button").on('click', function () {
            calendar_MonthView = 1;
            $(this).addClass("fc-button-active").siblings().removeClass("fc-button-active");
            calendar.changeView('dayGridMonth');
            Calendar_ReloadData();
            $(".fc-toolbar-title").html(calendar.view.title);

        });
        $(".fc-timeGridWeek-button").on('click', function () {
            calendar_MonthView = 0;
            $(this).addClass("fc-button-active").siblings().removeClass("fc-button-active");
            calendar.changeView('timeGridWeek');
            Calendar_ReloadData();
            $(".fc-toolbar-title").html(calendar.view.title);

        });
        $(".fc-timeGridday-button").on('click', function () {
            calendar_MonthView = 0;
            $(this).addClass("fc-button-active").siblings().removeClass("fc-button-active");
            calendar.changeView('listWeek');
            Calendar_ReloadData();
            $(".fc-toolbar-title").html(calendar.view.title);

        });

    }
    function Calendar_EventTooltip() {
        $(document).on('inserted.bs.tooltip', '.fc-daygrid-event, .appmore, .fc-list-event,.fc-timegrid-event', function () {
            let ele = $(".tooltip-inner").find('i.colorServiceCare');
            if (ele.length != 0) {
                for (let i = 0; i < ele.length; i++) {
                    let color = ele[i].classList[ele[i].classList.length - 1];
                    ele[i].style.color = color;
                }
            }
        });
        $(document).click(function(e){
            let more = $(".fc-daygrid-more-link");
            let popup = $("#calendarpopper");
            if (!$(more).is(e.target) && $(more).has(e.target).length === 0
                && !$(popup).is(e.target) && $(popup).has(e.target).length === 0) {
                $("#calendarpopper").addClass("d-none");
            }
        });
        $(".fc-popover-close").on('click', function(){
            $("#calendarpopper").addClass("d-none");
        })
    }

    //#endregion

    //#region //CheckBox fillter
    function Calendar_EventCheckBox() {
        $(".Calendar_FillterType").unbind('click').click(function () {
            let type = Number($(this).attr('data-type'));
            let typeName = '';
            switch (type) {
                case 0:
                    typeName = '.treat';
                    break;
                case 1:
                    typeName = '.consult';
                    break;
                case 2:
                    typeName = '.cancel';
                    break;
            }
            Calendar_EventCheckExe($(this), typeName);
        });
    }

    function Calendar_EventCheckExeAll() {
        Calendar_EventCheckExe($('#Canfil_Can'), '.cancel');
        Calendar_EventCheckExe($('#Canfil_Treat'), '.treat');
        Calendar_EventCheckExe($('#Canfil_Cons'), '.consult');
    }

    function Calendar_EventCheckExe(_obj, typeName) {
        if (!_obj.is(":checked"))
            $("#vtt_master " + typeName).addClass("noneactive");
        else
            $("#vtt_master " + typeName).removeClass("noneactive");
    }
    //#endregion

</script>


<style>
    .fc .fc-more-popover .fc-popover-body {
        max-height: 500px;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .fc .fc-daygrid-more-link {
        color: rgb(var(--bs-primary));
        font-size: 12px;
    }

    .btn {
        display: inline-block !important;
        font-weight: 700 !important;
    }

    .fc .fc-button {
        padding-block: 8px !important;
    }

    .fc .fc-button-primary {
        padding: 5px !important;
    }

        .fc .fc-button-primary:not(:disabled):active,
        .fc .fc-button-primary:not(:disabled).fc-button-active,
        .fc .fc-button-primary.btn-dark {
            background-color: #344767 !important;
            border-color: #344767 !important;
        }

        .fc .fc-button-primary:first-child {
            border-top-left-radius: 0.2em !important;
            border-bottom-left-radius: 0.2em !important;
        }

        .fc .fc-button-primary:last-child {
            border-top-right-radius: 0.2em !important;
            border-bottom-right-radius: 0.2em !important;
        }

    div#calendar .fc-v-event {
        /*border: 1px solid white !important;*/
        border-radius: 4px;
        padding-left: 3px;
    }

    .expand .tooltip-inner {
        max-width: 350px !important;
        width: 350px !important;
    }

    #vtt_master consult, treat, cancel {
        display: flex;
    }

    #vtt_master .consult.noneactive,
    .treat.noneactive,
    .cancel.noneactive {
        display: none;
    }

    .fc-timegrid .fc-timegrid-body td, .fc-timegrid .fc-scrollgrid-sync-table td {
        border-right: 4px solid #F1F1F1 !important;
    }

    .fc-popover.fc-more-popover {
        display: none !important;
    }
    #calendarpopper{
        transition: 0.3s all;
       -webkit-transition: 0.3s all;
    }

    .fc-theme-standard td, .fc-theme-standard th{
        border-width: 3px;
        border-color: #d4d8db;
    }

    @@media only screen and (max-width: 768px){
        td.fc-daygrid-day.fc-day-other {
            min-width: 100px;
            width: 100px;
        }

        .fc .fc-scroller-liquid-absolute{
            overflow:auto !important;
        }
    }


</style>