@page
@model MLunarCoffee.Pages.Desk.DeskMasterModel
@{
    if (@Model.layout == "none") Layout = null;
}
@Html.AntiForgeryToken()

<div class="card card-plain">
    <div class="vtcardheader card-header pb-0 px-0 pt-3">
        <div class="left">
            <ul id="desk_manage_menu" class="nav nav-pills p-1 bg-transparent deskmaster" role="tablist">
            </ul>
        </div>
        <div class="right w-100 ps-0 ps-lg-3">
            <div class="d-flex ms-auto" style="overflow-x: hidden;">
                <div class="ps-3 pt-lg-0 pt-3 row d-flex ms-auto Information_content_desk " id="Information_content_desk">
                </div>
            </div>
            
        </div>
        <div class="toggle">
            <div class="card position-absolute end-0 shadow-xl collapse collapsesticky" id="Desk_NotifyPopup">
                <div class="card-header card-header px-3 py-3 border-bottom">
                    <div class="d-flex align-items-center">
                        <div class="text-primary fw-bold text-sm cursor-pointer" id="Desk_ReadAllNotify">@Local["Đọc tất cả"]</div>
                        <div class="text-dark ms-auto text-sm cursor-pointer" id="Desk_CloseNotify">@Local["Đóng"]</div>
                    </div>
                </div>
                <div class="card-body p-3 overflow-auto max-height-500">
                    <ul class="list-group" id="Desk_NotifyPopupBody">
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body p-0 pt-2 ">
        <div class="d-lg-flex p-2  pt-0">
            <div class="flex-grow-1 d-none">
                <div class="ps-0">
                    <h6 id="desk_manage_text" class="mb-0"></h6>
                    <p id="desk_manage_display" class="text-sm mb-0"></p>
                </div>
            </div>
        </div>
        <div class="col-12" id="DeskMain">

        </div>
    </div>
</div>

<script>
    var Desk_Doctor = 0;
    var Desk_StatusCashier = 0;
    var Desk_StatusExam = 0;
    var Desk_StatusXray = 0;
    var Desk_Manage_Volume = "VTTECH_DESK_MANAGE_VOLUME";
    var Is_Desk_Room = 0;
    var Is_Desk_Branch = 0;
    var Is_Desk_Doctor = 0;
    var Is_Desk_Cashier = 0;
    var Is_Desk_Exam = 0;
    var Is_Desk_Xquang = 0;
    var xhrRequestDesk;
    var CountNotification = 0;
    var Title_Document = document.title;


   

    ///
    // Type 1: Lich hen theo chi nhanh
    // Type 2: Lich hen theo chi nhanh cua bac si
    // Type 3: Lich hen theo chi nhanh theo 1 trang thai
    ///

    var Desk_Type = "";
    $(document).ready(function () {
        Desk_IniLoad();
        if (sys_isMobile != 1 && sys_isIpad != 1) {
            Notification.requestPermission().then(function (result) { });
        }
        $(window).focus(function () {
            CountNotification = 0;
            document.title = Title_Document;
        });
    })

    // #region // Menu


    function Desk_IniLoad () {
        AjaxLoad(url = "/Desk/DeskMaster/?handler=LoadataDeskMaster"
            , data = {"GroupID": Master_roleID}
            , async = true
            , error = function () {notiError_SW();}
            , success = function (result) {
                let menu = JSON.parse(result).Table;
                let point = JSON.parse(result).Table1;
                let status = JSON.parse(result).Table2;
                Desk_Menurender(menu, status, "desk_manage_menu");
                //Desk_Annorender(menu, "announce_desk_content_master");
                Desk_Pointrender(point, "Information_content_desk");
                Desk_PointUpdate(Master_branchID, Desk_Doctor);
                Desk_MenuEvent();
                Desk_EventNotify('Userexp');
                //Desk_Restore_Annouce_From_Cookie();
                $('.deskmaster a:first').addClass('active');
                $('.deskmaster a:first').trigger('click');
            }
            , sender = null
        );
    }
    async function Desk_Menurender (data, dataStatus, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        switch (item.Type) {
                            case 'branch':
                                Is_Desk_Branch = 1;
                                break;
                            case 'room':
                                Is_Desk_Room = 1;
                                break;
                            case 'cashier':
                                Is_Desk_Cashier = 1;
                                Desk_StatusCashier = Number(dataStatus[0].Status_Cashier);
                                break;
                            case 'exam':
                                Is_Desk_Exam = 1;
                                Desk_StatusExam = Number(dataStatus[0].Status_Exam);
                                break;
                            case 'xquang':
                                Is_Desk_Xquang = 1;
                                Desk_StatusXray = Number(dataStatus[0].Status_Xquang);
                                break;
                            case 'doctor':
                                Is_Desk_Doctor = 1;
                                Desk_Doctor = Number(sys_employeeID_Main);
                                break;
                            default: break;
                        }
                        let row = '<li class="nav-item  " role="presentation" title="' + item.Name + '">'
                            + '<a class="item nav-link cursor-pointer p-2" data-name="' + item.Name + '" data-display="' + item.TextDisplay + '"  data-type="' + item.Type + '" data-href="' + item.Link + '" data-index="' + i + '" data-bs-toggle="pill"  role="tab">'
                            + '<i class="fs-5  pe-1  text-primary ' + item.Avatar + '"></i>'
                            + '</a>'
                            + '</li>';
                        stringContent += row;
                    }
                    document.getElementById(id).innerHTML = stringContent;
                }
            }
            resolve();
        })
    }
    async function Desk_Annorender (data, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let row = ' <div id="announce_desk_content_'
                            + item.Type + '" class="announce_desk_content"  data-type="'
                            + item.Type + '"></div>'
                        stringContent += row;
                    }
                    document.getElementById(id).innerHTML = stringContent;
                }
            }
            resolve();
        })
    }
    async function Desk_Pointrender (data, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let _text = item.NoteLangKey != "" ? Outlang[item.NoteLangKey] : item.Description;
                        let NotifyID = item.Type == 6 ? `Desk_Notify position-relative` : ``;
                        let row = `<div style="min-width: 130px;" class="col-auto px-2 pb-2 py-lg-0 ${NotifyID}">
                                     <div class="d-flex text-dark">
                                         <div class="pe-2 ">
                                         <span class="fw-bolder fs-5 Type_Point_Desk counter" data-type="${item.Type}">0</span>
                                          </div>
                                         <p class="text-sm my-0 text ellipsis_two_line" >${_text}</p>
                                     </div>
                                   </div>`;
                        stringContent += row;
                    }
                    document.getElementById(id).innerHTML = stringContent;
                }
            }
            resolve();
        })
    }
    function Desk_MenuEvent () {
        $("#desk_manage_menu .item").unbind('click').click(function () {
            let name = $(this).attr("data-name");
            let display = $(this).attr("data-display");
            $('#desk_manage_text').html(name);
            $('#desk_manage_display').html(display);
            let url = $(this).attr("data-href");
            let type = $(this).attr("data-type");
            Desk_Type = type;
            if ($("#filter_container").length) $("#filter_container").remove();
            $('.announce_desk_content').hide();
            let _x = document.getElementsByClassName('announce_desk_content');
            for (_i = 0; _i < _x.length; _i++) {
                if (_x[_i].dataset.type == type) {
                    _x[_i].style.display = "block";
                }
            }
            Desk_RedirectPage(url);
        })

    }
    function Desk_RedirectPage (url) {
        if (url.length > 0) {
            if (url != '#') {
                if (xhrRequestDesk && xhrRequestDesk.readyState != 4) {
                    xhrRequestDesk.abort();
                }
                xhrRequestDesk = $.ajax({
                    url: '/' + url,
                    type: 'GET',
                    error: function (xhr) {
                    },
                    success: function (result) {
                        if ($("#DeskMain_Content").length > 0) {
                            $("#DeskMain_Content").find('script').remove();
                            $("#DeskMain_Content").remove();
                        }
                        $("#DeskMain").append('<div id="DeskMain_Content"></div>')
                        $("#DeskMain_Content").html(result);
                        if ($('#ScheduleBranchID').length > 0) $('#ScheduleBranchID').addClass("disabled");
                        if ($('#Doctor_ID').length > 0) $('#Doctor_ID').addClass("disabled");
                        if ($('#ScheduleStatus').length > 0) $('#ScheduleStatus').addClass("disabled");

                    }
                });
            }
        }
    }
    // #endregion

    //#region // Update count
    function Desk_PointUpdate (BranchID, doctorid) {
        AjaxLoad(url = "/Desk/DeskMaster/?handler=LoadataScheduleIndicator"
            , data = {
                "BranchID": BranchID,
                "DoctorID": doctorid
            }
            , async = true
            , error = function () {notiError_SW();}
            , success = function (result) {
                let data = JSON.parse(result);
                if (data.length != 0) {
                    Desk_PointUpdateExe(data);
                }
            }
            , sender = null
        );

    }
    async function Desk_PointUpdateExe (data) {
        new Promise((resolve) => {
            setTimeout(() => {
                let TotalSchedule = data[0].TotalSchedule;
                let TotalCheckin = data[0].TotalCheckin;
                let TotalSchedule_Doc = data[0].TotalSchedule_Doc;
                let TotalCheckin_Doc = data[0].TotalCheckin_Doc;
                let Total_Cashier = data[0].Total_Cashier;
                let _x = document.getElementsByClassName('Type_Point_Desk');
                if (_x != undefined && _x.length != 0) {
                    for (i = 0; i < _x.length; i++) {
                        let _type = _x[i].getAttribute('data-type');
                        switch (_type) {
                            case '1':
                                _x[i].innerHTML = formatNumber(TotalSchedule);
                                break;
                            case '2':
                                _x[i].innerHTML = formatNumber(TotalCheckin);
                                break;
                            case '3':
                                _x[i].innerHTML = formatNumber(TotalSchedule_Doc);
                                break;
                            case '4':
                                _x[i].innerHTML = formatNumber(TotalCheckin_Doc);
                                break;
                            case '5':
                                _x[i].innerHTML = formatNumber(Total_Cashier);
                                break;
                            default: break;
                        }
                    }
                }
                $('.Type_Point_Desk  .counter').each(function () {
                    $(this).prop('Counter', 0).animate({
                        "counter": $(this).text()
                    }, {
                        duration: 500,
                        easing: 'swing',
                        step: function (now) {
                            $(this).text(Math.ceil(now));
                        }
                    });
                });
                resolve();
            }
                , 100);
        })
    }
    //#endregion
    //#region // relatime executed
    async function Desk_RoomHub (json) {

        new Promise((resolve) => {
            setTimeout(() => {
                let data = JSON.parse(json);
                if (data != undefined && data.length != 0) {
                    let branch_id = data.branch_id;
                    if (branch_id == Master_branchID && Desk_Type == "room") {
                        if (Is_Desk_Room == 1) {
                            if (data.newroom != "") {

                                notiAlertinfo(data.newroom, data.cust_name, 2000);
                                Desk_SaveDataNoti(app = data.appointment_id, data.cust_name, data.cust_code, data.cust_id, '0');
                            }
                            Desk_RoomInDay(data);
                        }
                    }
                }
                resolve();
            }, 100);
        })
    }

    async function Desk_AppHub (json) {
        new Promise((resolve) => {
            setTimeout(() => {
                try {
                     
                    let data = JSON.parse(json);

                    if (data != undefined && data.length != 0) {
                        let branch_id = data.branch_id;
                        let doctor_id = data.doctor_id;
                        let cust_name = data.cust_name;
                        let cust_code = data.cust_code;
                        let status_id = data.status_id;
                        let isnotice = 0;
                        let appointment_id = data.appointment_id;
                        if (branch_id == Master_branchID) {
                            Desk_PointUpdate(Master_branchID, Desk_Doctor);
                            if (Is_Desk_Branch == 1) {
                                isnotice = 1;
                            }
                            if (Is_Desk_Doctor == 1 && doctor_id == Desk_Doctor && Desk_Doctor != 0) {
                                isnotice = 1;
                            }
                            if (Is_Desk_Cashier == 1 && status_id == Desk_StatusCashier) {
                                isnotice = 1;
                            }
                            if (Is_Desk_Xquang == 1 && status_id == Desk_StatusXray) {
                                isnotice = 1;

                            }
                            if (Is_Desk_Exam == 1 && status_id == Desk_StatusExam) {
                                isnotice = 1;

                            }
                            if (isnotice == 1) {
                                notiAlertinfo(cust_code, cust_name, 2000);
                                Desk_SaveDataNoti(appointment_id, cust_name, cust_code, data.cust_id, '0');
                            }
                            switch (Desk_Type) {
                                case "branch": {
                                    Desk_AppInDay(appointment_id, doctor_id = 0, status_id = 0, branch_id);
                                }
                                    break;
                                case "cashier": {
                                    if (status_id == Desk_StatusCashier) {
                                        Desk_AppInDay(appointment_id, doctor_id = 0, status_id = status_id, branch_id);
                                    }
                                    else {
                                        Desk_RemoveRow(appointment_id);
                                    }
                                }
                                case "exam": {
                                    if (status_id == Desk_StatusExam) {
                                        Desk_AppInDay(appointment_id, doctor_id = 0, status_id = status_id, branch_id);
                                    }
                                    else {
                                        Desk_RemoveRow(appointment_id);
                                    }
                                }



                                    break;
                                case "xquang": {
                                    if (status_id == Desk_StatusXray) {
                                        Desk_AppInDay(appointment_id, doctor_id = 0, status_id = status_id, branch_id);
                                    }
                                    else {
                                        Desk_RemoveRow(appointment_id);
                                    }
                                }
                                    break;
                                case "doctor": {
                                    if ((doctor_id == Desk_Doctor || doctor_id == 0) && Desk_Doctor != 0) {
                                        Desk_AppInDay(appointment_id, doctor_id, status_id = 0, branch_id);
                                    }
                                    else {
                                        Desk_RemoveRow(appointment_id);
                                    }
                                }
                                    break;
                                default: break;
                            }
                        }
                    }
                }
                catch (ex) { }
                resolve();
            }, 100);
        })
    }
    //#endregion

    //#region .// Action sound
    //function Desk_MessageApp (name,code) {
    //    try {
    //        notiAlertinfo(code, name, 2000);
    //        //notiAlertinfo("","",2000);
    //        //let audio = document.getElementById("Desk_Audio")
    //        //audio.play();
    //    } catch (ex) { }

    //}

    //#endregion
    //#region //save data noti in Local Storage
    async function Desk_SaveDataNoti (app, custname, custcode, custid ,check) {
        return new Promise((resolve) => {
            setTimeout(() => {
                let obj = {};
                obj.app = app;
                obj.custname = custname;
                obj.custcode = custcode;
                obj.custid = custid;
                obj.check = check;
                let curexp = {};
                let stringcurexp = author_get('Userexp');
                if (stringcurexp != "") curexp = JSON.parse(stringcurexp);
                else curexp = {};
                if (Object.keys(curexp).length > 10) {
                    delete curexp[Object.keys(curexp)[0]];
                }
                curexp[app] = obj;
                author_set('Userexp', JSON.stringify(curexp));
                Desk_EventNotify('Userexp');
            }, 100);
        });
    }
    async function Desk_EventNotify(namesto){
        return new Promise((resolve) => {
            setTimeout(() => {
                let data = author_get(namesto);
                if (data != '') {
                    data = JSON.parse(data);
                    let dataObj = Object.values(data);
                    $('.Desk_Notify .Type_Point_Desk').html(Object.values(dataObj).filter(v => v.check === "0").length);
                    $('.Desk_Notify').unbind('click').click(function () {
                        if ($('#Desk_NotifyPopup').hasClass('show')) $('#Desk_NotifyPopup').removeClass('show');
                        else $('#Desk_NotifyPopup').addClass('show');
                        Desk_RenderNoti(namesto,'Desk_NotifyPopupBody');
                    });
                    //read all
                    $('#Desk_ReadAllNotify').unbind('click').click(function () {
                        $('.notifycontent').children().removeClass('fw-bold');
                        for (let i = 0; i < dataObj.length; i++) {
                            let item = dataObj[i];
                            Desk_SaveDataNoti(item.app, item.custname, item.custcode, item.custid, "1");
                        }
                    });
                    $('#Desk_CloseNotify').unbind('click').click(function () {
                        $('#Desk_NotifyPopup').removeClass('show');
                    });


                }
            }, 100);
        });
    }
    async function Desk_RenderNoti(namesto,id) {
        return new Promise((resolve) => {
            setTimeout(() => {
                let data = JSON.parse(author_get(namesto));
                let dataObj = Object.values(data);
                let MyNode = document.getElementById(id);
                let string = '';
                MyNode.innerHTML = '';
                for (let i = dataObj.length-1 ; i >= 0; i--) {
                    let item = dataObj[i];
                    let row = `
                        <li class="align-items-center border-0 d-flex list-group-item mb-2 ms_notiitem p-2 rounded-3">
                            <div class="w-30 avatar avatar-sm me-3">
                                <img src="${MTDataEmployee[sys_employeeID_Main]!= undefined ? MTDataEmployee[sys_employeeID_Main].Avatar : Master_Default_Pic}" class="border-radius-lg shadow shadow-lg"/>
                            </div>
                            <div class="w-70 d-flex align-items-start flex-column justify-content-center notifycontent" data-id="${item.app}">
                                <a class="${item.check == 0 ? 'fw-bold' : ''} " target="_blank"  href="/Customer/MainCustomer?CustomerID=${item.custid}&ver=${versionofWebApplication}">
                                    <span class="text-dark mb-0 text-sm ellipsis_one_line">${item.custname}</span>
                                </a>
                                <p class="text-dark mb-0 text-xs ${item.check == 0 ? 'fw-bold' : ''}">${item.custcode}</p>
                            </div>
                        </li>
                        <hr class="horizontal dark mt-0 mb-0">
                    `
                    string += row;
                }
                MyNode.innerHTML = string;
                //read one
                $('.notifycontent').unbind().click(function() {debugger
                    $(this).children().removeClass('fw-bold');
                    let app = $(this).attr('data-id');
                    let dataUpdate = data[app];
                    Desk_SaveDataNoti(app, dataUpdate.custname, dataUpdate.custcode, dataUpdate.custid, '1');
                });
            }, 100);
        });
    }
    //#endregion
</script>
<script src='/js/DeskManage/Executing.js' type="text/javascript"></script>


<style>
    .counter {
        line-height: 1 !important;
    }
    #Desk_NotifyPopup{
        width: 320px;
        z-index: 10;
    }
    .Desk_Notify .text {
        border-bottom: 1px solid rgb(var(--bs-primary));
        cursor: pointer;
    }
</style>

