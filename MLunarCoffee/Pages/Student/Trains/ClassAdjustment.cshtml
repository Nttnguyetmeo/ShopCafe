@page
@model MLunarCoffee.Pages.Student.Trains.ClassAdjustmentModel
@{
    Layout = null;
}
@Html.AntiForgeryToken()
<div class="row" id="STCAdjust_Container">
    <div class="col-12">
        <div class="card-header pb-0 ps-1" id="STCAdjust_HeaderInfo">
            <div class="d-lg-flex">
                <div class=" col-auto my-auto">
                    <div class="h-100">
                        <h6 class="mb-0">@Local["Điều chỉnh lịch đào tạo"]</h6>
                        <p class="text-sm mb-0">
                            @Local["Điều chỉnh lớp học, thời gian, giáo viên, trạng thái ẩn hiện"]
                        </p>
                    </div>
                </div>
            </div>

            <div class="ms-3 my-4 d-lg-flex">
                <div class="col-w-350  mt-lg-3 mt-lg-3">
                    <h6 class="text-dark fw-bold text-sm my-1">@Local["Thời gian buổi học"]</h6>
                    <div class="d-flex justify-content-center">
                        <input id="STCAdjust_DateFrom" class="form-control flatpickr d-none flatpickr-input"
                               type="text" placeholder="eg .date" onchange="" readonly="readonly">
                    </div>
                    <div id="STCAdjust_Time" class="d-flex">
                        <input id="STCAdjust_TimeFrom" type="text" class="classtime from flatpickr form-control d-none" placeholder="eg.begin">
                        <div class="align-items-center d-flex px-2"> - </div>
                        <input id="STCAdjust_TimeTo" type="text" class="classtime to flatpickr form-control d-none" placeholder="eg.end">
                    </div>
                </div>
                <div class="flex-grow-1 ms-xl-5 mt-lg-3">
                    <div class="bg-gray-100 border-radius-lg card-body m-3 mt-2 p-3 mx-4">
                        <div class="my-auto">
                            <div class="h-100">
                                <h6 id="STCAdjust_Subject" class="ps-1 text-primary mb-0"></h6>
                            </div>
                        </div>
                        <div class="ps-1 pt-0 text-dark text-sm">
                            <div class="d-flex align-items-center pe-0">
@*                                <div class="justify-content-center">
                                    <p class="mb-0 opacity-5 text-sm mt-3">Phòng</p>
                                    <p id="STCAdjust_Room" class="text-sm my-auto"></p>
                                </div>
                                <div class="ps-5 justify-content-center">
                                    <p class="mb-0 opacity-5 text-sm mt-3">Chi nhánh</p>
                                    <p id="STCAdjust_Branch" class="text-sm my-auto"></p>
                                </div>*@
                                <div class="justify-content-center">
                                    <p class="mb-0 opacity-5 text-sm mt-3">@Local["Thời gian học"]</p>
                                    <p id="STCAdjust_Date" class="text-sm my-auto"></p>
                                </div>
                                <div class="ps-5 justify-content-center">
                                    <p class="mb-0 opacity-5 text-sm mt-3">@Local["Trạng thái"]</p>
                                    <p id="STCAdjust_StatusName" class="text-sm my-auto"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 p-1 pe-4 ps-xl-4">
                        <h6 class="text-dark fw-bold text-sm my-1">@Local["Giáo viên"]</h6>
                        <div class="ui fluid search selection dropdown form-control" id="STCAdjust_Teacher">
                            <input type="hidden" />
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text">eg .teacher</div>
                            <div id="STCAdjust_cbbTeacher" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                    <div id="STCAdjust_RoomArea" class="mt-3 mx-xl-1 row" style="">
                        <div class="col-12 field flex-grow-1 mt-2 px-1" id="STCAdjust_RoomContent">
                            <div class="d-flex mb-2">
                                <div class="d-flex"></div>
                                <div class="ms-3 w-100">
                                    <h6 class="text-dark fw-bold text-sm my-1">@Local["Phòng học"]</h6>
                                    <div class="row" id="STCAdjust_RoomBody">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="ms-md-2 ms-xl-4">
                        <hr class="horizontal dark mt-1 mb-2">
                        <div class="list-group-item border-0 px-0">
                            <div class="form-check form-switch ps-0">
                                <input class="form-check-input ms-auto" type="checkbox" id="STCAdjust_Status" checked="checked">
                                <label class="form-check-label text-body ms-3 text-truncate w-80 mb-0" for="flexSwitchCheckDefault" id="STCAdjust_StatusLabel">@Local["Ẩn/hiện buổi học"]</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="fixed-botombutton pb-4 pe-4">
                <div class="action_Save">
                    <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
                    <div class="action_Save-Content">
                        <button class="btn btn-secondary" form="form3" onclick="event.preventDefault(); STCAdjust_Close()">@Local["Đóng"]</button>
                        <button form="form3" type="button" class="btn bg-gradient-primary mt-2 me-2" onclick="event.preventDefault();return STCAdjust_ExcuteData()">@Local["Lưu"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    //#region //INIT - DEFINE
    let STCAdjust_ClassTimeID = '@Model._ClassTimeID';
    let STCAdjust_DataPicker, STCAdjust_TimePickerFrom, STCAdjust_TimePickerTo;

    $(document).ready(function () {
        STCAdjust_Init();
        STCAdjust_LoadData();
    });

    function STCAdjust_Init() {
        STCAdjust_LoadCombo();
        STCAdjust_LoadDataRoom(id = 'STCAdjust_RoomBody');
        //init date picker
        let dataNow = (new Date()).addDays(-1);
        STCAdjust_DataPicker = $("#STCAdjust_DateFrom").flatpickr({
            dateFormat: 'd-m-Y',
            enableTime: false,
            disable: [
                function (date) {
                    return (date < (dataNow) && (ConvertDateTimeUTC_DMY(value) != ConvertDateTimeUTC_DMY(date)))
                }
            ],
            inline: true,
            defaultDate: value
        });
        STCAdjust_TimePickerFrom = $("#STCAdjust_Time .classtime.from").flatpickr({
            enableTime: true,
            inline: true,
            noCalendar: true,
            dateFormat: "H:i",
            time_24hr: true,
            minTime: "06:30",
            maxTime: "23:00",
            defaultHour: 7,
            defaultMinute: 0
        });
        STCAdjust_TimePickerTo = $("#STCAdjust_Time .classtime.to").flatpickr({
            enableTime: true,
            inline: true,
            noCalendar: true,
            dateFormat: "H:i",
            time_24hr: true,
            minTime: "06:30",
            maxTime: "23:00",
            defaultHour: 8,
            defaultMinute: 0
        });
    }

    function STCAdjust_LoadCombo() {
        if (TrainData_Teacher && TrainData_Teacher.length > 0) {
            Load_Combo(TrainData_Teacher, "STCAdjust_cbbTeacher", false);
            $("#STCAdjust_Teacher").dropdown("refresh");
            $("#STCAdjust_Teacher").dropdown("set selected", sys_employeeID_Main.toString());
        }
    }

    async function STCAdjust_LoadDataRoom(id) {
        return new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let data = [...TrainData_Class];
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let tr = '';
                        let item = data[i];
                        if (item != undefined) {
                            tr = STCAdjust_RenderRoomItem(item);
                        }
                        document.getElementById(id).insertAdjacentHTML('beforeend', tr);
                    }
                }
            }
            resolve();
        })
    }

    function STCAdjust_RenderRoomItem(item) {
        let resultString = '';
        if (item != undefined) {
            resultString = `<div class="roomDetail cursor-pointer text-dark d-inline-block m-2 mx-0 " id="STCAdjust_Room-${item.ID}">
                                                                <div class="roomContent p-2 border-1 border border-light border-radius-md bg-gray-100 h-100" data-id="${item.ID}">
                                                                <div class="text-sm fw-bold mb-0">${item.Name}</div>
                                                                </div>
                                                                </div>`
        }
        return resultString;
    }
    //endregion

    //#region //LOADDATA
    function STCAdjust_LoadData() {
        AjaxLoad(url = "/Student/Trains/ClassAdjustment/?handler=LoadData"
            , data = { "ClassTimeID": STCAdjust_ClassTimeID }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    if (data != undefined && data.length == 1) {
                        let item = data[0];
                        if (item && item != null) {
                            STCAdjust_FillData(item);
                        }
                    }
                }
            }
            , sender = null
            , before = function (e) {

            }
            , complete = function (e) {

            }
        );
    }

    function STCAdjust_FillData(item) {
        STCAdjust_DataPicker.setDate(INTYMDToDate(item.Dayint), true);
        STCAdjust_TimePickerFrom.setDate(ConvertTimeInt_ToTime(item.TimeStart));
        STCAdjust_TimePickerTo.setDate(ConvertTimeInt_ToTime(item.TimeEnd));
        $("#STCAdjust_Teacher").dropdown("set selected", item.TeacherID.toString());
        $('#STCAdjust_Subject').html(item.SubjectName);
        $('#STCAdjust_StatusName').html(STCAdjust_TeachingGetStatus(item.Status).Value);
        $('#STCAdjust_StatusName').addClass(STCAdjust_TeachingGetStatus(item.Status).TextColor);
        $('#STCAdjust_Date').html(BigIntToDate(item.Dayint) + ' ' + ConvertTimeInt_ToTime(item.TimeStart) + ' - ' + ConvertTimeInt_ToTime(item.TimeEnd));
        let objRoom = TrainData_Class.find(x => x.Name === item.ClassName);
        let roomID = objRoom?.ID ?? '';
        $(`#STCAdjust_Room-${roomID}`).children().addClass('bg-gradient-primary text-white currentClassTime');


        let isDisabled = item.IsDisabled == 0 ? true : false;
        $('#STCAdjust_Status').prop('checked', isDisabled);
        if (!isDisabled) {
            STCAdjust_HandleDisable();
        }
        STCAdjust_Event();
    }

    function STCAdjust_TeachingGetStatus(type) {
        let status = {
            0: { Value: '@Local["Chưa dạy"]', TextColor: 'text-secondary' },
            1: { Value: '@Local["Đang dạy"]', TextColor: 'text-primary' },
            2: { Value: '@Local["Đã dạy"]', TextColor: 'text-success'},
        }
        return status[type] || 'undifined';
    }

    function STCAdjust_RenderTime(...time) {
        [dayInt, timeStart, timeEnd] = time;
        let timeLearning = BigIntToDate(dayInt) + ", " + timeStart.slice(0, 2) + ":" + timeStart.slice(2) + " - " + timeEnd.slice(0, 2) + ":" + timeEnd.slice(2);
        return timeLearning;
    }

    //#endregion

    //#region //EXCUTE DATA
    function STCAdjust_ExcuteData() {
        let data = new Object();
        let date = $('#STCAdjust_DateFrom').val();
        if (date !== "") {
            data.DayInt = ConvertString_DMY_To_StringYMD(date).replaceAll('-', '');
            data.TimeStart = $("#STCAdjust_Time .classtime.from").val().replaceAll(':', '');
            data.TimeEnd = $("#STCAdjust_Time .classtime.to").val().replaceAll(':', '');
            data.TeacherID = Number($('#STCAdjust_Teacher').dropdown('get value')) ? Number($('#STCAdjust_Teacher').dropdown('get value')) : 0;
            data.ManuClassID = $('.currentClassTime').attr('data-id') ? $('.currentClassTime').attr('data-id') : 0;
            data.IsDisabled = $('#STCAdjust_Status').prop('checked') === true ? 0 : 1;

            AjaxLoad(url = "/Student/Trains/ClassAdjustment/?handler=ExcuteData"
                , data = {
                    data: JSON.stringify(data),
                    CurrentID: STCAdjust_ClassTimeID
                }, async = true, error = null
                , success = function (result) {
                    if (result == "1") {
                        notiSuccess();
                        Classtime_Load();
                        STCAdjust_Close();
                    } else if (result == "0") {
                        notiWarning("@Local["Buổi học đã bắt đầu không thể chỉnh sửa"]");
                    } else {
                        notiError_SW();
                    }
                });

        }
        else {
            notiWarning("@Local["Không thể chỉnh sửa buổi học trong quá khứ"]");
        }
        return false;
    }
    //#endregion

    //#region //HANDLE EVENT

    //#region //HANDLE DISABLE CLASSTIME
    function STCAdjust_HandleDisable() {
        //$('#STCAdjust_detail').addClass('bg-disabled');
    }
    //#endregion

    //#region //Event
    function STCAdjust_Event() {
        $('#STCAdjust_RoomBody').unbind().on('click', '.roomDetail', function () {
            $('#STCAdjust_RoomBody .roomContent').removeClass('bg-gradient-primary text-white currentClassTime');
            $(this).children().addClass('bg-gradient-primary text-white currentClassTime');
        });

    }

    function STCAdjust_Close() {
        $("#Classtime_Master").removeClass('d-none');
        $("#Classtime_Detail").addClass('d-none');
        $('#DetailModalPopup').show();
        if (calendar != undefined && calendar != null)
            calendar.updateSize()
    }
                                        //#endregion
                                        //#endregion

</script>
<style>
    #STCAdjust_RoomBody .roomDetail.active .roomContent {
        background-image: linear-gradient( 310deg, #7928CA 0%, #FF0080 100%);
        color: white;
    }

    #STCAdjust_RoomBody .roomDetail {
        max-width: 120px;
    }

    #STCAdjust_Container .flatpickr-calendar {
        box-shadow: none !important;
    }
</style>
