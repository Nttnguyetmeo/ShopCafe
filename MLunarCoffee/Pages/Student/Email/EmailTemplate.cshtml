@page
@model MLunarCoffee.Pages.Student.Email.EmailTemplateModel
@{
    Layout = null;
}
@Html.AntiForgeryToken()
<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require('/js/main.js');</script>
<script>js_require('/js/customjs/custom-validation.js');</script>
<script>js_require_notasync('/js/Email.js');</script>

<div id="MailTemplateLoaderDiv" class="bg-gray-900 h-100 opacity-5 position-fixed w-100 z-index-3" style="display: none;">
    <div id="MailTemplateLoader" class="waitingdiv text-center position-absolute top-50 start-50 translate-middle z-index-3">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>
<div class="container-fluid px-0">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body p-3 pt-2">
                    <div class="row px-2 form3" id="form3">
                        <div class="field col-12 col-sm-4 p-1">
                            <label>@Local["Loại email"]</label>
                            <div class="ui fluid search selection dropdown form-control" id="ETemp_Option" onchange="event.preventDefault(); return ETemp_FillTemplate();">
                                <input type="hidden" name="" />
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg .@Local["Loại email"]</div>
                                <div id="cbbETemp_Option" class="menu" tabindex="-1">
                                </div>
                            </div>
                        </div>
                        <div class="field col-12 col-sm-8 p-1">
                            <label>@Local["Chi nhánh gửi"]</label>
                            <div class="ui fluid search selection dropdown form-control" id="ETemp_Branch" onchange="event.preventDefault(); return ETemp_FillBranchMail();">
                                <input type="hidden" name="" />
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg .@Local["Chi nhánh"]</div>
                                <div id="cbbETemp_Branch" class="menu" tabindex="-1">
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-sm-4 p-1 h-100">
                            <div id="formEmail" class="row px-2 form3">
                                <div class="field col-12 col-sm-12 px-1">
                                    <label>@Local["Tiêu đề"]</label>
                                    <input id="ETemp_Subject" name="subject" type="text" class="ps-3 form-control" placeholder="eg .Tiêu đề" autocomplete="off">
                                </div>
                                <div class="field col-12 col-sm-6 mt-2 px-1">
                                    <label>@Local["Tên hiển thị"]</label>
                                    <input id="ETemp_NameSend" type="text" class="ps-3 form-control disabled" disabled="disabled" placeholder="eg .Email gửi" autocomplete="off">
                                </div>
                                <div class="field col-12 col-sm-6 mt-2 px-1">
                                    <label>@Local["Email gửi"]</label>
                                    <input id="ETemp_MailFrom" type="text" class="ps-3 form-control disabled" disabled="disabled" placeholder="eg .Email gửi" autocomplete="off">
                                </div>
                            </div>
                            <div class="field mt-2">

                                <div class="d-flex">
                                    <label>@Local["Danh sách người nhận"]</label>
                                    <div class="text-primary fw-bold d-inline mx-2 ms-auto">
                                        <span id="ETemp_CurrentData" class="text-xs"></span>
                                        <span class="mx-2">/</span>
                                        <span id="ETemp_TotalData" class="text-xs"></span>
                                    </div>
                                </div>

                                <div class="max-height-500 min-height-500 overflow-auto w-100 overflow-y">
                                    <div class="form-group sticky-top bg-white z-index-1">
                                        <div class="input-group mb-0">
                                            <span class="input-group-text fw-bold text-primary ">@Local["Số lượng gửi"]:</span>
                                            <span class="ps-2 form-control fw-bolder text-dark" id="EMail_TotalSending">20</span>
                                        </div>
                                    </div>
                                    <table class="table table-flush dataTable-table mb-0" id="ETemp_dtReceiver">
                                        <tbody id="ETemp_dtReceiverBody">
                                        </tbody>
                                    </table>
                                </div>
                                <button class="btn btnsysmore btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return ETemp_RenderMore();">
                                    @Local["Xem thêm"]
                                </button>
                            </div>
                        </div>
                        <div class="col-12 col-sm-8 p-1 h-100">
                            <div class="field">
                                <label>@Local["Nội dung"]</label>
                            </div>
                            <div class="field">
                                <iframe id="ETemp_Container" class="rounded-3 min-vh-75 overflow-auto w-100">
                                </iframe>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="fixed-botombutton">
                <div class="action_Save">
                    <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
                    <div class="action_Save-Content">
                        <button class="btn btn-secondary" form="form3" onclick="event.preventDefault();ETemp_CloseModal()">@Local["Đóng"]</button>
                        <button form="form3" type="button" class="btn bg-gradient-primary mt-2 me-2" onclick="return ETemp_ConfirmExecute()">@Local["Gửi và đóng"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    //#region // DECLARE && INITIALIZE
    var ETemp_DataBranch = {}, ETemp_DataOption = {};
    var ETemp_KeyBranch = {}, ETemp_DataTemplate = {};
    var ETemp_whenAvailable;
    let ETemp_MasterID, ETemp_Type = '';
    let ETemp_HasOption;
    let ETemp_CurReceiver = 0;
    let ETemp_DataMainSlice;
    let ETemp_IndexTable = 0;
    let ETemp_TimeoutDetail;

    $(document).ready(function () {
        $("#BodyMain").addClass('overflow-hidden');
        ETemp_Init();
    })

    function ETemp_Init() {
        ETemp_whenAvailable = Etemp_LoaddataBranch();
    }
    //#endregion

    //#region //LOAD BRANCH INFO
    async function Etemp_LoaddataBranch() {
        return new Promise((resolve) => {
            AjaxLoad(url = "/Student/Email/EmailTemplate?handler=Initialize"
                , data = {}
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result) {
                    let data = JSON.parse(result);
                    let dataOption = data.Option;
                    let dataBranch = data.Branch;

                    if (dataOption && dataOption.length != 0) {
                        ETemp_DataOption = dataOption.reduce((pre, arr) => { if (arr.ID) pre[arr.ID] = arr; return pre; }, {});
                        Load_Combo(dataOption, "cbbETemp_Option", true);
                        $("#ETemp_Option").dropdown("refresh");
                        $("#ETemp_Option").dropdown("set selected", ETemp_DataOption[1].ID);
                    }

                    if (dataBranch && dataBranch.length != 0) {
                        ETemp_DataBranch = dataBranch.reduce((pre, arr) => { if (arr.ID) pre[arr.ID] = arr; return pre; }, {});
                        Load_Combo(dataBranch, "cbbETemp_Branch", true);
                        $("#ETemp_Branch").dropdown("refresh");
                        $("#ETemp_Branch").dropdown("set selected", dataBranch[0].ID);
                    }
                    else {
                        notiWarning("@Local["Chi nhánh chưa sử dụng mail"]");
                    }
                    resolve();
                }
                , sender = null
                , before = function () {
                    $("#MailTemplateLoader").show();
                }
                , complete = function (e) {
                    $("#MailTemplateLoader").hide();
                }
            );
        });
    }

    function ETemp_FillTemplate() {
        $("#ETemp_Container").hide();
        let subject = '', template = '';

        let charLanguage = 'Vn';
        let idxSub = 'MailSubject' + charLanguage;
        //let idxValue = 'Value' + charLanguage;
        let idxTemplate = 'Link' + charLanguage;

        let _optionid = $("#ETemp_Option").dropdown("get value") ? Number($("#ETemp_Option").dropdown("get value")) : 0;
        if (isNaN(_optionid) || ETemp_DataOption[_optionid] == undefined) return;

        let objTemplate = ETemp_DataOption[_optionid];
        template = objTemplate[idxTemplate];
        subject = objTemplate[idxSub];

        $("#ETemp_Subject").val(subject);
        ETemp_GetTemplate(template);
    }

    function ETemp_FillBranchMail() {
        let _branchid = $("#ETemp_Branch").dropdown("get value") ? Number($("#ETemp_Branch").dropdown("get value")) : 0;
        if (isNaN(_branchid)) return;
        let item = ETemp_DataBranch[_branchid];
        if (item == undefined) return;
        $("#ETemp_NameSend").val(item.DisplayName);
        $("#ETemp_MailFrom").val(item.Mail);
        ETemp_KeyBranch.BranchName = item.Name;
        ETemp_KeyBranch.BranchShortName = item.ShortName;
        ETemp_KeyBranch.BranchAddress = item.BranchAddress;
        ETemp_KeyBranch.BranchPhone = item.Phone;
        ETemp_KeyBranch.LogoBranch = item.LogoBranch;
        ETemp_KeyBranch.CompanyName = item.CompanyName;
        ETemp_KeyBranch.LogoCompany = item.LogoCompany;
        ETemp_KeyBranch.BranchHotline = item.BranchHotline;
        ETemp_FillTemplate();
    }

    //#endregion

    //#region //LOAD RECEIVER MAIL
    async function ETemp_LoadDataReceive(data) {
        return new Promise((resolve) => {
            ETemp_CountData(data);
            ETemp_DataMainSlice = sliceIntoChunks(data, 500);
            $("#ETemp_dtReceiverBody").empty();
            fnRenderBlock(ETemp_DataMainSlice[ETemp_IndexTable], "ETemp_dtReceiverBody"
                , blocknum = 100
                , fnrender = ETemp_RenderReceiver
                , fnsuccess = null
            );
            resolve();
        })
    }

    async function ETemp_RenderReceiver(data, id) {
        return new Promise((resolve) => {
            setTimeout(() => {
                let myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        let stringContent = '';
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            //let isChecked = item.IsSend == 1 ? "checked" : "";
                            let tr = ETemp_RenderReceiverEach(item);
                            stringContent = stringContent + `<tr data-id="${item?.ID}"> ${tr} </tr>`;
                        }
                        myNode.insertAdjacentHTML('beforeend', stringContent);
                    }
                    ETemp_Event();
                }
                clearTimeout(ETemp_TimeoutDetail);
                ETemp_TimeoutDetail = setTimeout(() => {
                    Count_Up("ETemp_CurrentData", $("#" + id).children().length);
                }, 300)
                resolve();
            }, 100)
        })
    }

    function ETemp_RenderReceiverEach(item) {
        let isChecked = "checked";
        let result = '';
        if (item) {
            result = `
                                                                                 <td class="px-1 py-1 cursor-pointer ">
                                                                                      <div class="d-flex align-items-center detail">
                                                                                          <div class="icon icon-shape icon-sm me-2 text-center mail_chkrecei">
                                                                                              <div class="form-check ">
                                                                                                  <input ${isChecked} data-name="${item?.Name}" data-code="${item?.Code}" class="mail_chkReceiver form-check-input" type="checkbox" >
                                                                                              </div>
                                                                                          </div>
                                                                                          <div class="d-flex flex-column">
                                                                                              <div>
                                                                                                  <p class="mb-0 border-bottom text-sm fw-bold text-primary">${item?.Code + ' - ' + item?.Name}</p>
                                                                                              </div>
                                                                                              <span class="text-sm">
                                                                                                  <span class="text-sm text-dark">${item?.Email}</span>
                                                                                              </span>
                                                                                          </div>
                                                                                              <div class="ms-auto px-3 py-2">
                                                                                              <i class="fas fa-chevron-right"></i>
                                                                                          </div>
                                                                                      </div>
                                                                                  </td>
                                                                                  `;
        }
        return result;
    }

    function ETemp_RenderMore() {
        ETemp_IndexTable += 1;
        if (ETemp_DataMainSlice && ETemp_DataMainSlice[ETemp_IndexTable]) {
            fnRenderBlock(ETemp_DataMainSlice[ETemp_IndexTable], "ETemp_dtReceiverBody"
                , blocknum = 100
                , fnrender = ETemp_RenderReceiver
                , fnsuccess = null
            );
        }
    }
    //#endregion

    //#region //LOAD TEMPLATE SENDER
    function ETemp_GeneralKeyData(dataMain) {
        if (dataMain && dataMain.length != 0) {
            let dataReceiver = dataMain.Table;
            switch (ETemp_Type) {
                case "ST_Email_AfterPayment":

                    let dataPaymentList = dataMain.Table1;

                    for (let i = 0; i < dataReceiver.length; i++) {
                        let itemStudent = dataReceiver[i];
                        let itemKey = {};

                        itemKey.StudentCode = itemStudent?.Code;
                        itemKey.StudentPhone = itemStudent?.Phone;
                        itemKey.StudentName = itemStudent?.Name;

                        itemKey.Created = itemStudent?.Created;
                        itemKey.InvoiceCode = itemStudent?.InvoiceCode;
                        itemKey.TotalPaid = itemStudent?.TotalPaid;
                        itemKey.PaymentList = dataPaymentList.map((item) => { return ETemp_RenderPaymentList(item); }).join("");

                        itemStudent.IsSend = true;
                        itemStudent.MailKey = itemKey;

                        ETemp_DataTemplate[itemStudent.ID] = itemStudent;
                    }
                    break;
                case "ST_Email_Scheduler":
                    let dataClass = dataMain.Table1;
                    let dataClassTime = dataMain.Table2;
                    for (let i = 0; i < dataReceiver.length; i++) {
                        let itemStudent = dataReceiver[i];
                        let itemKey = {};

                        itemKey.StudentCode = itemStudent?.Code;
                        itemKey.StudentPhone = itemStudent?.Phone;
                        itemKey.StudentName = itemStudent?.Name;
                        itemKey.Created = itemStudent?.Created;

                        itemKey.CourseCode = itemStudent?.CourseCode;
                        itemKey.CourseName = itemStudent?.CourceName;
                        itemKey.CoursePrice = itemStudent?.CourcePrice;
                        itemKey.ClasstimeList = ETemp_RenderSchedulerList(itemStudent.ID, dataClass, dataClassTime);

                        itemStudent.IsSend = true;
                        itemStudent.MailKey = itemKey;

                        ETemp_DataTemplate[itemStudent.ID] = itemStudent;
                    }
                    break;
                case "ST_Email_Certificate":
                    for (let i = 0; i < dataReceiver.length; i++) {
                        let itemStudent = dataReceiver[i];
                        let itemKey = {};

                        itemKey.StudentCode = itemStudent?.Code;
                        itemKey.StudentPhone = itemStudent?.Phone;
                        itemKey.StudentName = itemStudent?.Name;
                        itemKey.CourseCode = itemStudent?.CourseCode;
                        itemKey.CourseName = itemStudent?.CourceName;
                        itemKey.Cername = itemStudent?.CerName;
                        itemKey.Cerreceipt = ConvertDateTimeToString(ConvertDateTimeUTC_YMD(itemStudent?.CerReceipt));

                        itemStudent.IsSend = true;
                        itemStudent.MailKey = itemKey;
                        ETemp_DataTemplate[itemStudent.ID] = itemStudent;
                    }
                    break;
                default:
                    for (let i = 0; i < dataMain.length; i++) {
                        let item = dataMain[i];
                        let itemKey = {};

                        itemKey.CustCode = item?.Code;
                        itemKey.CustName = item?.Name;

                        item.IsSend = true;
                        item.MailKey = itemKey;
                        ETemp_DataTemplate[item.ID] = item;

                    }
                    break;
            }
        }
    }

    async function ETemp_GetTemplate(link = '') {
        return new Promise((reslove) => {
            if (link != '') {
                AjaxJWT(url = "/api/File/GetTemplate"
                    , data = JSON.stringify({
                        'Link': link,
                        'Type': 'html'
                    })
                    , async = true
                    , success = function (data) {
                        if (data != "0") {
                            ETemp_RenderMailTemplate(template = data);
                        }
                        else ETemp_RenderMailTemplate(template = "");
                    }
                );
            }
            else reslove('');
        })

    }

    async function ETemp_RenderMailTemplate(template) {
        return new Promise((resolve) => {
            setTimeout(() => {
                if (template !== "") {
                    if (Object.keys(ETemp_DataTemplate).length === 0) {
                        ETemp_DataTemplate = { 0: { MailContent: template } }
                    }
                    for ([key, value] of Object.entries(ETemp_DataTemplate)) {
                        let keyReplace = { ...value.MailKey, ...ETemp_KeyBranch };
                        value.MailContent = ETemp_ReplaceTemplate(keyReplace, template);
                    }

                    if (Object.entries(ETemp_DataTemplate).length != 0) {
                        let [k, v] = Object.entries(ETemp_DataTemplate)[0];
                        $("#ETemp_Container").contents().find('html').html(v.MailContent);
                        $("#ETemp_Container").fadeIn();
                    }
                }
            }, 100)
        })
    }

    function ETemp_ReplaceTemplate(data, template) {
        try {
            let result = template;
            if (Object.entries(data).length != 0) {
                for ([key, value] of Object.entries(data)) {
                    let keyReplace = '#' + key + '#';
                    result = result.replaceAll(keyReplace, value);
                }
            }
            return result;
        }
        catch (ex) {
            return template;
        }

    }

    //#endregion

    //#region //SEND MAIL
    function ETemp_ConfirmExecute() {
        $('#formEmail').form('validate form');
        if ($('#formEmail').form('is valid')) {
            const promise = notiConfirm();
            promise.then(function () { ETemp_ExcuteData(); }, function () { });
        }
    }

    async function ETemp_ExcuteData() {
        try {
            let _branchid = $("#ETemp_Branch").dropdown("get value") ? Number($("#ETemp_Branch").dropdown("get value")) : 0;
            if (_branchid && _branchid != 0 && ETemp_DataBranch[_branchid]) {
                let itemMail = ETemp_DataBranch[_branchid];
                let objmail = [];
                for ([key, value] of Object.entries(ETemp_DataTemplate)) {
                    if (value.IsSend && value.Email && value.Email != '') {
                        let obj = {};
                        obj.emailFrom = itemMail.Mail;
                        obj.emailTo = value.Email;
                        obj.emailCC = "";
                        obj.emailBCC = ""
                        obj.subject = $("#ETemp_Subject").val() ? ($("#ETemp_Subject").val()).trim() : '';
                        obj.content = value.MailContent;
                        objmail.push(obj);
                    }
                }
                ETemp_ExcuteData_Send(objmail)
            }
            else {
                notiWarning("@Local["Chi nhánh chưa sử dụng mail"]");
            }
        }
        catch (ex) {
            notiError_SW();
        }
    }

    async function ETemp_ExcuteData_Send(obj) {
        try {
            if (obj == undefined || obj.length == 0) {
                notiWarning("@Local["Kiểm tra lại email người nhận"]")
                return;
            }
            let result = Email_SendMulti(obj, undefined);
            let _optionid = $("#ETemp_Option").dropdown("get value") ? Number($("#ETemp_Option").dropdown("get value")) : 0;
            if (result == 1) {
                if (ETemp_Type === 'ST_Email_AfterPayment') ETemp_ExcuteData_Insert(ETemp_MasterID)
                notiSuccess();
                ETemp_CloseModal();
            }
        }
        catch (ex) {
            notiError();
        }
    }

    async function ETemp_ExcuteData_Insert(paymentID) {
        try {
            if (typeof paymentID === 'undefined') return;
            AjaxLoad(url = "/Student/Email/EmailTemplate?handler=UpdateSend"
                , data = {
                    "paymentID": paymentID
                }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result) {

                }
            );
        }
        catch {

        }
    }
    //#endregion

    //#region //EVENT
    function ETemp_Event() {
        $("#ETemp_dtReceiverBody .mail_chkReceiver").unbind().change(function () {
            let _id = Number($(this).closest('tr').attr('data-id'));
            let _isCheck = $(this).is(":checked");
            if (!isNaN(_id) && ETemp_DataTemplate[_id] != undefined) {
                ETemp_DataTemplate[_id].IsSend = _isCheck;
                let total = (_isCheck) ? ++ETemp_CurReceiver : --ETemp_CurReceiver;
                $('#EMail_TotalSending').html(total);
            }

        })

        $("#ETemp_dtReceiverBody .detail").unbind().click(function (e) {
            if ($(e.target).hasClass('mail_chkReceiver')) return
            $("#ETemp_Container").hide();
            let rowReceiver = $(this).closest('tr');
            rowReceiver.addClass('table-active').siblings('tr').removeClass('table-active');
            let _id = Number(rowReceiver.attr('data-id'));
            if (!isNaN(_id) && ETemp_DataTemplate[_id] != undefined) {
                $("#ETemp_Container").contents().find('html').html(ETemp_DataTemplate[_id].MailContent);
                $("#ETemp_Container").fadeIn();
            }
        })
    }

    function ETemp_CloseModal() {
        $("#BodyMain").removeClass('overflow-hidden');
        $('#MainSendMail_Content').empty();
        $("#MainSendMail_Content").html('')
        $("#MainSendMail").removeClass('active');
    }

    //#endregion

    //#region //FUNC STUDENT
    async function ETemp_SendMailStu(type = '', id = 0, masterid = 0) {
        return new Promise((resolve) => {
            ETemp_whenAvailable
                .then(() => {
                    ETemp_MasterID = masterid; ETemp_Type = type;
                    ETemp_LoaddataSend(type, id, masterid).then((dataMain) => {
                        let tableReceive = [...dataMain.Table];
                        let optionID = Object.values(ETemp_DataOption).find(i => i.Type === type).ID;
                        $("#ETemp_Option").dropdown("refresh");
                        $("#ETemp_Option").dropdown("set selected", Number(optionID));
                        ETemp_LoadDataReceive(tableReceive);
                        ETemp_GeneralKeyData(dataMain);

                        ETemp_FillTemplate();
                        resolve();
                    });
                })
                .catch(e => console.warn("Error"));
        })
    }

    async function ETemp_LoaddataSend(type = '', id = 0, masterid = 0) {
        return new Promise((resolve, reject) => {
            AjaxLoad(url = "/Student/Email/EmailTemplate?handler=LoadData"
                , data = {
                    "type": type,
                    "masterID": masterid,
                    "ID": id,
                }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result) {
                    if (result != "0") {
                        let dataMain = JSON.parse(result);
                        resolve(dataMain);
                    }
                    else reject();
                }
                , sender = null
                , before = function () {
                    $("#MailTemplateLoader").show();
                }
                , complete = function (e) {
                    $("#MailTemplateLoader").hide();
                }
            );
        })
    }

    function ETemp_RenderPaymentList(item) {
        try {
            return `
                    <tr>
                        <td style="padding-top: 10px;
                                    padding-bottom: 10px;
                                    font-size: 12px;
                                    font-family: arial;
                                    text-align: left;
                                    color: rgb(60,60,60);
                                    border-bottom-color: rgb(204,204,204);
                                    border-bottom-width: 1px;
                                    border-bottom-style: solid;">
                           ${item?.Subject}
                        </td>
                        <td style="padding-top: 10px;
                                    padding-bottom: 10px;
                                    font-size: 12px;
                                    padding-left: 10px;
                                    font-family: arial;
                                    text-align: left;
                                    color: rgb(60,60,60);
                                    border-bottom-color: rgb(204,204,204);
                                    border-bottom-width: 1px;
                                    border-bottom-style: solid;">
                            ${item?.Paid}
                        </td>
                    </tr>
                    `
        }
        catch {
            return '';
        }
    }

    function ETemp_RenderSchedulerList(student, dataClass, dataClassTime) {
        let stringContent = "";
        let classStu = dataClass.filter((item) => { return item.StudentID === student });
        var dayofweek = ["Chủ nhật", "Thứ 2", "Thứ 3", "Thứ 4", "Thứ 5", "Thứ 6", "Thứ 7"];

        for (let i = 0; i < classStu.length; i++) {
            let item = classStu[i];
            let classTimeStu = dataClassTime.filter((classItem) => { return classItem.ID == item.ClassID });
            let table =
                `
                    <table cellspacing="0" cellpadding="0" border="0" align="left" style="margin: auto; font-family: arial; font-size: 13px; border-collapse: collapse;width: 100%;float:unset; margin-bottom: 30px;">
                         ${ETemp_RenderSchedulerList_Thead(item.Name)}

                    `
            let stringTBODY = '';
            for (let j = 0; j < classTimeStu.length; j++) {
                let itemClassTime = classTimeStu[j];
                tr = `
                            <tr>
                                <td style="padding-top: 10px; padding-bottom: 10px; font-size: 12px; font-family: arial; text-align: left; color: rgb(60,60,60); border-bottom-color: rgb(204,204,204); border-bottom-width: 1px; border-bottom-style: solid; font-weight: bold;">
                                    ${dayofweek[itemClassTime.DOW]} ${ConvertYMDInt_ToDate(itemClassTime.Dayint)}
                                </td>
                                <td style="padding-top: 10px; padding-bottom: 10px; padding-left: 10px; font-size: 12px; font-family: arial; text-align: left; color: rgb(60,60,60); border-bottom-color: rgb(204,204,204); border-bottom-width: 1px; border-bottom-style: solid; font-weight: bold;">
                                    ${ConvertTimeInt_ToTime(itemClassTime.TimeStart)}
                                </td>
                                <td style="padding-top: 10px; padding-bottom: 10px; padding-left: 10px; font-size: 12px; font-family: arial; text-align: left; color: rgb(60,60,60); border-bottom-color: rgb(204,204,204); border-bottom-width: 1px; border-bottom-style: solid; font-weight: bold;">
                                    ${itemClassTime.ManuClass}
                                </td>
                            </tr>
                        `
                stringTBODY += tr;
            }

            table += "<tbody>" + stringTBODY + '</tbody></table>';
            stringContent += table;
        }

        return stringContent;
    }

    function ETemp_RenderSchedulerList_Thead(subject) {
        try {

            return `
                        <thead>
                            <tr>
                                <td width="40%" style="font-weight: bold; padding-top: 10px; padding-bottom: 10px; font-family: arial; text-align: left; color: #ce2525; border-bottom-color: rgb(204,204,204); border-bottom-width: 1px; border-bottom-style: solid;">
                                    ${subject}
                                </td>
                                <td width="30%" style="font-weight: bold; padding-top: 10px; padding-bottom: 10px; padding-left: 10px; font-family: arial; text-align: left; color: rgb(60,60,60); border-bottom-color: rgb(204,204,204); border-bottom-width: 1px; border-bottom-style: solid;">
                                    Thời gian
                                </td>
                                <td width="30%" style="font-weight: bold; padding-top: 10px; padding-bottom: 10px; padding-left: 10px; font-family: arial; text-align: left; color: rgb(60,60,60); border-bottom-color: rgb(204,204,204); border-bottom-width: 1px; border-bottom-style: solid;">
                                    Phòng
                                </td>
                            </tr>
                        </thead>
                    `
        }
        catch {
            return '';
        }
    }


    //#endregion

    //#region //FUNC CUSTOMER
    async function ETemp_SendMailCust(data) {
        return new Promise((resolve) => {
            $("#MailTemplateLoaderDiv").show();
            ETemp_whenAvailable
                .then(() => {
                    ETemp_IndexTable = 0;
                    let tempDataKey = [...data];
                    let tempData = [...data];
                    ETemp_LoadDataReceive(tempData);
                    ETemp_GeneralKeyData(tempDataKey);
                    ETemp_FillTemplate();
                    $("#MailTemplateLoaderDiv").hide();
                })
                .catch(e => console.warn("Error"));
        })
    }
    //#endregion

    //#region //OTHER
    function ETemp_CountData(data) {
        ETemp_CurReceiver = Number(data.length);
        Count_Up("EMail_TotalSending", ETemp_CurReceiver);
        Count_Up("ETemp_TotalData", ETemp_CurReceiver);
    }
                                                            //#endregion
</script>
