@page
@model MLunarCoffee.Pages.Student.General.Course.Payment.PaymentListModel
@{
    if (@Model.layout == "none") Layout = null;
}

<div class="row">
    <div class="col-12">
        <div class="card" id="StuPay_Main">
            <div class="card-header pb-0">
                <div class="d-lg-flex">
                    <div class="w-lg-50 col-auto my-auto">
                        <div class="h-100">
                            <h6 class="mb-0">@Local["Danh sách hóa đơn của học viên"]</h6>
                            <p class="text-sm mb-0">@Local["Quy định chỉnh sửa"]: @Local["Xóa trong ngày. Chỉ người tạo mới được quyền xóa"]</p>
                        </div>
                    </div>
                    <div class="ms-auto mt-3 mt-lg-0 my-auto w-100">
                        <div id="StuPay_HeaderArea" class="d-flex">
                            <button id="StuPay_Refresh" class="btn btn-small bg-gradient-success py-1 text-md me-3 px-3 mb-0" onclick="StuPay_LoadData()"><i class="fas fa-redo"></i></button>
                            <input id="StuPay_Date" class="flatpickr form-control flatpickr-input me-2" type="text" placeholder="eg .date" onchange="event.preventDefault(); StuPay_LoadData()" readonly="readonly">
                            <div class="ui fluid search selection dropdown form-control me-2" id="StuPay_Branch" onchange="event.preventDefault(); return StuPay_LoadData();">
                                <input type="hidden" name="statusType" />
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg. Branch</div>
                                <div id="cbbStuPay_Branch" class="menu" tabindex="-1">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body pt-2 ">
                <div id="StuPay_TableContent" class="m-0 my-3 position-relative">
                    <div id="StuPay_WaitingDiv" class="waitingdiv text-center position-absolute translate-middle-x top-5 start-50" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>

                    <div id="StuPay_Container" class="overflow-y">
                        <div id="StuPay_PaymentContent" class="row StuPay_bodyPayment overflow-auto" data-body="payment"></div>
                        <table id="StuPay_dtContent" class="table vt-table mb-0">
                            <thead class="hiddenCollapse">
                                <tr role="row">
                                    <th class="d-none">ID</th>
                                    <th style="width: 40px;">#</th>
                                    <th style="min-width:130px">@Local["Mã hoá đơn"]</th>
                                    <th style="min-width:120px">@Local["MSHV"]</th>
                                    <th style="min-width:180px">@Local["Học viên"]</th>
                                    <th style="min-width:120px">@Local["Tổng tiền"]</th>
                                    <th>@Local["Chi tiết"]</th>
                                    <th>@Local["Chi nhánh"]</th>
                                    <th tyle="min-width:100px">@Local["Xử lý"]</th>
                                </tr>
                            </thead>
                            <tbody id="StuPay_dtContentBody">
                            </tbody>
                        </table>
                        <button class="btnsysmore btn btn-secondary w-100 p-1 my-1 cursor-pointer position-absolute top-100 start-50 translate-middle-x z-index-3" onclick="event.preventDefault();return StuPay_RenderMore();">
                            @Local["Xem thêm"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>

    //#region //INIT - DEFINE
    let DataUser, DataBranch;
    let StuPay_xhrLoadList;
    let StuPay_DataMainSlice;
    let StuPay_IndexTable = 0;

    $(document).ready(function () {
        StuPay_Init();
        Master_IndexDB_Reads(_Session_Data, [_Session_User, _Session_Branch]
            , function (data) {
                DataUser = data[0];
                DataBranch = data[1];
                StuPay_LoadData();
            });

    });

    function StuPay_Init() {

        $("#StuPay_Date").flatpickr({
            mode: "range"
            , dateFormat: 'd-m-Y'
            , enableTime: false
        });
        let date = new Date();
        let firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
        let lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
        $("#StuPay_Date").val(formatDateClient(firstDay) + ' to ' + formatDateClient(lastDay));

        StuPay_LoadCombo();

    }

    function StuPay_LoadCombo() {
        AjaxLoad(url = "/Student/General/Course/Payment/PaymentList/?handler=LoadCombo"
            , data = {}
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    Load_Combo(data, 'cbbStuPay_Branch', true);
                    $("#StuPay_Branch").dropdown('refresh')
                    $("#StuPay_Branch").dropdown('set selected', data[0].ID);
                }
            }
            , sender = null
            , before = function (e) {

            }
            , complete = function (e) {

            }
        );
    }

    //#endregion

    //#region //LOADDATA
    async function StuPay_LoadData() {
        return new Promise((resolve) => {
            if (StuPay_xhrLoadList && StuPay_xhrLoadList.readyState != 4) StuPay_xhrLoadList.abort();
            $("#StuPay_dtContentBody").empty();
            StuPay_IndexTable = 0;

            let dateFrom = "";
            let dateTo = "";
            let date = $('#StuPay_Date').val() ? $('#StuPay_Date').val() : new Date()
            if (date.includes(" to ")) {
                dateFrom = date.split(" to ")[0];
                dateTo = date.split(" to ")[1];
            }
            else {
                dateFrom = date;
                dateTo = date;
            }
            let branchID = Number($("#StuPay_Branch").dropdown('get value')) ? Number($("#StuPay_Branch").dropdown('get value')) : 0;

            StuPay_xhrLoadList = AjaxLoad(url = "/Student/General/Course/Payment/PaymentList?handler=LoadData"
                , data = {
                    'branchID': branchID,
                    'dateFrom': dateFrom,
                    'dateTo': dateTo
                }
                , async = true
                , error = function () { notiError_SW(); }
                , success = function (result) {
                    if (result != "[]") {
                        let data = JSON.parse(result);
                        StuPay_DataMainSlice = sliceIntoChunks(data, 300);
                        fnRenderBlock(StuPay_DataMainSlice[StuPay_IndexTable], "StuPay_dtContentBody"
                            , blocknum = 100
                            , fnrender = StuPay_Render
                            , fnsuccess = null
                        );
                    }
                    else { }
                }
                , sender = null
                , before = function (e) {
                    $("#StuPay_dtContentBody").hide();
                    $("#StuPay_WaitingDiv").show();
                }
                , complete = function (e) {
                    $("#StuPay_dtContentBody").show();
                    $("#StuPay_WaitingDiv").hide();
                }
            );
            resolve();
        })
    }
    //#endregion

    //#region //RENDER DATA
    async function StuPay_Render(data, id) {
        return new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    let stringContent = '';
                    if (data && data.length > 0) {
                        for (var i = 0; i < data.length; i++) {
                            let item = data[i];
                            let contentDetail = '';
                            for (j = i; j < data.length; j++) {
                                if (data[i].ID == data[j].ID) {
                                    contentDetail = contentDetail + StuPay_RenderDetail(data[j].Amount, data[j].CourseCode, data[j].Subject, data[j].Price, data[j].Method);
                                }
                                else {
                                    j--;
                                    break;
                                };
                            }
                            let tr = StuPay_RenderEach(item, contentDetail);
                            i = j;
                            stringContent = stringContent + `<tr id="stupay_tr${item?.ID}" class="vt-number" role="row"> ${tr} </tr>`;
                        }
                        myNode.insertAdjacentHTML('beforeend', stringContent);
                        StuPay_HandleEvent();
                    }
                    $("#StuPay_WaitingDiv").hide();
                }
                resolve();
            }, 100)
        })
    }

    function StuPay_RenderDetail(Payment, CourseCode, Subject, Price, Method) {
        let classname = (Payment > 0) ? 'fa-plus text-success' : 'fa-minus text-danger';
        let subjectName = Subject != '' ? ' <i class="text-warning fw-bold fas fa-angle-right"></i> ' + Subject : '';
        let name = '<span class="">' + CourseCode + ' ' + subjectName + ' - ' + formatNumber(Price) + '</span>';

        let result = '<div class="card-body px-2 py-1">'
            + '<div class="ps-2 mb-0">'
            + '<p class="text-sm m-0">'
            + '<i class="fa ' + classname + ' me-2"></i> '
            + '<span class="text-sm pe-2">' + Method + ': <strong class="fw-bold text-primary">' + formatNumber(Math.abs(Payment)) + '</strong></span>'
            + name
            + '</p>'
            + '</div>'
            + '</div>'
            + '<hr class="horizontal dark my-0">'

        return result;
    }

    function StuPay_RenderEach(item, detail) {
        try {
            return `
                    <td class="d-none StuPay_ID" data-> ${item?.ID} </td>
                    <td class="vt-number-order"></td>
                    <td class="mx-auto">
                        <div class="d-flex flex-column">
                            <h6 class="text-primary text-sm mb-0 fw-bold"> ${item?.Code} </h6>
                            <span class="text-sm"> ${formatDateToDMYHM(item?.Created)} </span>
                        </div>
                    </td>
                    <td class="mx-auto"> ${item?.Stucode} </td>
                    <td class="mx-auto"> ${item?.Stuname} </td>
                    <td class="mx-auto"> ${formatNumber(item?.TotalAmount)} </td>
                    <td class="block-horizontal">${detail ?? '@Local["Không có dữ liệu"]'}
                    </td>
                    <td class="mx-auto"> ${Fun_GetName_ByID(DataBranch, item?.BranchID)} </td>
                    <td>
                        <div class="text-nowrap cursor-pointer">
                                ${StuPay_RenderButton(item?.ID, item?.IsPassingDate, item?.IsCreatedBy, item?.IsCreatedDate, item.Code)}
                        </div>
                    </td>`;
        }
        catch {
            return '';
        }
    }

    function StuPay_RenderMore() {
        StuPay_IndexTable += 1;
        if (StuPay_DataMainSlice && StuPay_DataMainSlice[StuPay_IndexTable]) {
            fnRenderBlock(StuPay_DataMainSlice[StuPay_IndexTable], "StuPay_dtContentBody"
                , blocknum = 100
                , fnrender = StuPay_Render
                , fnsuccess = () => {
                    $("#StuPay_WaitingDiv").hide();
                }
                , fnbegin = () => {
                    $("#StuPay_WaitingDiv").show();
                }
            );
        }
    }

    function StuPay_RenderButton(id, IsPassingDate, IsCreatedBy, IsCreatedDate, Code) {
        try {
            let buttons = [];
            buttons.push('<button class="buttonGrid" value="' + id + '" data-code="'+Code+'">'
                + '<i data-id="' + id + '" class="buttonPrintClass fas fa-print" aria-hidden="true"></i>'
                + '</button>');
            buttons.push('<button class="buttonGrid" value="' + id + '">'
                + '<i data-id="' + id + '" class="buttonEmailClass fas fa-envelope" aria-hidden="true"></i>'
                + '</button>');
            buttons.push('<button class="buttonGrid" value="' + id + '">'
                + '<i data-id="' + id + '" class="buttonSmsClass fas fa-sms" aria-hidden="true"></i>'
                + '</button>');
            if ((IsPassingDate == 1 || (IsCreatedBy == 1 && IsCreatedDate == 1))) {
                buttons.push('<button class="buttonGrid px-0" value="' + id + '">'
                    + '<i data-id="' + id + '" data-permission="1" class="buttonDeleteClass vtt-icon vttech-icon-delete" aria-hidden="true"></i>'
                    + '</button>');
            }

            return Render_Button_Grid(buttons);
        }
        catch (ex) {
            return '';
        }
    }
    //#endregion

    //#region // EVENT

    //#region //DELETE
    function StuPay_Delete(id, isPermission) {
        const promise = notiConfirm();
        promise.then(function () { StuPay_ExecuteDelete(id, isPermission); }, function () { });
    }

    function StuPay_ExecuteDelete(id, isPermission) {
        AjaxLoad(url = "/Student/General/Course/Payment/PaymentList?handler=DeleteItem"
            , data = {
                CurrentID: id
            }
            , async = false
            , error = null
            , success = function (result) {
                if (result == "1") {
                    $(`#stupay_tr${id}`).remove();
                    notiSuccess();
                }
                else if (result == "0") {
                    notiWarning("@Local["Bạn không có quyền xóa"]");
                }
                else {
                    notiError_SW();
                }
            });
    }
    //#endregion

    //#region //SMS
    function StuPay_SMS(ID) {
        if (ID && ID != 0) {
            $("#DetailModal_Content").html('');
            $("#DetailModal_Content").load("/Sms/SmsDetail?Type=" + "SMSContentAfterPaymentStudent" + "&PaymentStudentID=" + ID + "&ver=" + versionofWebApplication);
            $('#DetailModal').modal('show');
        }
    }
    //#endregion

    //#region //HANDLE EVENT

    function StuPay_HandleEvent() {
        $('#StuPay_dtContent tbody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).closest('tr').find('.StuPay_ID')[0].innerHTML);
            let IsPermission = Number($(this).attr('data-permission'));
            StuPay_Delete(ID, IsPermission);
        });
        $('#StuPay_dtContent tbody').on('click', '.buttonSmsClass', function () {
            let ID = Number($(this).closest('tr').find('.StuPay_ID')[0].innerHTML);
            StuPay_SMS(ID);
        })

        $('#StuPay_dtContent tbody').on('click', '.buttonPrintClass', function () {
            let ID = Number($(this).closest('tr').find('.StuPay_ID')[0].innerHTML);
            let Code = $(this).parent().attr('data-code') != undefined ? $(this).parent().attr('data-code') : '';
            syslog_stpaid('p',Code)
            $("#DetailModal_Content").html('');
            $("#DetailModal_Content").load('/Print/print?Type=invoice_student&DetailID=' + ID);
            $('#DetailModal').modal('show');
        })

        $('#StuPay_dtContent tbody').on('click', '.buttonEmailClass', function () {
            let ID = Number($(this).closest('tr').find('.StuPay_ID')[0].innerHTML);
            $("#MainSendMail_Content").empty();
            $("#MainSendMail_Content").load('/Student/Email/EmailTemplate?&ver=' + versionofWebApplication
                , function (responseTxt, statusTxt, xhr) {
                    if (statusTxt == "success") {
                        $("#MainSendMail").addClass('active');
                        if (typeof ETemp_SendMailStu === 'function')
                            ETemp_SendMailStu(type = 'ST_Email_AfterPayment', id = 0, masterid = ID);
                    }
                    if (statusTxt == "error") {

                    }
                })

        })
    }
        //#endregion

        //#endregion
</script>

