@page
@model MLunarCoffee.Pages.Student.Settings.Source.SourceListModel
@{
    Layout = null;
}
@Html.AntiForgeryToken()
<div class="container-fluid px-0" id="SSSourceList_DivContainer">
    <div class="row">
        <div class="col-12 px-0">
            <div class="card card-plain px-0">
                <div class="vtcardheader card-header pb-0 pt-2">
                    <div class="left">
                        <h6 class="mb-0">@Local["Danh sách nguồn học viên"]</h6>
                        <p class="text-sm mb-0">
                            @Local["Danh sách"]
                        </p>
                    </div>
                    <div class="right">
                        <button id="btnAddNewAbout" class="btn bg-gradient-primary btn-sm mt-1" data-tab="add_tab_about" data-value="fade up" onclick="return SSSourceList_AddNew()">@Local["Thêm mới"]</button>
                    </div>
                </div>
                <div class="card-body pt-2">
                    <div class="m-0 my-3 mobile-responsive">
                        <div id="SSSourceList_WattingDiv" class="waitingdiv text-center d-none">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <table id="SSSourceList_dtContent" class="table vt-table mb-0">
                            <thead class="hiddenCollapse">
                                <tr role="row">
                                    <th class="d-none">ID</th>
                                    <th>#</th>
                                    <th>@Local["Tên nguồn"]</th>
                                    <th>@Local["Ghi chú"]</th>
                                    <th style="min-width:160px">@Local["Người sửa"]</th>
                                    <th>@Local["Xóa"]</th>
                                </tr>
                            </thead>
                            <tbody id="SSSourceList_dtContentBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="SSSourceList_DivContainerDetail">
</div>
<script type="text/javascript">
    //#region //INIT
    let DataUser;
    $(document).ready(function () {
        SSSourceList_LoadData();
    });
    //#endregion

    //#region //LoadData
    function SSSourceList_LoadData() {
        Master_IndexDB_Reads(_Session_Data, [_Session_User]
            , function (data) {
                DataUser = data[0];
                AjaxLoad(url = "/Student/Settings/Source/SourceList/?handler=LoadData"
                    , data = {
                    }, async = true, error = null
                    , success = function (result) {
                        if (result != "0") {
                            let data = JSON.parse(result);
                            SSSourceList_RenderData(data, 'SSSourceList_dtContentBody');
                        } else {
                            notiError_SW();
                        }
                    }
                    , sender = null

                    , before = function (e) {
                        $("#SSSourceList_dtContent").hide();
                        $("#SSSourceList_WattingDiv").show();
                    }
                    , complete = function (e) {
                        $("#SSSourceList_dtContent").show();
                        $("#SSSourceList_WattingDiv").hide();
                    }
                );
            });
    }

    async function SSSourceList_RenderData(data, id) {
        return new Promise((resolve) => {
            let myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let obj = Fun_GetObject_ByID(DataUser, item.ModifiedBy);
                        let name = (obj != null) ? obj.Name : 'unknown';
                        let img = (obj != null) ? obj.Avatar : Master_Default_Pic;
                        let tr = `<td class="d-none SSSourceList_ID"> ${item.ID} </td>
                                  <td class="vt-number-order"></td>
                                  <td class="col col-md-5 mx-auto">
                                      <div class="mx-2">
                                           <a class="text-decoration-underline fw-bold buttonEditClass" href="#"> ${item.Name} </a>
                                      </div>
                                  </td>
                                  <td class="col col-md-5 mx-auto">
                                    <div class="ellipsis_three_line">
                                        <span class="content_line_clamp">${item.Note}</span>
                                    </div>
                                </td>
                                  <td class="col col-md-3">
                                      <div class="d-flex f-md-right">
                                          <div class="icon icon-shape icon-sm me-2 text-center" >
                                              <img class="avatar avatar-xs mt-2 " src="${img}" alt="label-image" onerror="Master_OnLoad_Error_Image(this)">
                                              </div>
                                              <div class="d-flex flex-column">
                                              <h6 class="text-dark text-sm mb-0"> ${name} </h6>
                                              <span class="text-xs"> ${formatDateToDMYHM(item.Modified)} </span>
                                          </div>
                                      </div>
                                  </td>
                                  <td> ${Render_Button_Grid(['<button class="buttonGrid" value="item.ID"><i class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></button>'])}
                                  </td>`;
                        stringContent = stringContent + `<tr class="vt-number" role="row"> ${tr} </tr>`;
                    }
                }
                document.getElementById(id).innerHTML = stringContent;
                SSSourceList_HandleEvent();
            }
            resolve();
        })
    }
    //#endregion

    //#region //Event - CRUD

    //#region LoadDetail
    function SSSourceList_OpenDetail() {
        $("#SSSourceList_DivContainerDetail").empty();
        $("#SSSourceList_DivContainer").hide();
        $("#SSSourceList_DivContainerDetail").html('');
    }

    function SSSourceList_Close() {
        $("#SSSourceList_DivContainerDetail").html('');
        $("#SSSourceList_DivContainer").show();
        $("#SSSourceList_DivContainerDetail").hide();
    }
    //#endregion

    //#region //Insert
    function SSSourceList_AddNew() {
        SSSourceList_OpenDetail();
        $("#SSSourceList_DivContainerDetail").load("/Student/Settings/Source/SourceDetail" + "?ver=" + versionofWebApplication);
        $('#SSSourceList_DivContainerDetail').show();
        return false;
    }
    //#endregion

    //#region //Edit
    function SSSourceList_Edit(ID) {
        SSSourceList_OpenDetail();
        $("#SSSourceList_DivContainerDetail").load("/Student/Settings/Source/SourceDetail?CurrentID=" + ID + "&ver=" + versionofWebApplication);
        $('#SSSourceList_DivContainerDetail').show();
        return false;
    }
    //#endregion

    //#region //Delete
    function SSSourceList_Delete(id) {
        const promise = notiConfirm();
        promise.then(function () { SSSourceList_ExecuteDelete(id); }, function () { });
    }

    function SSSourceList_ExecuteDelete(id) {
        AjaxLoad(url = "/Student/Settings/Source/SourceList/?handler=DeleteItem"
            , data = { CurrentID: id }, async = false, error = null
            , success = function (result) {
                if (result == "1") {
                    notiSuccess();
                    SSSourceList_LoadData();
                }
                else {
                    notiError_SW();
                }
            });
    }
    //#endregion

    //#region //Handle Event
    function SSSourceList_HandleEvent(){
        $('#SSSourceList_dtContent tbody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).closest('tr').find('.SSSourceList_ID')[0].innerHTML);
            SSSourceList_Edit(ID);
        });
        $('#SSSourceList_dtContent tbody').on('click', '.buttonDeleteClass', function () {
            let ID = Number($(this).closest('tr').find('.SSSourceList_ID')[0].innerHTML);
            SSSourceList_Delete(ID);
        });
    }
    //#endregion

    //#endregion

</script>
<script>js_require('/js/comon/initialize_setting.js');</script>
<script>js_require('/js/main.js');</script>