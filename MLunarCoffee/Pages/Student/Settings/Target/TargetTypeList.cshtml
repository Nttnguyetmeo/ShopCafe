@page
@model MLunarCoffee.Pages.Student.Settings.Target.TargetTypeListModel
@{
    Layout = null;
}
@Html.AntiForgeryToken()
<div class="row" id="TargetType_Main">
    <div class="col-12 px-0">
        <div class="card card-plain">
            <div class="vtcardheader card-header pb-0 pt-2">
                <div class="left">
                    <h6 class="mb-0 text-capitalize">@Local["Danh sách loại tiêu chí"]</h6>
                    <p class="text-sm mb-0">
                        @Local["Danh sách"]
                    </p>
                </div>
                <div class="right">
                    <button id="btn_addTargetType" class="btn bg-gradient-primary btn-sm mt-1" data-value="fade up" onclick="return TargetType_AddNew()">
                        @Local["Thêm mới"]
                    </button>
                </div>
            </div>
            <div class="card-body pt-2">
                <div class=" m-0 my-3 mobile-responsive">
                    <table id="dtContentTargetType" class="table vt-table mb-0">
                        <thead class="hiddenCollapse">
                            <tr role="row">
                                <th class="d-none">ID</th>
                                <th style="width:50px;">#</th>
                                <th class="col-5">@Local["Loại tiêu chí"]</th>
                                <th class="col-2">@Local["Mã"]</th>
                                <th class="col-2">@Local["Ghi chú"]</th>
                                <th class="col-2">@Local["Người sửa"]</th>
                                <th class="col-1" style="width: 40px;">@Local["Xóa"]</th>
                            </tr>
                        </thead>
                        <tbody id="dtContentTargetTypebody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="TargetType_Detail"></div>

<script>

    //#region // DECLARE & INIT

    let DataEmployee;

    $(document).ready(function() {
        Master_IndexDB_Reads(_Session_Data, [_Session_Employee]
            , function(data) {
                DataEmployee = data[0];
                TargetType_LoadList();
            });
        TargetType_Event();
    });

    //#endregion


    //#region // LOAD LIST

    function TargetType_LoadList() {
        AjaxLoad(url = "/Student/Settings/Target/TargetTypeList?handler=Loadata"
            , data = {}
            , async = true
            , error = null
            , success = function(result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    Target_TypeRenderList(data, "dtContentTargetTypebody");
                }
                else {
                    notiError_SW();
                }
            }
        );
    }

    //#endregion


    //#region // DELETE

    function TargetType_Delete(id) {
        const promise = notiConfirm();
        promise.then(function() { TargetType_DeleteExecute(id); }, function() { });
    }

    function TargetType_DeleteExecute(id) {
        if (id != null && !isNaN(id)) {
            AjaxLoad(url = "/Student/Settings/Target/TargetTypeList?handler=DeleteItem"
                , data = { 'id': id }
                , async = true
                , error = function() { notiError_SW(); }
                , success = function(result) {
                    if (result == "1") {
                        notiSuccess();
                        TargetType_LoadList();
                    } else {
                        notiError_SW();
                    }
                }
            );
        }
    }

    //#endregion


    //#region // RENDER

    async function Target_TypeRenderList(data, id) {
        new Promise((resolve) => {
            let myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if ((data && data.length) > 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let objModified = DataEmployee[item.ModifiedBy] != undefined ? DataEmployee[item.ModifiedBy] : '';
                        let tr = `<td class="d-none">${item.ID}</td>
                                    <td class="vt-number-order"></td>
                                    <td><a href="#" class="text-decoration-underline fw-bold buttonEditClass">${item.Name}</a></td>
                                    <td>${item.Code}</td>
                                    <td><span class="content_line_clamp">${item.Note}</span></td>
                                    <td>
                                        <div class="d-flex">
                                            <div class="icon icon-shape icon-sm me-2 text-center align-items-center">
                                                <img class="avatar avatar-xs mt-2" src="${objModified.Avatar != '' ? objModified.Avatar : Master_Default_Pic}" alt="label-image">
                                            </div>
                                            <div class="d-flex flex-column">
                                                <h6 class="mb-0 text-dark text-sm mb-0">${objModified.Name}</h6>
                                                <span class="text-xs">${ConvertDateTimeUTC_YMD(item.Modified)}</span>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="text-center"><i class="buttonDeleteClass vtt-icon vttech-icon-delete"></i></td>
                            `
                        stringContent += '<tr class="vt-number" role="row">' + tr + '</tr>';
                    }
                    myNode.innerHTML = stringContent;
                }
                TargetType_Event();
            }
        });
    }

    //#endregion


    //#region // EVENT

    function TargetType_Event() {
        $('#dtContentTargetTypebody .buttonEditClass').on('click', function() {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            TargetType_Edit(ID);
        });
        $('#dtContentTargetTypebody .buttonDeleteClass').on('click', function() {
            let ID = Number($(this).closest('tr')[0].childNodes[0].innerHTML);
            TargetType_Delete(ID);
        });
    }
    function TargetType_AddNew(){

        TargetType_OpenDetail();
        $("#TargetType_Detail").empty();
        $("#TargetType_Detail").load("/Student/Settings/Target/TargetTypeDetail" + "?ver=" + versionofWebApplication);
        return false;
    }
    function TargetType_Edit(ID) {
        TargetType_OpenDetail();
        $("#TargetType_Detail").empty();
        $("#TargetType_Detail").load("/Student/Settings/Target/TargetTypeDetail?CurrentID=" + ID + "&ver=" + versionofWebApplication);
        return false;
    }

    function TargetType_OpenDetail() {
        $("#TargetType_Main").hide();
        $("#TargetType_Detail").show();
    }
    function TargetType_CloseDetail() {
        $("#TargetType_Main").show();
        $("#TargetType_Detail").hide();
    }
    //#endregion


</script>
