@page
@model MLunarCoffee.Pages.Print.listform
@{
    if (@Model.layout == "none") Layout = null;
}
@Html.AntiForgeryToken()
<script>js_require_notasync('/js/ThirdParty/PrintAction.js');</script>
<script>js_require('/js/comon/initialize_setting.js');</script>
<script src="/assets/js/plugins/nouislider.min.js" type="text/javascript"></script>
<div class="row" id="ListFormDiv">
    <div id="lf_master" class="col-12 px-0">
        <div class="card card-plain mb-0" style="height: calc(100vh - 86px);">
            <div class="card-body pt-0 pb-2">
                <div class="row">
                    <div class="col-12 col-sm-12 col-md-4 col-xl-3 p-1 position-relative">
                        <div class="vtcardheader card-header px-1 py-3 pb-0">
                            <div class="left">
                                <h6 class="mb-0">@Local["Set form"]</h6>
                                <p class="text-sm mb-0">
                                    @Local["Danh sách nhóm"]
                                </p>
                            </div>
                        </div>

                        <div class="row p-0 m-0 mt-2">
                            <div id="lf_cbtype" class="ui fluid search selection dropdown form-control" onchange="event.preventDefault(); lf_listtypeFilter()">
                                <input type="hidden" />
                                <input class="search" autocomplete="off" tabindex="0" />
                                <div class="default text">eg .@Local["Nhóm"]</div>
                                <div id="lf_cbbtype" class="menu" tabindex="-1">
                                </div>
                            </div>
                            <div class="input-group flex-nowrap px-0 mx-0 my-2" id="lfsearchdiv">
                                <input id="lf_searchinput" type="text" class="form-control" placeholder="eg .@Local[" Tìm kiếm"]">
                                <div class="input-group-text">
                                    <i class="btn_clear fas fa-minus-circle opacity-1"></i>
                                </div>
                                <div class="input-group-text downloadfil cursor-pointer d-none" id="lf_btnFilDown">
                                    <span class="me-0 fw-bolder">
                                        <i class="fs-6 fas fa-download" onclick="lf_listtypeFilter(1)"></i>
                                    </span>
                                </div>
                                <div class="cursor-pointer input-group-text bg-gradient-success">
                                    <i class="fas fa-plus text-white" onclick="lf_NewForm()"></i>
                                </div>
                            </div>
                            <div class="nav-wrapper mt-2" style="--max-height:calc(100vh - 250px); --overflow-y: auto">
                                <ul class="nav nav-pills nav-menus nav-menus-vertical flex-column  bg-white border-radius-lg"
                                    id="lf_templatelist">
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-12 col-md-8 col-xl-9 p-1">
                        <div id="lf_WaitingDiv" class="position-absolute top-6 start-50 translate-middle-x waitingdiv text-center" style="display: none;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div class="d-none border-dashed border-1 border-secondary border-radius-md m-3 p-3" id="lf_templatearea">
                            <div class="d-lg-flex">
                                <div class="mt-3 col-auto my-auto">
                                    <div class="sliderArea d-flex">
                                        <div id="lf_sliderDouble" style="margin-right: 15px; width: 200px; "></div>
                                        <div id="lf_sliderNum" style="margin-top: -13px;">100%</div>
                                    </div>
                                </div>
                                <div class="ms-auto my-auto mt-1">
                                    <span class="text-sm text-dark mb-0 ms-2">
                                        <span>@Local["Kích thước"]</span>
                                        <span id="lf_dimenstion" class="fw-bold ms-2"></span>
                                    </span>
                                    <span class="text-sm text-dark mb-0 ms-2">
                                        <span>@Local["Loại"]</span>
                                        <span id="lf_type" class="fw-bold ms-2"></span>
                                    </span>
                                    <div class="d-block">
                                        <p class="text-sm mb-0 ms-2">
                                            <span id="lf_command" class="text-success fw-bold"></span>
                                            <span id="lf_disabled" class="ms-2 fw-bold text-dark text-sm d-none"></span>
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div class="w-100 my-1">
                                <div class="fs-4 text-center mt-2">
                                    <span id="lf_name" class="fw-bold text-primary ms-2"></span>

                                </div>
                                <div class="text-sm text-center mb-2">
                                    <span id="lf_des"></span>
                                </div>
                            </div>
                            <div class="overflow-y overflow-x" style="overflow-y: auto; overflow-x: auto; ">
                                <div class="p-2 pb-3 w-100" style=" height: calc(100vh - 336px); min-width: 900px;">
                                    <div id="lf_templatedetail" style="" class="p-2 h-100 min-vh-50">
                                    </div>
                                </div>
                            </div>

                            <div class="card-footer pb-0 pe-0 pt-2 fixed-botombutton ">
                                <div class="action_Save">
                                    <div class="action_Save-Content">
                                        <button id="lf_btnImport" class="btn bg-gradient-primary btn-sm p-2 px-3 text-xs d-none" onclick="lf_Import()">@Local["Tải xuống"]</button>
                                        <div id="lf_MainAction">
                                            <button class="btn btn-dark btn-sm p-2 px-3 text-xs" onclick="lf_Clone()">@Local["Sao chép"]</button>
                                            <button class="btn btn-dark btn-sm p-2 px-3 text-xs" onclick="lf_Edit()">@Local["Chỉnh sửa"]</button>
                                            <button id="lf_btndis" class="btn btn-warning p-2 px-3 text-xs d-none" onclick="lf_ChangeStatus(1)">@Local["Vô hiệu"]</button>
                                            <button id="lf_btnenable" class="btn btn-sm p-2 px-3 text-xs bg-gradient-success d-none" onclick="lf_ChangeStatus(0)">@Local["Bỏ vô hiệu"]</button>

                                            <button id="lf_btnDelete" class="btn bg-gradient-danger btn-sm p-2 px-3 text-xs" onclick="lf_Delete()">@Local["Xóa"]</button>

                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="lf_detail" class="col-12">
    </div>
</div>
<script type="text/javascript">
    var lf_listform = [], lf_datatype = [];
    var lf_currenttem = 0;
    var lf_currenttype = 0;
    var data_Timerlf;
    var lf_CurrentFrom = {};
    var lf_dataImpType = [], lf_dataImpComand = [], lf_dataImpList = [], lf_dataObjImpList = {};
    var lf_isDown = 0;
    var lf_minify = "@Model._Minify";

    var lf_objCurrImp = {};
    $(document).ready(function () {
        if (lf_minify) {
            $('#lf_btnFilDown').removeClass('d-none');
        }
        else {
            $('#lf_btnFilDown').addClass('d-none');
        }
        lf_GetList();
        var slider = document.getElementById('lf_sliderDouble');
        noUiSlider.create(slider, {
            start: [100],
            connect: true,
            step: 10,

            range: {
                'min': 10,
                'max': 200
            }
        });
        slider.noUiSlider.on('change', function (e) {
            var slider = document.getElementById('lf_templatedetail');
            slider.style.zoom = Number(e).toFixed() + "%";
            $('#lf_sliderNum').html(Number(e).toFixed() + "%")
        });
    });
    function lf_GetList (currentid = 0) {
        AjaxLoad(url = "/Print/listform/?handler=GetTemplate"
            , data = { id: currentid }
            , async = true
            , error = function () {notiError_SW();}
            , success = function (result) {
                if (result != "") {
                    let data = JSON.parse(result);
                    if (currentid == 0) {
                        if (data && data.length > 0) {
                            $("#lf_templatelist").empty();
                            lf_listform = [...data];
                            if (lf_currenttype != 0) {
                                let dataFilter = data.filter(word => {
                                    return (word["Type"] == lf_currenttype);
                                });
                                if (dataFilter != undefined) {
                                    lf_Render(dataFilter, "lf_templatelist");

                                }
                            }
                            else lf_Render(data, "lf_templatelist");
                        }
                    }
                    else {
                        let ele = $(`#lf_row${currentid}`);
                        if (data && data.length != 0) {
                            lf_listform = lf_listform.reduce((pre, arr) => {
                                if (arr.ID == data[0].ID) arr = data[0];
                                pre.push(arr);
                                return pre;
                            }, []);
                            if (ele.length > 0) {
                                ele.replaceWith(lf_RenderEach(data[0]));

                            }
                            else {

                                let index = (Object.keys(lf_dataObjImpList[item.Code] ?? {})).length > 0;
                                if (index > 0) {
                                    let eleImp = $(`.lf_clsRow[data-code="${data[0].Code}"]`);
                                    if (eleImp.length > 0) {
                                        eleImp.replaceWith(lf_RenderEach(data[0]));
                                    }
                                }
                                else {
                                    let tr = lf_RenderEach(data[0]);
                                    let eleType = $(`#lf_rowType${data[0].Type}`);
                                    if (eleType.length > 0) {
                                        $(tr).insertAfter(eleType); debugger
                                    }
                                }
                            }
                            lf_Event();
                            $("#lf_templatelist").find(`a[data-id='${currentid}']`).trigger('shown.bs.tab');
                        }
                        else {
                            lf_listform = lf_listform.filter(word => {
                                return word.ID != currentid
                            })
                            let code = $(`#itemprint_${currentid}`).attr("data-code");
                            let index = (Object.keys(lf_dataObjImpList[item.Code] ?? {})).length > 0;
                            if (index > 0) {
                                $(`#lf_row${currentid}`).find('.lf_clstemp').removeClass('active');
                                $("#lf_templatelist").find(`a[data-id='${currentid}']`).trigger('shown.bs.tab');
                            }
                            else {
                                ele?.remove();
                                $('#lf_templatelist a.detail:first').trigger('shown.bs.tab');
                            }
                        }
                    }

                    if ($('#lf_templatelist').children().length > 0) {
                        $("#lf_templatearea").removeClass('d-none');
                    }
                    else {
                        $("#lf_templatearea").addClass('d-none');
                    }
                }
            }
            , sender = null
            , before = function (e) {
                $("#lf_WaitingDiv").show();
            }
            , complete = function (e) {
                $("#lf_WaitingDiv").hide();
            }
        );
    }


    async function lf_Render (data, id) {
        new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                if (data && data.length > 0) {
                    let type = -1;
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let tr = '';
                        if (type != item.Type) {
                            type = item.Type;
                            tr = lf_RenderType(item);
                        }
                        tr += lf_RenderEach(item);
                        myNode.insertAdjacentHTML('beforeend', tr);
                    }
                }
            }
            resolve();
            lf_Event();
            lf_GetType();
        })
    }

    function lf_RenderType(item) {
        let result = '';
        if (item && Object.keys(item).length > 0) {
            result =`
                <li id="lf_rowType${item.Type}" class="nav-item" role="presentation">
                    <a class="text-sm ps-2 item-menu nav-link cursor-pointer bg-gray-200 " data-hover="" data-bs-toggle="tab">
                        <div class="text-bolder text-lowercase">
                            <span class="text-primary text-capitalize">${item.TypeName}</span>
                        </div>
                    </a>
                    <hr class="horizontal dark my-0 opacity-2">
                </li>`;

        }

        return result;
    }

    function lf_RenderEach(item) {
        let result = '';
        if (item && Object.keys(item).length > 0) {
            let disabled = ''; let ispaging = ''; let istemp = '';
            if (item.IsDisabled == 1) disabled = '<span class="ms-2 text-sm text-danger">disabled</span>';
            if (item.IsPaging == 1) ispaging = '<span class="ms-2 text-sm fw-bold text-info">P</span>';
            let isDown = !lf_minify || (Object.keys(lf_dataObjImpList[item.Code] ?? {}).length > 0 || item.Code == "") ? 1 : 0;
            istemp = item.Code != "" && isDown && lf_minify ? `<span class="me-1 text-sm fw-bold lf_clstemp ${isDown ? 'active' : ''}"><i class="fas fa-download"></i> ${item.Code}</span>` : '';
            result =`
                <li id="lf_row${item.ID}" class="nav-item lf_clsRow"  data-code="${item?.Code ?? ""}" role="presentation">
                    <a id="itemprint_${item.ID}" data-id="${item.ID}" data-code="${item?.Code ?? ""}"" class="detail text-sm px-1 item-menu  nav-link cursor-pointer " data-hover data-bs-toggle="tab">
                        <div class="px-1">
                            <div class="d-inline ">
                                <span class="mt-0 cursor-pointer col-auto my-auto mb-0 text-dark ms-0 text-sm fw-bold">
                                    ${istemp + item.Name + ispaging}
                                </span>
                                <span class="ps-1 text-sm text-dark">
                                    ${disabled}
                                </span>
                            </div>
                        </div>
                    </a>
                    <hr class="horizontal dark my-1">
                </li>`
                ;
        }

        return result;
    }
    function lf_Event () {
        $('#lf_templatelist .detail').on('shown.bs.tab', function (e) {
            $('#lf_templatelist .detail').removeClass('active');
            $(this).addClass('active');
            lf_currenttem = Number($(this).attr("data-id"));
            let isDown = lf_listform.findIndex(e => e.ID == lf_currenttem) > -1;
            if (isDown == 0 && lf_minify) {
                $('#lf_btnImport').removeClass("d-none");
                $('#lf_MainAction').addClass("d-none");
            }
            else {
                $('#lf_btnImport').addClass("d-none");
                $('#lf_MainAction').removeClass("d-none");
            }
            lf_DetailView(lf_currenttem, isDown);
        });
        $('#lf_searchinput').keyup(function () {
            if ($(this).val().length > 0) $(".btn_clear").removeClass('opacity-1');
            else $("#lfsearchdiv .btn_clear").addClass('opacity-1');

            clearTimeout(data_Timerlf);
            data_Timerlf = setTimeout(function (e) {
                lf_listtypeFilter();
            }, 500);
        });
        $("#lfsearchdiv").on('click', '.btn_clear', function (e) {
            $('#lf_searchinput').val('');
            $("#lfsearchdiv .btn_clear").addClass('opacity-1');
            lf_listtypeFilter();

        });
    }
    function lf_DetailView(id, isDown) {
        $('#lf_name').html('');
        $('#lf_type').html('');
        $('#lf_disabled').html('');
        $('#lf_des').html('');
        $('#lf_command').html('');
        $('#lf_dimenstion').html('');
        $('#lf_templatedetail').html('');
        $('#lf_btndis').addClass('d-none');
        $('#lf_btnenable').addClass('d-none');
        if (isDown == 1) {
            AjaxLoad(url = "/Print/listform/?handler=GetDetail"
                , data = { 'id': id }
                , async = true
                , error = function () { notiError_SW(); }
                , success = function (result) {
                    if (result != "") {
                        let data = JSON.parse(result);
                        if (data != undefined && data.length == 1) {
                            let item = data[0];
                            lf_renderDetail(item);
                        }
                    }
                }
            );
        }
        else {
            let code = $(`#itemprint_${id}`).attr("data-code");
            pra_getItem(
                code
                , beforefunc = function (e) {
                    $("#lf_WaitingDiv").show();
                }
                , successfunc = function (_rr) {
                    if (_rr != "0" && _rr != "") {
                        let data = JSON.parse(_rr);
                        lf_objCurrImp = data[0] ?? {};
                        lf_renderDetail(data[0]);
                    }
                }
                , failurefunc = function () {
                    resolve([])
                    notiError_SW();
                }
                , completefunc = function (e) {
                    $("#lf_WaitingDiv").hide();
                }
            );
        }
    }

    function lf_renderDetail(item) {
        if (item && Object.keys(item).length > 0) {
            lf_CurrentFrom = JSON.parse(item.Form);

            lf_Draw(lf_CurrentFrom, 'lf_templatedetail');
            if (item.Watermark != '') {
                $('#lf_templatedetail').attr('style', `background:url('${item.Watermark}') no-repeat center !important ;`);
            }
            else {
                $('#lf_templatedetail').attr('style', `background-image:none !important ;`);

            }
            $('#lf_name').html(item.Name);
            $('#lf_type').html(item.TypeName);
            if (item.IsDisabled == 1) {
                $('#lf_disabled').html('disabled');
                $('#lf_btnenable').removeClass('d-none');
            }
            else {
                $('#lf_disabled').html('active');
                $('#lf_btndis').removeClass('d-none');
            }
            if (item.Dimension == 1) $('#lf_dimenstion').html('H: ' + item.Widthmm + 'mm x ' + 'W: ' + item.Heightmm + 'mm');
            else $('#lf_dimenstion').html('unset');
            $('#lf_des').html(item.Desciption);
            $('#lf_command').html(item.Command);
        }
    }

    async function lf_Draw (data, id) {
        return new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                fn_RenderForm(myNode, data, isholder = true);
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl)
                })
            }
        });
    }
    function lf_NewForm () {
        $('#lf_master').hide();
        $("#lf_detail").load('/Print/setform?Detail=0' + "&ver=" + versionofWebApplication);
        $('#lf_detail').show();
    }
    function lf_Edit () {
        $('#lf_templatedetail').empty();
        $('#lf_master').hide();
        $("#lf_detail").load("/Print/setform?Detail=" + lf_currenttem + "&ver=" + versionofWebApplication);
        $('#lf_detail').show();
    }
    function lf_Clone () {
        AjaxLoad(url = "/Print/listform/?handler=Clone"
            , data = {'id': lf_currenttem}
            , async = true
            , error = function () {notiError_SW();}
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    lf_GetList(result);
                }
            }
        );
    }
    function lf_ChangeStatus (status) {
        AjaxLoad(url = "/Print/listform/?handler=ChangeState"
            , data = {'id': lf_currenttem, 'status': status}
            , async = true
            , error = function () {notiError_SW();}
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    lf_GetList(lf_currenttem);

                }
            }
        );
    }
    function lf_Delete () {
        const promise = notiConfirm();
        promise.then(function () {lf_DeleteExe();}, function () { });
    }
    function lf_DeleteExe () {
        AjaxLoad(url = "/Print/listform/?handler=Delete"
            , data = {'id': lf_currenttem}
            , async = true
            , error = function () {notiError_SW();}
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    lf_GetList(result);
                }
            }
        );
    }
    function lf_Cancel () {
        $('#lf_master').show();
        $('#lf_detail').empty();
        $('#lf_detail').hide();
        lf_Draw(lf_CurrentFrom, 'lf_templatedetail');
    }
    function lf_Save (id) {
        lf_currenttem = id;
        lf_Cancel();
        lf_GetList(id);
    }
    //#region // Type event
    function lf_GetType () {
        AjaxLoad(url = "/Print/listform/?handler=GetType"
            , data = {}, async = true, error = null
            , success = function (result) {
                let data = JSON.parse(result);
                let Range = data.filter(
                    value => lf_listform.filter(valuelist => value.ID == valuelist.Type).length >= 1
                )
                lf_datatype = (Range && Range.length > 0) ? [...Range] : [...data];
                if (lf_minify == 1) {
                    if (lf_dataImpType.length == 0)
                    lf_importData();
                }
                else {
                    if (Range && Range.length > 0) Load_Combo(Range, "lf_cbbtype", true,"@Local["Tất cả"]");
                    else Load_Combo(data, "lf_cbbtype", true,"@Local["Tất cả"]");
                    $("#lf_cbtype").dropdown("refresh");
                    $("#lf_cbtype").dropdown("set selected", "0");
                }

            });
    }

    async function lf_listtypeFilter (isDown = 0) {
        new Promise((resolve, reject) => {
            setTimeout(
                () => {
                    let dataFilter = [...lf_listform];
                    let textsearch = xoa_dau($('#lf_searchinput').val().trim());
                    lf_currenttype = Number($('#lf_cbtype').dropdown('get value') ? Number($('#lf_cbtype').dropdown('get value')) : "0");
                    if (lf_currenttype != 0) {
                        dataFilter = dataFilter.filter(word => {
                            return (word["Type"] == lf_currenttype);
                        });
                    }

                    if (textsearch != "") {
                        dataFilter = dataFilter.filter(word => {
                            return (xoa_dau(word["Name"].toLowerCase()).includes(textsearch));
                        });
                    }

                    if (isDown == 1) {
                        lf_isDown = lf_isDown ? 0 : 1;
                        dataFilter = dataFilter.filter(word => {
                            return lf_isDown == 0 || (Object.keys(lf_dataObjImpList[word["Code"]] ?? {})).length > 0;
                        });
                        if (lf_isDown == 1) {
                            $('#lf_btnFilDown').addClass('bg-gray-200');
                        }
                        else {
                            $('#lf_btnFilDown').removeClass('bg-gray-200');
                        }
                    }

                    $("#lf_templatelist").empty();
                    lf_Render(dataFilter, "lf_templatelist");
                    $('#lf_templatelist a.detail:first').trigger('shown.bs.tab');
                    $('#lf_templatelist a.detail:first').tab('show');

                    resolve()
                }
            )
        })
    }

    //#endregion

    //#region //Import Data
    async function lf_importData() {
        return new Promise(resolve => {
            let promises = [];
            promises.push(lf_impGetType(), lf_impGetComand(), lf_impGetList());

            Promise.all(promises).then(
                results => {

                   lf_dataImpType = results[0];
                   lf_dataImpComand = results[1];
                   lf_dataImpList = results[2];
                   lf_dataObjImpList = results[2].reduce((pre, arr) => { if (arr.Code) pre[arr.Code] = arr; return pre } , {})
                   let ids = new Set(lf_datatype.map(d => d.Type));
                   let merged = [...lf_datatype, ...lf_dataImpType.filter(d => !ids.has(d.Type))];
                   Load_Combo(merged, "lf_cbbtype", true,"@Local["Tất cả"]");
                   $("#lf_cbtype").dropdown("refresh");
                   $("#lf_cbtype").dropdown("set selected", "0");
                   //lf_ChangeType();
                   lf_impRender(lf_dataImpList);

               }

            )
            resolve();

        })
    }

    async function lf_impRender(data) {
        new Promise(resolve => {
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    let ele = $(`.lf_clsRow[data-code="${item.Code}"]`);
                    if (ele.length > 0) {
                        ele.find('.lf_clstemp').addClass('active')
                    }
                    else {

                        let tr = lf_RenderEach(item);
                        let eleType = $(`#lf_rowType${item.Type}`);
                        if (eleType.length > 0) {
                            $(tr).insertAfter(eleType);
                        }
                        else {
                            let trType = lf_RenderType(item);
                            trType += tr; debugger
                            document.getElementById("lf_templatelist").insertAdjacentHTML('afterbegin', trType);
                        }

                        $(`.lf_clsRow[data-code="${item.Code}"]`).find('.lf_clstemp').removeClass('active');
                    }

                }
                lf_Event();
            }
            resolve();
        })
    }

    async function lf_impGetType() {
        return new Promise(resolve => {
            pra_getTypeList(
                beforefunc = null
                , successfunc = function (_rr) {
                    if (_rr != "0" && _rr != "") {
                        let data = JSON.parse(_rr);
                        resolve(data);
                    }
                }
                , failurefunc = function () {
                    resolve([])

                }
                , completefunc = null
            );

        })
    }

    async function lf_impGetComand() {
        return new Promise(resolve => {
            pra_getComandList(
                beforefunc = null
                , successfunc = function (_rr) {
                    if (_rr != "0" && _rr != "") {
                        let data = JSON.parse(_rr);
                        resolve(data);
                    }
                }
                , failurefunc = function () {
                    resolve([])

                }
                , completefunc = null
            );

        })
    }

    async function lf_impGetList() {
        return new Promise(resolve => {
            pra_getList(
                beforefunc = null
                , successfunc = function (_rr) {
                    if (_rr != "0" && _rr != "") {
                        let data = JSON.parse(_rr);
                        resolve(data);
                    }
                }
                , failurefunc = function () {
                    resolve([])
                }
                , completefunc = null
            );

        })
    }

    function lf_Import() {
        let code = $(`#itemprint_${lf_currenttem}`).attr("data-code");
        if (code != "") {
            const promise = notiConfirm();
            promise.then(function () {

                if (code == lf_objCurrImp.Code) {
                    let indexType = lf_dataImpType.findIndex(e => e.Type == lf_objCurrImp.TypeName)
                    let objType = lf_dataImpType[indexType];

                    let indexCommand = lf_dataImpComand.findIndex(e => e.CommandExecuted == lf_objCurrImp.CommandExecuted)
                    let objCommand = lf_dataImpComand[indexCommand];
                    let datadown = {
                        form: lf_objCurrImp.Form,
                        code: lf_objCurrImp.Code,
                        name: lf_objCurrImp.Name,
                        type: lf_objCurrImp.Type,
                        typeName: objType.Type,
                        typeDesc: objType.Description,
                        typeNumForm: objType.NumberForm,
                        width: lf_objCurrImp.Widthmm,
                        height: lf_objCurrImp.Heightmm,
                        note: lf_objCurrImp.Desciption,
                        watermark: lf_objCurrImp.Watermark,
                        commandID: lf_objCurrImp.CommandID,
                        command: objCommand?.Command ?? "",
                        commandExecuted: objCommand?.CommandExecuted ?? "",
                        commandDesc: objCommand?.CommandDescription ?? "",
                        dimesion: lf_objCurrImp.Dimension,
                        paging: lf_objCurrImp.IsPaging,
                        stogesign: lf_objCurrImp.StogeSign,
                        exchangeRate: lf_objCurrImp.IsEnterExchangeRate,
                    }
                    lf_ExcutedSaveImport(datadown);
                }

            }, function () { });
        }

    }


    function lf_ExcutedSaveImport(datadown) {
        if (datadown && Object.keys(datadown).length > 0) {
            AjaxLoad(url = "/Print/listform/?handler=Import"
                , data = {
                    'data': JSON.stringify(datadown)
                }
                , async = true, error = null
                , success = function (_r) {
                    if (_r != "0") {
                        let currID = !isNaN(Number(_r)) ? Number(_r) : 0;
                        lf_GetList(currID)
                        notiSuccess();

                    }
                    else notiError_SW();
                }
            );
        }

    }
    //#endregion
</script>

<style>


    #lf_templatedetail div:not([class='form-check']):not([type='radio']), #lf_templatedetail label, #lf_templatedetail img, #lf_templatedetail input:not([type='checkbox']):not([type='radio']), #lf_templatedetail thead {
        cursor: pointer;
    }

    #lf_templatedetail input:not([type='checkbox']):not([type='radio']) {
        min-height: 20px;
    }

    #lf_templatedetail table i {
        display: none;
    }

    #lf_templatedetail .repeatclass {
        display: none;
    }

    .noUi-handle.noUi-handle-lower {
        background-image: linear-gradient(310deg,#7928ca,#ff0080);
    }

    .sliderArea {
        height: 20px;
    }

    @@media print {
        .pagebreak {
            page-break-before: always;
        }
    }

    .pagebreak {
        height: 1px;
        margin-top: 5px;
        margin-bottom: 5px;
        border: 1px solid red;
        border-style: dotted;
    }

    .lf_clstemp {
        color: #8392AB;
    }

        .lf_clstemp.active {
            color: rgb(var(--bs-primary)) !important;
        }
</style>
