@page
@model MLunarCoffee.Pages.Card.Status.CardList_EditModel
@{
    Layout = null;
}
<div class="container-fluid px-0" id="CLE_DivCardDetail">
    <div class="row">
        <div class="col-12">
            <div class="card mb-3">
                <div class="card-header p-3 pb-0">
                    <div class="d-lg-flex">
                        <div class="w-50 col-auto my-auto">
                            <div class="h-100">
                                <h6 class="mb-0">@Local["Chỉnh sửa thẻ"]</h6>
                                <p class="text-sm mb-0">@Local["Chi tiết chỉnh sửa thẻ"]</p>
                            </div>
                        </div>
                        <div class="ms-auto my-auto">
                            <div class="dropdown dropdown-small dropdown-categories me-3 dropdown-hover" data-turbolinks="false">
                                <a href="#" data-turbolinks="false" data-toggle="dropdown">
                                    <i class="text-lg  m-2 fas fa-info-circle" aria-hidden="true"></i>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end pt-2 pb-0 px-2 ms-n4 col-w-300">
                                    <li class="mb-2">
                                        <div class="d-flex py-1">
                                            <div class="justify-content-center text-dark">
                                                <p class="text-sm my-0 py-0">- @Local["Số ngày tối đa không được nhỏ hơn 0"]</p>
                                                <p class="text-sm my-0 py-0">- @Local["Số lần tối đa không được nhiều hơn tổng số lần sử dụng"]</p>
                                                <p class="text-sm my-0 py-0">- @Local["Tổng tiền sử dụng không được nhỏ hơn tiền đã sử dụng"]</p>
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-3 pt-2">
                        <div class="row px-1 form3">
                            <div class="field col-12 col-md-7 p-1">
                                <div class="row px-3">
                                    <div class="field col-12 px-1 mt-2 d-flex">
                                        <p class="text-sm fw-bold text-dark mb-2">@Local["Mã thẻ"]: </p>&nbsp;<p class="mb-2 text-sm text-nowrap font-weight-bold text-primary" id="CLE_CardCode"></p>
                                    </div>
                                    <div class="field col-12 col-xl-6 px-1 mt-2">
                                        <label>
                                            <span>@Local["Tối đa số ngày sử dụng"]</span>
                                            <span id="CLD_DateExpired"></span>
                                        </label>
                                        <div class="input-group">
                                            <div class="input-group-text ps-2 cursor-pointer">
                                                <div class="form-check mb-0 me-0 ms-1">
                                                    <input id="CLE_CheckboxEndLess" class="form-check-input" type="checkbox" onchange="event.preventDefault(); return CardEdit_OnchangeEndLess();">
                                                </div>
                                            </div>
                                            <input id="CLE_EndLess" type="number" class="form-control ps-2" placeholder="@Local["Ngày kết thúc"]" min="1" onchange="event.preventDefault(); return CardEdit_OnchangeEndLess();">
                                        </div>
                                    </div>
                                    <div class="field col-12 col-xl-6 px-1 mt-2">
                                        <label>@Local["Tối đa số lần sử dụng"]</label>
                                        <div class="input-group">
                                            <div class="input-group-text ps-2 cursor-pointer">
                                                <div class="form-check mb-0 me-0 ms-1">
                                                    <input id="CLE_CheckboxTimesUsed" class="form-check-input" type="checkbox" onchange="event.preventDefault(); return CardEdit_OnchangeTimesUsed();">
                                                </div>
                                            </div>
                                            <input id="CLE_TimesUsed" type="number" class="form-control ps-2" placeholder="@Local["Lần sử dụng"]" min="1">
                                        </div>
                                    </div>
                                </div>
                                <div class="row px-3">
                                    <div class="col-12 px-1 mt-2">

                                        <div class="field">
                                            <label>@Local["Giá trị sử dụng thẻ"]</label>
                                            <div class="input-group flex-nowrap">
                                                <input id="CLE_PriceUsedInfo" class="form-control" type="text" placeholder="@Local["Giá trị"]" onkeyup="event.preventDefault(); return CardEdit_OnchangePriceUse();">
                                                <div class="input-group-text CLE_PlusPrice">
                                                    <div class="position-relative cursor-pointer" title="@Local["Tăng giá trị sử dụng"]" data-bs-toggle="tooltip">
                                                        <i class="text-success fas fa-plus"></i>
                                                    </div>
                                                </div>
                                                <div class="input-group-text CLE_ElimiPrice" style="border-right: 1px solid #e6e6e6 !important;">
                                                    <div class="position-relative cursor-pointer" title="@Local["Giảm giá trị sử dụng"]" data-bs-toggle="tooltip">
                                                        <i class="fa fa-minus text-danger"></i>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                <div class="row px-3">
                                    <div class="field col-12 px-1 mt-2">
                                        <label>@Local["Ghi chú"]</label>
                                        <textarea id="CLE_Note" class="form-control" type="text" rows="2" />
                                    </div>
                                </div>
                            </div>
                            <div class="field col-12 col-md-5 p-1 pt-4">
                                <div class="border-0 p-3 bg-gray-100 border-radius-lg h-100">
                                    <p class="font-weight-bolder text-lg mb-0 text-center text-md text-nowrap">@Local["Tình trạng thẻ"]</p>

                                    <div class="d-flex justify-content-between">
                                        <span class="mt-1 text-sm">@Local["Tổng tiền"]:</span>
                                        <span id="CLE_PriceUsed" class="text-dark font-weight-bold ms-4">0</span>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span class="mt-1 text-sm">@Local["Tiền đã sử dụng"]:</span>
                                        <span id="CLE_AmountUsed" class="text-dark font-weight-bold ms-4">0</span>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span class="mt-1 text-sm">@Local["Còn lại"]:</span>
                                        <span id="CLE_PriceUsedLeff" class="text-dark font-weight-bold ms-4">0</span>
                                    </div>
                                    <hr class="horizontal dark my-2">
                                    <div class="d-flex justify-content-between">
                                        <span class="mt-1 text-sm">@Local["Số lượng"]:</span>
                                        <span id="CLE_Quantity" class="text-dark font-weight-bold ms-4">0</span>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span class="mt-1 text-sm">@Local["Hạn sử dụng thẻ"]:</span>
                                        <span id="CLE_DateCreate" class="badge bg-gradient-danger">-</span>
                                        <span id="CLE_Arrorw" class="text-dark"><i class="fas fa-long-arrow-alt-right"></i></span>
                                        <span id="CLE_DateExpired" class="badge bg-gradient-danger">-</span>
                                    </div>
                                    <p class="font-weight-bolder text-lg mb-0 text-center text-md text-nowrap">@Local["Dịch vụ sử dụng"]</p>
                                    <div class="d-flex justify-content-between">
                                        <span class="mt-1 text-sm">@Local["Tổng dịch vụ"]:</span>
                                        <span id="CLE_Service" class="text-dark font-weight-bold ms-4">0</span>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span class="mt-1 text-sm">@Local["Tổng tiền đã sử dụng"]:</span>
                                        <span id="CLE_UsedAmount" class="text-dark font-weight-bold ms-4">0</span>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span class="mt-1 text-sm">@Local["Tổng tiền hoàn"]:</span>
                                        <span id="CLE_CBAmount" class="text-dark font-weight-bold ms-4">0</span>
                                    </div>
                                </div>
                            </div>
                            <hr class="horizontal dark my-2 mt-4">
                            <div class="col-12 col-md-12 p-1 pt-2 row ms-1">
                                <div class="field col-12 col-md-7 col-xl-7 p-2 ps-md-2 d-flex">
                                    <input id="CLE_Date" class="flatpickr form-control w-md-50" type="text" placeholder="eg .@Local["Ngày"]" title="@Local["Giới hạn 31 ngày"]" onchange="event.preventDefault(); CardEdit_LoadData();" />
                                </div>
                                <div class="col-12 p-1 pt-2">
                                    <div class="m-0 my-3 mobile-responsive position-relative px-1">
                                        <div id="CLE_Waiting" class="position-absolute top-0 start-50 translate-middle-x waitingdiv text-center" style="display: none;">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="sr-only">Loading...</span>
                                            </div>
                                        </div>
                                        <table id="CLE_ServiceUsed" class="table vt-table mb-0">
                                            <thead class="hiddenCollapse">
                                                <tr role="row">
                                                    <th>#</th>
                                                    <th>@Local["Dịch vụ"]</th>
                                                    <th>@Local["Ngày sử dụng"]</th>
                                                    <th>@Local["Tiền sử dụng"]</th>
                                                    <th>% @Local["Hoàn tiền"]</th>
                                                    <th>@Local["Tiền hoàn"]</th>
                                                </tr>
                                            </thead>
                                            <tbody id="CLE_ServiceUsedBody">
                                            </tbody>
                                        </table>
                                    </div>
                                    <button id="btnLoadMove" class="btnsysmore btn btn-secondary w-100 p-1" onclick="CLE_RenderMore()">
                                        @Local["Xem thêm"]
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="fixed-botombutton">
                    <div class="action_Save">
                        <div class="text-danger text-gradient text-sm font-weight-bold" id="textShowMessage"></div>
                        <div class="action_Save-Content">
                            <button class="btn btn-secondary" form="form3" onclick="event.preventDefault();CloseModal()">
                                @Local["Đóng"]
                            </button>
                            <button form="form3" type="button" id="CLE_ExecutedEdit" class="btn bg-gradient-primary mt-2 me-2" onclick="event.preventDefault();return CardEdit_Execute()">
                                @Local["Lưu"]
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="CLE_DivEditPrice" class="d-none position-fixed start-0 top-0 w-100 h-100">
    <form id="CLE_FormPriceCard" class="position-relative w-100 h-100 form3">
        <div id="" class="translate-middle top-20 position-absolute shadow-lg rounded-3 max-width-500 start-50 bg-white p-3 w-80">
            <div class="card-header p-3 pb-0">
                <h6 class="mb-0 font-weight-bold mb-0">@Local["Cộng/trừ giá trị sử dụng"]</h6>
            </div>
            <div class="card-body pt-2">
                <div class="row px-2">
                    <div class="field col-12 p-1">
                        <label id="CLE_NameEditPrice">@Local["Giá tiền"]</label>
                        <input id="CLE_PriceEdit" name="basicsalary" class="form-control" type="text">
                    </div>
                    <div class="field col-12 p-1">
                        <label>@Local["Lý do"]</label>
                        <div class="ui fluid search selection dropdown form-control" id="CLE_ReasonEdit">
                            <input type="hidden" name="branch" />
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text">@Local["Lý do"]</div>
                            <div id="CLE_CbbReasonEdit" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="action_Save">
                <div class="text-danger text-gradient text-sm font-weight-bold"></div>
                <div class="action_Save-Content">
                    <button class="btn btn-secondary" onclick="event.preventDefault();return CardEdit_EditPriceClose();">@Local["Đóng"]</button>
                    <button form="CLE_FormPriceCard" type="button" class="btn bg-gradient-primary mt-2 me-2"
                            onclick="event.preventDefault();return CardEdit_EditPriceSave();">
                        @Local["Lưu"]
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>
<script type="text/javascript">
    let serCustomerID = '@Model._CardCustomerID';
    let serCurrentID = '@Model._CardCurrentID';
    let serDateFrom = '@Model._DataFrom';
    let serDateTo = '@Model._DateTo';
    let CLE_Quantity;
    let Flag_EditPriceType = 0;
    let Flag_EditPriceCard = 0;
    let dataEditPrice = {};
    let dataPriceRoot = 0;
    let CLE_DataMain, CLE_DataMainSlice;
    let CLE_IndexTable = 0;
    let CLE_TotalCashback = 0;
    let Cardedit_sms = {};
    let Cardedit_KeyMessage = {};
    let Cardedit_CardCode = '';
    let Cardedit_BranchName = '';
    let Cardedit_Custphone = '';
    let CLE_PriceUseLeft = 0;
    $(document).ready(function () {
        let dateFrom = serDateFrom != "" ? ConvertOnly_DMY_To_DateTime(serDateFrom) : ConvertOnly_DMY_To_DateTime('01-01-1900');
        let dateTo = serDateTo != "" ? ConvertOnly_DMY_To_DateTime(serDateTo) : new Date();
        $("#CLE_PriceUsedInfo, #CLE_PriceEdit").divide();
        $("#CLE_Date").flatpickr({
            mode: "range",
            dateFormat: 'd-m-Y',
            defaultDate: [GetDateTime_String_DMY(dateFrom), GetDateTime_String_DMY(dateTo)],
            enableTime: false,
            onClose: function (selectedDates, dateStr, instance) {
                if (selectedDates.length == 1) {
                    instance.setDate([selectedDates[0], selectedDates[0]], true);
                } else {
                    var diffDays = Math.abs(selectedDates[1] - selectedDates[0]) / (1000 * 60 * 60 * 24);
                    if (diffDays > 31)
                        instance.setDate([selectedDates[0], selectedDates[0]], true);
                }
            }
        });
        $("#CLE_Date").val(formatDateClient(dateFrom) + ' to ' + formatDateClient(dateTo));
        CardEdit_LoadInit();
        ToolPopper();
    })
    //#region //Load

    function CardEdit_LoadInit() {
        AjaxLoad(url = "/Card/Status/CardList_Edit/?handler=LoadInit"
            , data = {
                "customerid": serCustomerID
            }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                let data = JSON.parse(result);

                let datasms = data.SMS;
                if (datasms != undefined && datasms.length == 1 && datasms[0].AllowSendPay == "1") {
                    Cardedit_BranchName = datasms[0].SMSBranchName ? datasms[0].SMSBranchName : ''
                    Cardedit_Custphone = datasms[0].CustPhone ? datasms[0].CustPhone : ''
                    Cardedit_sms = {
                        "AllowSendPay": 1,
                        "ContentSMSPayment": datasms[0].ContentSMSPayment,
                        "SMSBranchName": Cardedit_BranchName
                    }
                }
                Load_Combo(data.ReasonCashback, "CLE_CbbReasonEdit", false);
                $("#CLE_ReasonEdit").dropdown("refresh");
                CardEdit_LoadData();
            }
        )
    }


    async function CardEdit_LoadData() {
        new Promise((resolve) => {
            if (serCustomerID != 0) {
                let dateFrom = "";
                let dateTo = "";
                let date = $('#CLE_Date').val() ? $('#CLE_Date').val() : new Date();
                if (date.includes(" to ")) {
                    dateFrom = date.split(" to ")[0];
                    dateTo = date.split(" to ")[1];
                }
                else {
                    dateFrom = date;
                    dateTo = date;
                }
                CLE_IndexReport = 0;
                $('#CLE_ServiceUsedBody').empty();
                $('#CLE_Service').html(0);
                $('#CLE_UsedAmount').html(0);
                $('#CLE_CBAmount').html(0);
                AjaxLoad(url = "/Card/Status/CardList_Edit/?handler=LoadData"
                    , data = {
                        "CurrentID": serCurrentID,
                        "dateFrom": dateFrom,
                        "dateTo": dateTo
                    }
                    , async = true
                    , error = function () { notiError_SW() }
                    , success = function (result) {
                        if (result !== "[]") {
                            let data = JSON.parse(result);
                            let { Table: dataGeneral, Table1: dataService } = data;
                            CardEdit_RenderInitInfoCard(dataGeneral[0]);
                            CLE_DataMain = dataService;
                            CLE_DataMainSlice = sliceIntoChunks(JSON.parse(result)['Table1'], 500);
                            CardEdit_RenderCashbackTotal(CLE_DataMain);
                            fnRenderBlock(CLE_DataMainSlice[CLE_IndexReport], 'CLE_ServiceUsedBody'
                                , blocknum = 100
                                , fnrender = CardEdit_RenderTable
                                , fnsuccess = function (e) { }
                                , fnbegin = function (e) { }
                            )
                        }
                    }
                );
            }
        })
    }

    function CLE_RenderMore() {
        CLE_IndexReport += 1;
        if (CLE_DataMainSlice && CLE_DataMainSlice[CLE_IndexReport]) {
            fnRenderBlock(CLE_DataMainSlice[IndexReport], "CLE_ServiceUsedBody"
                , blocknum = 100
                , fnrender = CardEdit_RenderTable
                , fnsuccess = null
            );
        }
    }
    //#endregion


    //#region //Render
    function CardEdit_RenderInitInfoCard(data) {
        $("#CLE_CardCode").html(data.CardCode);
        $("#CLE_PriceUsed").html(formatNumber(data.PriceUse));
        $("#CLE_AmountUsed").html(formatNumber(data.PriceUseTab));
        $("#CLE_PriceUsedLeff").html(formatNumber(Number(data.PriceUse) - Number(data.PriceUseTab)));
        Cardedit_CardCode = data.CardCode;
        $("#CLE_DateCreate").html(ConvertDateTimeUTC_DMY(data.Created))
        $('#CLE_Note').val(data.Note);
        $("#CLE_Quantity").html(data.Quantity)


        $("#CLE_CheckboxEndLess").prop("checked", (data.EndLess != 1));
        if (data.EndLess != 1) {
            $("#CLE_EndLess").prop("disabled", false);
            let CLE_DateDiff = CardEdit_DiffInDays(new Date(), new Date(data.ExpiredDate))
            $("#CLE_EndLess").val(CLE_DateDiff).trigger('change');
        }
        else {
            $("#CLE_EndLess").prop("disabled", true);
            $("#CLE_EndLess").val(0).trigger('change');
        }

        $("#CLE_CheckboxTimesUsed").prop("checked", (data.IsTimesUsed != 0));
        if (data.IsTimesUsed != 0) {
            $("#CLE_TimesUsed").prop("disabled", false);
            $("#CLE_TimesUsed").val(data.TimesUsed);
        }
        else {
            $("#CLE_TimesUsed").prop("disabled", true);
            $("#CLE_TimesUsed").val(0);
        }
        $("#CLE_PriceUsedInfo").val(data.Quantity != 0 ? Math.floor(data.PriceUse / data.Quantity) : 1).trigger('keyup');
        $("#CLE_PriceUsedInfo").prop("disabled", true);
        dataPriceRoot = $("#CLE_PriceUsedInfo").val() ? Number($("#CLE_PriceUsedInfo").val()) : 0;
        CLE_Quantity = (data.Quantity != 0 ? data.Quantity : 1);
        CardEdit_Event();
    }
    async function CardEdit_RenderCashbackTotal(data) {
        new Promise((resolve) => {
            setTimeout(() => {
                let totalCashback = 0, usedTotal = 0;
                if (data && data.length > 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let objCashback = CLE_RenderCashBack(item.RuleCashback, item.ServiceID, item.ServiceGroup, item.UsedAmount);
                        totalCashback += (objCashback?.amount != undefined ? Number(objCashback?.amount) : 0);
                        usedTotal += (item?.UsedAmount != undefined ? Number(item?.UsedAmount) : 0);
                    }

                    $('#CLE_Service').html(formatNumber(data.length));
                    $('#CLE_UsedAmount').html(formatNumber(usedTotal.toFixed(2)));
                    $('#CLE_CBAmount').html(formatNumber(totalCashback.toFixed(2)));
                    CLE_TotalCashback = totalCashback;
                }
                resolve();
            }, 100);
        })
    }

    async function CardEdit_RenderTable(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let objCashback = CLE_RenderCashBack(item.RuleCashback, item.ServiceID, item.ServiceGroup, item.UsedAmount);
                            let tr = `
                                                  <td class="vt-number-order"></td>
                                                  <td>${item.Service}</td>
                                                  <td>${ConvertDateTimeUTC_DMY(item.Created)}</td>
                                                  <td>${formatNumber(item.UsedAmount)}</td>
                                                  <td>${formatNumber(objCashback?.percent)}</td>
                                                  <td>${formatNumber(objCashback?.amount?.toFixed(2))}</td>
                                              `
                            tr = `<tr class="vt-number" role="row">${tr}</tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                resolve();
            }, 100);
        })
    }

    function CLE_RenderCashBack(RuleCashback, ServiceID, ServiceGroup, UsedAmount) {
        let result = {};
        if (RuleCashback != '') {
            let objRuleCB = JSON.parse(RuleCashback);
            for (let [key, value] of Object.entries(objRuleCB)) {
                let item = value;
                switch (item?.type) {
                    case "all":
                        if (item?.active == 1) {
                            result = CLE_CalCashBack(item, 0, UsedAmount, 1)
                        }
                        break;
                    case "servicetype":
                        if (item?.active == 1) {
                            result = CLE_CalCashBack(item?.value, ServiceGroup, UsedAmount)
                        }
                        break;
                    case "service":
                        if (item?.active == 1) {
                            result = CLE_CalCashBack(item?.value, ServiceID, UsedAmount)
                        }
                        break;
                    default:
                        console.log("default");
                }
                if (Object.keys(result).length !== 0) return result;
            }
        }
        return result
    }

    function CLE_CalCashBack(data, id, usedAmount, typeAll = 0) {
        let result = {};
        if (typeAll == 1 && id == 0) {
            let percent = data.percent, amount = 0;
            if (data.percent != 0) {
                amount = usedAmount * (data.percent / 100);
            }
            else {
                amount = data.amount;
            }
            result = {
                percent,
                amount
            }
        } else {
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    if (id == 0 || item.id == id) {
                        let percent = item.percent, amount = 0;
                        if (item.percent != 0) {
                            amount = usedAmount * (item.percent / 100);
                        }
                        else {
                            amount = item.amount;
                        }
                        result = {
                            percent,
                            amount
                        }
                        return result;
                    }
                }
            }
        }
        return result;
    }
    //#endregion


    //#region //Executed

    function CardEdit_Execute() {
        let data = new Object();

        data.IsEditPriceUse = ((Flag_EditPriceCard == 1) ? 1 : 0);
        data.PriceUpdate = ((Flag_EditPriceCard == 1) ? dataEditPrice.PriceUpdate : 0);
        data.Reason = ((Flag_EditPriceCard == 1) ? dataEditPrice.Reason : 0);
        data.IsPlus = ((Flag_EditPriceCard == 1) ? dataEditPrice.IsPlus : 0);

        data.EndLess = $("#CLE_CheckboxEndLess").is(":checked") ? 0 : 1;
        data.NumExpired = data.EndLess == 1 ? 0 : Number($("#CLE_EndLess").val());

        data.IsTimesUsed = $("#CLE_CheckboxTimesUsed").is(":checked") ? 1 : 0;
        data.TimesUsed = data.IsTimesUsed == 1 ? Number($("#CLE_TimesUsed").val()) : 0;

        data.PriceUse = Number($("#CLE_PriceUsedInfo").val()) ? (Number($("#CLE_PriceUsedInfo").val()) * CLE_Quantity) : 0;
        data.Note = $('#CLE_Note').val();

        AjaxLoad(url = "/Card/Status/CardList_Edit/?handler=Executed"
            , data = {
                "data": JSON.stringify([data])
                , "CustomerID": serCustomerID
                , "CurrentID": serCurrentID
            }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    if (data['Table'][0]['RESULT'] != "0") {

                        syslog_cutcard(serCurrentID == 0 ? 'i' : 'u', data['Table'][0]['RESULT'], serCustomerID, '');
                        if (typeof CardList_LoadData === 'function') CardList_LoadData(1, serCurrentID);
                        Cardedit_KeyMessage.CardCode = data['Table1'][0]['CardCode'];
                        Cardedit_KeyMessage.CardLeft = formatNumber(Number(data['Table1'][0]['CardLeft']));
                        if (Cardedit_KeyMessage.Amount != undefined && Cardedit_KeyMessage.Amount != 0) {
                            CardCust_AfterpaidAction(serCustomerID, Cardedit_KeyMessage.Amount, serCurrentID);
                        }

                        CloseModal();
                        notiSuccess();
                    } else {
                        notiError_SW();
                    }
                }
                else {
                    notiError_SW();
                }
            }
            , sender = $("#CLE_ExecutedEdit")
        )
    }

    //#endregion

    //#region //Event

    function CardEdit_Event() {
        $("#CLE_DivCardDetail .CLE_PlusPrice").unbind("click").on("click", function () {
            if (Flag_EditPriceType != 1) {
                $('#CLE_ReasonEdit').dropdown('restore defaults');
                $('#CLE_PriceEdit').val('');
                Flag_EditPriceType = 1;
            }
            CardEdit_EditPriceOpen(1);
        })
        $("#CLE_DivCardDetail .CLE_ElimiPrice").unbind("click").on("click", function () {
            if (Flag_EditPriceType != 2) {
                $('#CLE_ReasonEdit').dropdown('restore defaults');
                $('#CLE_PriceEdit').val('');
                Flag_EditPriceType = 2;
            }
            CardEdit_EditPriceOpen(2);
        })
    }

    //#endregion

    //#region //Handler
    function CardEdit_DiffInDays(a, b) {
        const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
        const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());
        return Math.floor((utc2 - utc1) / (1000 * 60 * 60 * 24));
    }
    function CardEdit_OnchangeEndLess() {
        if ($("#CLE_CheckboxEndLess").is(":checked")) {
            $("#CLE_EndLess").prop("disabled", false);
            let date = $("#CLE_DateCreate").html() ? ConvertOnly_DMY_To_DateTime($("#CLE_DateCreate").html()) : "";
            let dateNum = $("#CLE_EndLess").val() ? Number($("#CLE_EndLess").val()) : 0;
            let dateEnd = ConvertDateTimeUTC_DMY(date.addDays(dateNum))
            $("#CLE_DateExpired").html(dateEnd)
            $("#CLE_Arrorw, #CLE_DateExpired, #CLE_DateCreate").removeClass('d-none');
        }
        else {
            $("#CLE_EndLess").prop("disabled", true);
            $("#CLE_DateExpired").html("")
            $("#CLE_Arrorw, #CLE_DateExpired, #CLE_DateCreate").addClass('d-none');
        }
    }
    function CardEdit_OnchangeTimesUsed() {
        if ($("#CLE_CheckboxTimesUsed").is(":checked")) $("#CLE_TimesUsed").prop("disabled", false);
        else $("#CLE_TimesUsed").prop("disabled", true);
    }
    function CardEdit_OnchangePriceUse() {
        let val = Number($("#CLE_PriceUsedInfo").val()) ? Number($("#CLE_PriceUsedInfo").val()) : 0;
        let Quantity = $('#CLE_Quantity').html() ? Number($('#CLE_Quantity').html()) : 1;
        $('#CLE_PriceUsed').html(formatNumber(val * Quantity))
        let AmountUsed = $("#CLE_AmountUsed").html() ? Number($('#CLE_AmountUsed').html().replaceAll(',', '')) : 0
        let PriceUsed = $("#CLE_PriceUsed").html() ? Number($('#CLE_PriceUsed').html().replaceAll(',', '')) : 0
        $('#CLE_PriceUsedLeff').html(formatNumber(PriceUsed - AmountUsed));
    }
    //#endregion

    //#region //EditPriceCard
    function CardEdit_EditPriceOpen(Type) {
        //Type = 1 Cộng, Type = 2 Trừ.
        $("#CLE_DivCardDetail").addClass('opacity-5');
        $("#CLE_DivEditPrice").removeClass('d-none');
        $("#CLE_PriceEdit").val(CLE_TotalCashback);
        $("#CLE_NameEditPrice").html((Type == 1) ? '@Local["Giá Tiền"] (+)' : '@Local["Giá Tiền"] (-)');
    }
    function CardEdit_EditPriceClose(Type) {
        $("#CLE_DivCardDetail").removeClass('opacity-5');
        $("#CLE_DivEditPrice").addClass('d-none');
    }
    function CardEdit_EditPriceSave() {
        $("#CLE_FormPriceCard").form('validate form')
        if ($('#CLE_FormPriceCard').form('is valid')) {
            Flag_EditPriceCard = 1;
            let CalPrice = 0;
            dataEditPrice = {};
            let PriceUpdate = $("#CLE_PriceEdit").val() ? Number($("#CLE_PriceEdit").val()) : 0;
            //let PriceUsedLeff = $("#CLE_PriceUsedLeff").html() ? Number($('#CLE_PriceUsedLeff').html().replaceAll(',', '')) : 0

            dataEditPrice.PriceUpdate = PriceUpdate;
            Cardedit_KeyMessage.Amount = PriceUpdate;
            dataEditPrice.Reason = Number($('#CLE_ReasonEdit').dropdown('get value')) ? Number($('#CLE_ReasonEdit').dropdown('get value')) : 0;
            dataEditPrice.IsPlus = (Flag_EditPriceType == 1) ? 1 : 0;
            CalPrice = (dataEditPrice.IsPlus == 1) ? (dataPriceRoot + dataEditPrice.PriceUpdate) : (dataPriceRoot - dataEditPrice.PriceUpdate);
            if (dataEditPrice.PriceUpdate == 0) Flag_EditPriceCard = 0;
            $("#CLE_PriceUsedInfo").val(CalPrice).trigger('keyup');
            CardEdit_EditPriceClose();
        }
    }
    //#endregion
    //#region // After paid

    async function CardCust_AfterpaidAction (_customerid, _amount, _cardid) {
         return new Promise((resolve, reject) => {
             AjaxJWT(url = "/api/SMS/afterChange"
                 , data = JSON.stringify({
                     'customerid': _customerid
                     , 'amount': formatNumber(_amount)
                     , 'cardid': _cardid
                     , 'dataSMSPayment': Cardedit_sms
                     , 'KeyMessage': Cardedit_KeyMessage
                 })
                 , async = true
                 , success = function (result) { }
             );
        })
    }
    //#endregion
</script>
<script>js_require('/js/customjs/custom-validation.js');</script>
<style>
    .top-20 {
        top: 20%;
    }
</style>