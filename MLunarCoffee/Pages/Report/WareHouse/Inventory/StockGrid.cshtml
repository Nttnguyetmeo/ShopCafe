@page
@model MLunarCoffee.Pages.Report.WareHouse.Inventory.StockGridModel
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<div class="vtcardheader pt-3 px-0 pb-0">
   <div class="left">
        <h6 class="mb-0">@Local["Xuất nhập tồn kho"]</h6>
        <p class="mb-0 text-sm">@Local["Chi tiết nhập xuất tồn của từng sản phẩm"] (@Local["Số lượng"], @Local["Đơn giá"], ...) </p>
    </div>
</div>
<div class="card card-plain">
    <div class="vtcardheader card-header pb-0 px-0 pt-2">
        <div class="left w-100">
            <div class="row w-100 m-0">
                <div class="col-12 col-md px-0 py-1 pe-sm-1">
                    <div class="ui fluid search selection dropdown form-control" id="RPS_Input" onchange="event.preventDefault();return RPS_Filter();">
                        <input type="hidden" name="" />
                        <i class="dropdown icon"></i>
                        <input class="search" autocomplete="off" tabindex="0" />
                        <div class="default text">eg .@Local["Xuất nhập tồn"]</div>
                        <div class="menu" tabindex="-1">
                            <div class="item" data-value="inventory">
                                @Local["Tồn kho"]
                            </div>
                            <div class="item" data-value="reciept">
                                @Local["Nhập kho"]
                            </div>
                            <div class="item" data-value="export">
                                @Local["Xuất kho"]
                            </div>
                            <div class="item" data-value="export_sale">
                                @Local["Bán hàng"]
                            </div>
                            <div class="item" data-value="export_treat">
                                @Local["Điều trị"]
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md px-0 py-1 pe-sm-1">
                    <div class="ui fluid search selection dropdown form-control" id="RPS_MaterialType" onchange="event.preventDefault();return RPS_Filter();">
                        <input type="hidden" name="" />
                        <i class="dropdown icon"></i>
                        <i class="remove icon"></i>
                        <input class="search" autocomplete="off" tabindex="0" />
                        <div class="default text">eg .@Local["Nhóm nguyên vật liệu"]</div>
                        <div id="cbbRPS_MaterialType" class="menu" tabindex="-1"></div>
                    </div>
                </div>
                <div class="col-12 col-md px-0 py-1 pe-sm-1">
                    <div class="input-group flex-nowrap" id="divSearchLockWare">
                        <div class="input-group-text input-group-text px-2">
                            <i class="fas fa-search" aria-hidden="true"></i>
                            <div class="spinner-border spinner-border-sm" style="display:none;"></div>
                        </div>
                        <input id="txtRP_Ware_Filter" type="text" class="form-control ps-2" placeholder="eg .@Local["Tìm kiếm"]">
                        <div class="input-group-text"><i class="btn_clear fas fa-minus-circle opacity-1"></i></div>
                    </div>
                </div>
                <div class="col-12 col-md-auto px-1 overflow-x">
                    <div class="d-flex align-items-center">
                        <div class="text-primary fw-bold d-inline mx-2 d-flex">
                            <span id="Reve_currentdata">0</span>
                            <span class="mx-2">/</span>
                            <span id="Reve_totaldata">0</span>
                        </div>
                        <div class="icon-hover mx-1"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Tải lại"]">
                            <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                               onclick="event.preventDefault(); return RP_LoadAll()"></i>
                        </div>
                        <div class="icon-hover mx-1"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Xuất excel"]">
                            <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                               onclick="event.preventDefault(); return RP_Export()"></i>
                        </div>
                        <div class="position-relative d-lg-inline mt-1 mx-1" id="RP_GridArea_btnShowMore">
                            <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                                @Local["Xem thêm"]
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="toggle">
            <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                <ul class="card card-body text-dark text-capitalize opacity-10">
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="prounit" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Đơn vị"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="proprice" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Giá vốn"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="proimpdetail" type="checkbox">
                        </div>
                        <p class="text-sm text-nowrap">@Local["Chi tiết phiếu nhập"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="proexpdetail" type="checkbox">
                        </div>
                        <p class="text-sm text-nowrap">@Local["Chi tiết phiếu xuất"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="proestimate" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Dự toán"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="proavgvalue" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Đơn giá trung bình"]</p>
                    </li>
                </ul>
            </div>

        </div>
    </div>
    <div class="collapsesticky collapse show" id="RP_GridArea">
        <div class="card-body p-0 mt-3">
            <div class="m-0 my-0 mobile-responsive vt-header-sticky">
                <table class="table vt-table mb-0" id="RP_Grid">
                    <thead>
                        <tr>
                            <th style="display: none"></th>
                            <th style="display: none"></th>
                            <th colspan="3" class="fixed-side">
                                @Local["Nguyên vật liệu"]
                            </th>
                            <th data-name="prounit" style="min-width: 100px;" rowspan="2">@Local["Đơn vị"]</th>
                            <th data-name="proprice" style="min-width: 100px;" rowspan="2">@Local["Giá vốn"]</th>
                            <th colspan="2" style="width: 120px;">
                                @Local["Đầu kỳ"]
                                <span class="d-block text-danger">[1]</span>
                            </th>
                            <th colspan="2">
                                @Local["Số lượng nhập"]
                                <span class="d-block text-danger">[2]</span>
                            </th>
                            <th colspan="2" data-name="proimpdetail">
                                @Local["Chi tiết phiếu nhập"]
                            </th>
                            <th colspan="2">
                                @Local["Số lượng xuất"]
                                <span class="d-block text-danger">[3]</span>
                            </th>
                            <th colspan="4" data-name="proexpdetail">
                                @Local["Chi tiết phiếu xuất"]
                            </th>
                            <th colspan="3" data-name="proestimate">
                                @Local["Dự toán xuất bán và điều trị"]
                            </th>
                            <th colspan="2">@Local["Tồn kho"]<span class="text-danger d-block">[1]+[2]-[3]</span></th>
                            <th rowspan="2" style="min-width: 120px;" data-name="proavgvalue">@Local["Đơn giá trung bình"]</th>
                        </tr>
                        <tr role="row">
                            <th style="min-width: 35px;" class="fixed-side">@Local["#"]</th>
                            <th style="width: 100px;" class="fixed-side">@Local["Mã"]</th>
                            <th style="min-width: 200px; max-width: 200px" class="fixed-side">@Local["Tên"]</th>
                            <th style="min-width: 80px;">@Local["Số lượng"]</th>
                            <th style="min-width: 80px;">@Local["Giá trị"]</th>
                            <th style="min-width: 80px;">@Local["Số lượng"]</th>
                            <th style="min-width: 80px;">@Local["Giá trị"]</th>
                            <th style="min-width: 80px;" data-name="proimpdetail">@Local["Nhập"]</th>
                            <th style="min-width: 80px;" data-name="proimpdetail">@Local["Chuyển"]</th>
                            <th style="min-width: 80px;">@Local["Số lượng"]</th>
                            <th style="min-width: 80px;">@Local["Giá trị"]</th>
                            <th style="min-width: 80px;" data-name="proexpdetail">@Local["Xuất"]</th>
                            <th style="min-width: 80px;" data-name="proexpdetail">@Local["Chuyển"]</th>
                            <th style="min-width: 80px;" data-name="proexpdetail">@Local["Điều trị"]</th>
                            <th style="min-width: 80px;" data-name="proexpdetail">@Local["Bán"]</th>
                            <th style="min-width: 100px;" data-name="proestimate">@Local["Dự toán"]</th>
                            <th style="min-width: 100px;" data-name="proestimate">@Local["Thực tế"]</th>
                            <th style="min-width: 100px;" data-name="proestimate">@Local["Số lượng chênh lệch"]</th>
                            <th style="min-width: 120px;">@Local["Số lượng"]</th>
                            <th style="min-width: 80px;">@Local["Giá trị"]</th>
                        </tr>
                    </thead>
                    <tbody id="RP_GridBody">
                    </tbody>
                </table>
                <table class="table vt-table mb-0 d-none" id="RP_StockList_Grid">
                    <thead>
                        <tr>
                            <th style="min-width: 35px;" rowspan="2">@Local["#"]</th>
                            <th rowspan="2" style="min-width: 150px;">@Local["Chứng từ"]</th>
                            <th rowspan="2" style="min-width: 150px;">@Local["Kho"]</th>
                            <th style="min-width: 140px;" rowspan="2" id="RPS_HeaderDate">@Local["Ngày"]</th>
                            <th style="min-width: 100px;" colspan="3">@Local["Phiếu"]</th>
                            <th class="export_ts" style="min-width: 150px;" rowspan="2">@Local["Dịch vụ"]</th>
                            <th class="export_ts" style="min-width: 150px;" rowspan="2">@Local["Giá"]</th>
                            <th class="export_ts" style="min-width: 130px;" rowspan="2">@Local["Mã khách hàng"]</th>
                            <th class="export_ts" style="min-width: 150px;" rowspan="2">@Local["Khách hàng"]</th>
                            <th class="export_ts" style="min-width: 150px;" rowspan="2">@Local["Điện thoại"]</th>
                            <th style="min-width: 150px;" colspan="9">@Local["Thông tin"]</th>
                            <th style="min-width: 140px;" rowspan="2">@Local["Nội dung"]</th>
                            <th style="min-width: 140px;" rowspan="2">@Local["Người tạo"]</th>
                            <th style="min-width: 140px;" rowspan="2">@Local["Ngày tạo"]</th>
                            <th style="min-width: 140px;" rowspan="2">@Local["Nhà cung cấp"]</th>
                        </tr>
                        <tr>
                            <th style="min-width: 120px;">@Local["Loại"]</th>
                            <th style="min-width: 120px;">@Local["Từ kho"]</th>
                            <th style="min-width: 120px;">@Local["Đến kho"]</th>
                            <th style="min-width: 100px;">@Local["Sản phẩm"]</th>
                            <th style="min-width: 120px;">@Local["Giá vốn"]</th>
                            <th style="min-width: 120px;">@Local["Đơn giá"]</th>
                            <th style="min-width: 100px;">@Local["Số lượng"]</th>
                            <th style="min-width: 100px;">@Local["Đơn vị"]</th>
                            <th style="min-width: 120px;">@Local["Số lượng kiểm kê"]</th>
                            <th style="min-width: 100px;">@Local["Đơn vị kiểm kê"]</th>
                            <th style="min-width: 120px;">@Local["Tạm tính"]</th>
                            <th style="min-width: 120px;">@Local["Thành tiền"]</th>
                        </tr>
                    </thead>
                    <tbody id="RP_StockList_GridBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div id="RP_GridDetail" style="display:none;">
    <div id="RP_GridDetail_Content"></div>
    <div class="action_Save mt-3">
        <div class="action_Save-Content">
            <button class="btn btn-secondary" form="form3" onclick="event.preventDefault(); RP_Close()" data-fontchanged="true">@Local["Đóng"]</button>
        </div>
    </div>
</div>




<script type="text/javascript">

    //#region // DECLARE & INIT LOAD LIST

    let xhrLoadList;
    var DataReportMain, DataReportMain_StockAll = [];
    let shtable;
    //let DataLockID = 0;
    let timeoutCount, data_TimerOnchange;
    let _wareID = "@Model._WareID";
    let _dateFrom = "@Model._dateFrom" + ' 00:00:00';
    let _dateTo = "@Model._dateTo" + ' 23:59:59';
    var RPS_DataUnit = {}, RPS_DataSupplier = {};
    let RPS_Promises = [];
    let RPS_IsFilter = 0;
    let RPS_Para_Search = {
        'WareID': _wareID
        , 'dateFrom': _dateFrom
        , 'dateTo': _dateTo
    }
    let RP_DataPrefix = {
        'inventory': 'INVENTORY',
        'reciept': 'RECIEPT',
        'export': 'EXPORT',
        'export_sale': 'SALE',
        'export_treat': 'TREATMENT'
    }

    $(document).ready(function () {

        shtable = $("#RP_Grid").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        ToolPopper();
        RP_LoadInit();
        RP_SearchProduct();
        Checking_TabControl_Permission();
    });

    function RP_LoadInit() {

        xhrLoadList = AjaxLoad(url = "/Report/WareHouse/Inventory/StockGrid/?handler=LoadInit"
            , data = {}
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    RPS_DataUnit = (data.Unit).reduce((pre, arr) => { if (arr.ID) pre[arr.ID] = arr; return pre; }, {});
                    RPS_DataSupplier = (data.Supplier).reduce((pre, arr) => { if (arr.ID) pre[arr.ID] = arr; return pre; }, {});
                    //data.ProductType

                    $("#RPS_Input").dropdown("refresh");
                    $("#RPS_Input").dropdown("set selected", "inventory");

                    Load_Combo(data.ProductType, 'cbbRPS_MaterialType', true, "@Local["Loại nguyên vật liệu"]");
                    $("#RPS_MaterialType").dropdown("refresh");
                    $("#RPS_MaterialType").dropdown("set selected", "0");

                    RP_LoadAll();
                }
                else {
                    notiError_SW();
                }
            }
        );
        return false;
    }

    function RP_LoadAll() {
        RPS_IsFilter = 0;
        RPS_Promises.push(RP_Load());
        RPS_Promises.push(RP_LoadStockAll());
        Promise.all(RPS_Promises).then((value) => {
            RPS_IsFilter = 1;
        })
    }

    async function RP_Load() {
        return new Promise((resolve) => {
            if (xhrLoadList && xhrLoadList.readyState != 4) xhrLoadList.abort();
            $("#RP_GridBody").empty();
            RP_Close()
            xhrLoadList = AjaxLoad(url = "/Report/WareHouse/Inventory/StockGrid/?handler=Loadata"
                , data = RPS_Para_Search
                , async = true
                , error = function () { notiError_SW(); }
                , success = function (result) {
                    if (result != "0") {
                        let dataMain = JSON.parse(result);
                        DataReportMain = {};
                        if (dataMain != undefined && dataMain.length != 0) {
                            DataReportMain = dataMain.reduce((pre, arr) => {
                                arr.TotalINOUT = arr.Import + arr.Import_Transfer - arr.Export - arr.Export_Transfer - arr.Export_Treat - arr.Export_Sale;
                                if (arr.BeforeUnit == 0 || arr.BeforeUnit == arr.UnitID) {
                                    arr.Num_LeftTemp = Math.round((arr.BeforeNum + arr.TotalINOUT) * 100) / 100;
                                    arr.Exam = 0;
                                }
                                else {
                                    arr.Num_LeftTemp = 0;
                                    arr.Exam = 1;
                                }
                                arr.Num_Left = arr.Num_LeftTemp;
                                pre[arr.ProductID] = arr;
                                return pre;
                            }, {});

                            fnRenderBlock(DataReportMain, "RP_GridBody"
                                , blocknum = 100
                                , fnrender = RP_Render
                                , fnsuccess = function () { }
                            );
                            Count_Up("Reve_totaldata", Object.values(DataReportMain).length);
                        };
                        resolve();
                    }
                    else {
                        notiError_SW();
                    }
                }
            );
        });
    }

    async function RP_LoadStockAll() {
        return new Promise((resolve) => {
            AjaxLoad(url = "/Report/WareHouse/Inventory/StockGrid/?handler=LoadStockAll"
                , data = RPS_Para_Search
                , async = true
                , error = function () { notiError_SW(); }
                , success = function (result) {
                    if (result != "0") {
                        let data = JSON.parse(result);
                        DataReportMain_StockAll = data.Table;
                        resolve();
                    }
                    else {
                        notiError_SW();
                    }
                }
            );
        })
    }

    //#endregion


    function RPS_Filter() {
        if (RPS_IsFilter == 1) {
            let valueType = RPS_GetType_Filter();
            let materialType = $("#RPS_MaterialType").dropdown() ? Number($("#RPS_MaterialType").dropdown("get value")) : 0;
            RP_ShowType();
            RP_Close();
            $("#Reve_currentdata").html('0')
            if (valueType == 'inventory') {
                $("#RP_GridBody").empty();
                let dataFilter = {};
                if (materialType != 0) {
                    for ([key, value] of Object.entries(DataReportMain)) {
                        if (value.TypeID == materialType) {
                            dataFilter[key] = value;
                        }
                    }
                }
                else dataFilter = DataReportMain;

                fnRenderBlock(dataFilter, "RP_GridBody"
                    , blocknum = 100
                    , fnrender = RP_Render
                    , fnsuccess = function () { }
                );
                Count_Up("Reve_totaldata", Object.values(dataFilter).length);
            }
            else {
                let dataFilter = [];
                dataFilter = DataReportMain_StockAll.filter((word) => {
                    return word["Type"] == valueType && (materialType == 0 || materialType == word.ProductType);
                })
                $("#RP_StockList_GridBody").empty();
                RP_Render_Stock(dataFilter, "RP_StockList_GridBody");
                Count_Up("Reve_totaldata", dataFilter.length);
            }
        }
    }

    function RPS_GetType_Filter() {
        let value = $("#RPS_Input").dropdown("get value");
        return value;
    }

    //#region // SEARCH PRODUCT

    function RP_SearchProduct() {
        $('#txtRP_Ware_Filter').keyup(function () {
            if ($(this).val().length > 0) $(".btn_clear").removeClass('opacity-1');
            else $(".btn_clear").addClass('opacity-1');
            $("#divSearchLockWare .fa-search").hide();
            $("#divSearchLockWare .spinner-border").show();
            clearTimeout(data_TimerOnchange);
            data_TimerOnchange = setTimeout(function (e) {
                OnLockWare_Filter();
            }, 500);
        });

        $("#divSearchLockWare").on('click', '.btn_clear', function (e) {
            $('#txtRP_Ware_Filter').val('');
            $("#divSearchLockWare .btn_clear").addClass('opacity-1');
            $("#RP_Grid").removeClass('table-hide-row');
        });
    }

    async function OnLockWare_Filter() {
        await OnLockWare_FilterAsync();
        return false;
    }

    function OnLockWare_FilterAsync() {
        return new Promise((resolve, reject) => {
            setTimeout(
                () => {
                    let search = xoa_dau($('#txtRP_Ware_Filter').val().toLowerCase()).trim();
                    let valueType = RPS_GetType_Filter();
                    if (valueType == 'inventory') {
                        if (search && search == '') $("#RP_Grid").removeClass('table-hide-row');
                        else {
                            $("#RP_Grid").addClass('table-hide-row');
                            for ([key, value] of Object.entries(DataReportMain)) {
                                let rowPro = $('#rp_product_' + key);
                                if (xoa_dau(value.ProductCode).toLowerCase().includes(search)
                                    || xoa_dau(value.ProductName).toLowerCase().includes(search)) {
                                    if (rowPro.hasClass('hide-row'))
                                        rowPro.removeClass("hide-row");
                                }
                                else rowPro.addClass("hide-row");
                            }
                        }
                    }
                    else {
                        let dataFilter = [];
                        dataFilter = DataReportMain_StockAll.filter((word) => {
                            return word["Type"] == valueType;
                        });
                        if (search && search != '' && dataFilter.length != 0) {
                            dataFilter = dataFilter.filter((word) => {
                                if (xoa_dau(word.Code).toLowerCase().includes(search)
                                    || xoa_dau(word.CustName).toLowerCase().includes(search)
                                    || xoa_dau(word.Service).toLowerCase().includes(search)) {
                                    return true;
                                }
                                return false
                            });
                        }
                        $("#RP_StockList_GridBody").empty();
                        fnRenderBlock(dataFilter, "RP_StockList_GridBody"
                            , blocknum = 100
                            , fnrender = RP_Render_Stock
                            , fnsuccess = function () { }
                        );
                        Count_Up("Reve_totaldata", dataFilter.length);
                    }
                    ColorSearchFilterText(search, "seachRow");
                    $("#divSearchLockWare .fa-search").show();
                    $("#divSearchLockWare .spinner-border").hide();
                    resolve()
                }
            )
        })
    }

    //#endregion


    //#region // RENDER

    async function RP_Render(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for ([key, value] of Object.entries(data)) {
                            let item = value;
                            let totalImport = item.Import + item.Import_Transfer;
                            let totalExport = item.Export + item.Export_Transfer + item.Export_Treat + item.Export_Sale;
                            let tr =
                                '<td class="vt-number-order"></td>'
                                + '<td><a data-name="' + item.ProductName + '" data-id="' + item.ProductID + '"class="buttonDetailClass cursor-pointer">' + item.ProductCode + '</a></td>'
                                + '<td>' + item.ProductName + '</td>'
                                + '<td data-name="prounit" class="text-center">' + item.UnitName + '</td>'
                                + '<td data-name="proprice" class="text-center">' + formatNumber(item.CostPrice) + '</td>'

                                + '<td class="text-center">' + formatNumber(Math.round(item.BeforeNum * 100) / 100) + '</td>'
                                + '<td class="text-center">' + formatNumber(Math.round((item.BeforeNum * item.Amount) * 100) / 100) + '</td>'

                                + '<td class="text-center">' + formatNumber(Math.round(totalImport * 100) / 100) + '</td>'
                                + '<td class="text-center">' + formatNumber(Math.round(((totalImport) * item.Amount) * 100) / 100) + '</td>'

                                + '<td class="text-center" data-name="proimpdetail">' + formatNumber(Math.round(item.Import * 100) / 100) + '</td>'
                                + '<td class="text-center" data-name="proimpdetail">' + formatNumber(Math.round(item.Import_Transfer * 100) / 100) + '</td>'

                                + '<td class="text-center">' + formatNumber(Math.round((totalExport) * 100) / 100) + '</td>'
                                + '<td class="text-center">' + formatNumber(Math.round(((totalExport) * item.Amount) * 100) / 100) + '</td>'

                                + '<td class="text-center" data-name="proexpdetail">' + formatNumber(Math.round(item.Export * 100) / 100) + '</td>'
                                + '<td class="text-center" data-name="proexpdetail">' + formatNumber(Math.round(item.Export_Transfer * 100) / 100) + '</td>'
                                + '<td class="text-center" data-name="proexpdetail">' + formatNumber(Math.round(item.Export_Treat * 100) / 100) + '</td>'
                                + '<td class="text-center" data-name="proexpdetail">' + formatNumber(Math.round(item.Export_Sale * 100) / 100) + '</td>'

                                + '<td class="text-center" data-name="proestimate">' + formatNumber(Math.round(item.Export_Estimast * 100) / 100) + '</td>'
                                + '<td class="text-center" data-name="proestimate">' + formatNumber(Math.round((item.Export_Treat + item.Export_Sale) * 100) / 100) + '</td>'
                                + '<td class="text-center" data-name="proestimate">' + formatNumber(Math.round((item.Export_Estimast - item.Export_Treat - item.Export_Sale) * 100) / 100) + '</td>'



                                + '<td >' + formatNumber(item.Num_Left) + '</td>'
                                + '<td class="text-center">' + formatNumber(Math.round((item.Num_Left * item.Amount) * 100) / 100) + '</td>'
                                + '<td data-name="proavgvalue">' + formatNumber(Math.round(item.Amount * 100) / 100) + '</td>'

                            tr = '<tr id="rp_product_' + item.ProductID + '" class="vt-number productrow">' + tr + '</tr>';
                            myNode.insertAdjacentHTML('beforeend', tr)
                        }
                        shtable.Refresh();
                        RP_Event();
                        clearTimeout(timeoutCount);
                        timeoutCount = setTimeout(() => {
                            Count_Up("Reve_currentdata", $("#" + id).children().length);
                        }, 300);
                    }
                }
            }, 100);
        })
    }

    async function RP_Render_Stock(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        let codeTemp = '';
                        let isRowSpan = 0;
                        let TypeRender = RPS_GetType_Filter();
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let Type = item.Type;
                            let Code = item.Code;
                            let rowSpan = 1;
                            if (codeTemp != Code) {
                                isRowSpan = 1;
                                rowSpan = data.filter((word) => { return word.Code == Code }).length;
                            }
                            codeTemp = Code;

                            let RowCust = (item.CustID != 0 && isRowSpan == 1)
                                ? `<td rowspan="${rowSpan}">${item.Service}</td>
                                       <td rowspan="${rowSpan}">${formatNumber(item.PriceDiscounted)}</td>
                                       <td rowspan="${rowSpan}">
                                            <a class="cursor-pointer d-block fw-bold" target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustID}">${item.CustCode}</a>
                                       </td>
                                       <td rowspan="${rowSpan}">${item.CustName}</td>
                                       <td rowspan="${rowSpan}">${item.CustPhone}</td>`
                                : (isRowSpan == 1 ? `<td colspan="3" rowspan="${rowSpan}"></td>` : ``)

                            let tr = `
                                    ${isRowSpan == 1 ?
                                    `
                                        <td class="vt-number-order" rowspan="${rowSpan}"></td>
                                        <td rowspan="${rowSpan}">
                                            <a class="cursor-pointer d-block buttonDetailClass" data-code="${item.Code}" data-type="${item.TypeTicket}" >${item.Code}</a>
                                        </td>
                                        <td rowspan="${rowSpan}">${Fun_GetName_ByID(RP_DataWarehouse, item.WareID)}</td>
                                        <td rowspan="${rowSpan}">${ConvertDateTimeUTC_DMYHM(item.DateExe)}</td>
                                        <td rowspan="${rowSpan}">${RP_Render_Stock_Type(Type)}</td>
                                        <td rowspan="${rowSpan}">${(Type) == 'reciept' ? Fun_GetName_ByID(RP_DataWarehouse, item.TransferID) : ''}</td>
                                        <td rowspan="${rowSpan}">${(Type) == 'export' ? Fun_GetName_ByID(RP_DataWarehouse, item.TransferID) : ''}</td>`
                                    : ``
                                }
                                    ${(TypeRender == 'export_sale' || TypeRender == 'export_treat') ? RowCust : ''}
                                    <td>${Fun_GetName_ByID(RP_DataProduct, item.ProductID)}</td>
                                    <td>${formatNumber(item.CostPrice)}</td>
                                    <td>${formatNumber((item.Amount / item.Number).toFixed(2))}</td>
                                    <td>${formatNumber(item.Number)}</td>
                                    <td>${Fun_GetName_ByID(RPS_DataUnit, item.UnitID)}</td>
                                    <td>${formatNumber(item.NumberStandard)}</td>
                                    <td>${Fun_GetName_ByID(RPS_DataUnit, item.UnitStandardID)}</td>
                                    <td>${formatNumber(item.NumberStandard * item.CostPrice)}</td>
                                    <td>${formatNumber(item.Amount)}</td>
                                    <td>${item.Note}</td>

                                    ${isRowSpan == 1 ?
                                    `<td rowspan="${rowSpan}">${Fun_GetName_ByID(RP_DataEmployee, item.CreatedBy)}</td>
                                         <td rowspan="${rowSpan}">${ConvertDateTimeUTC_DMYHM(item.Created)}</td>`
                                    : ``}
                                    <td>${Fun_GetName_ByID(RPS_DataSupplier, item.SupplierID)}</td>
                                `
                            tr = `<tr ${isRowSpan == 1 ? `class="vt-number"` : ''}>${tr}</tr>`;
                            isRowSpan = 0;
                            myNode.insertAdjacentHTML('beforeend', tr)
                        }
                        RP_Event();

                    }
                }
                clearTimeout(timeoutCount);
                timeoutCount = setTimeout(() => {
                    Count_Up("Reve_currentdata", $("#" + id).children().length);
                }, 300);
            }, 100);
        })
    }

    function RP_Render_Stock_Type(Type) {
        try {
            let result = '';
            switch (Type) {
                case 'reciept':
                    result = '@Local["Nhập kho"]';
                    break;
                case 'export':
                    result = '@Local["Xuất kho"]';
                    break;
                case 'export_sale':
                    result = '@Local["Xuất bán"]';
                    break;
                case 'export_treat':
                    result = '@Local["Xuất điều trị"]';
                    break;
                default:
                    result = '';
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }


    //#endregion


    //#region // EVENT

    function RP_Event() {

        $("#RP_Grid .buttonDetailClass").unbind().click(function () {
            $("#RP_GridDetail").fadeIn(200);
            $("#RP_GridArea").hide();
            $("#RP_GridArea_btnShowMore").hide();
            let ProductID = Number($(this).attr('data-id'));
            let Productname = $(this).attr('data-name');
            $("#RP_GridDetail_Content").empty();
            let elementBody = $(`<div class="card-body p-0"></div>`);
            $("#RP_GridDetail_Content").append(elementBody);
            elementBody.load("/Report/WareHouse/Inventory/Ticket?ver=" + Date.now(), function (responseTxt, statusTxt, xhr) {
                if (statusTxt == "success") {
                    if (typeof InvTicket_CardViewLoad === 'function') InvTicket_CardViewLoad(Productname, ProductID, _wareID, _dateFrom, _dateTo);
                }
            });
        });

        $("#RP_StockList_Grid .buttonDetailClass").unbind().click(function () {
            $("#RP_GridDetail").fadeIn(200);
            $("#RP_GridArea").hide();
            $("#RP_GridArea_btnShowMore").hide();
            let code = $(this).attr('data-code');
            let type = $(this).attr('data-type');
            $("#RP_GridDetail_Content").empty();
            let elementBody = $(`<div class="card-body"></div>`);
            $("#RP_GridDetail_Content").append(elementBody)
            elementBody.load("/WareHouse/Ticket/ViewForm?type=" + type
                + "&code=" + code
                + "&ticketproduct=" + 0
                + "&ver=" + Date.now(), function (responseTxt, statusTxt, xhr) {
                });
        });

    }

    //#endregion


    //#region // OTHER

    function RP_Export() {
        try {
            let Type = RPS_GetType_Filter();
            let WareName = Fun_GetName_ByID(RP_DataWarehouse, _wareID);
            let NamePrefix = RP_DataPrefix[Type];
            let DateRange = _dateFrom + ' To ' + _dateTo;
            let NameFile = NamePrefix + ' - ' + WareName + ' - ' + DateRange

            syslog_ExpExcel('e', NameFile);
            if (Type == 'inventory') {
                if ($("#RP_Grid").is(":hidden"))
                    exportToExcel("dtContentTicketCard", NameFile);
                else exportToExcel("RP_Grid", NameFile);
            }
            else exportToExcel("RP_StockList_Grid", NameFile);
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được tệp"]!');
        }
    }

    function RP_Close() {
        $("#RP_GridDetail").hide();
        $("#RP_GridArea").show();
        $("#RP_GridArea_btnShowMore").show();
    }

    function ViewForm_CloseCallback() {
        RP_Close();
    }



    function RP_ShowType() {
        let Type = RPS_GetType_Filter();
        let Table_Show = 'RP_Grid';
        let Table_Hide = 'RP_StockList_Grid';
        let Table_HeaderDate = '';
        switch (Type) {
            case 'inventory':
                Table_Show = 'RP_Grid';
                Table_Hide = 'RP_StockList_Grid';
                $(".export_ts").hide();
                break;
            case 'reciept':
            case 'export':
                Table_Show = 'RP_StockList_Grid';
                Table_Hide = 'RP_Grid';
                $(".export_ts").hide();
                if (Type == 'reciept') $("#RPS_HeaderDate").html("@Local["Ngày nhập kho"]");
                else $("#RPS_HeaderDate").html("@Local["Ngày xuất kho"]");
                break;
            case 'export_sale':
            case 'export_treat':
                Table_Show = 'RP_StockList_Grid';
                Table_Hide = 'RP_Grid';
                $(".export_ts").show();
                $("#RPS_HeaderDate").html("@Local["Ngày xuất kho"]");
                break;
            default:
        }
        $("#" + Table_Show).removeClass('d-none');
        $("#" + Table_Hide).addClass('d-none');
    }

        //#endregion

</script>


<style>
    #RP_Grid.table-hide-row tr.hide-row, #RP_StockList_Grid.table-hide-row tr.hide-row {
        display: none !important;
    }
</style>