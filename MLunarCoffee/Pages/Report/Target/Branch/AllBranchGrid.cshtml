@page
@model MLunarCoffee.Pages.Report.Target.Branch.AllBranchGridModel
@{
    Layout = null;
}

<script>js_require('/js/comon/initialize_setting.js');</script>

<div class="vtcardheader card-header pb-0 px-0">
    <div class="left">
        <div class="d-flex overflow-auto align-items-center mb-sm-0 gap-2">
            <div class="form-check">
                <input id="TBR_Source" onchange="event.preventDefault();return TBR_Filter();" class="form-check-input pr-2"
                       type="checkbox" checked="checked">
                <label class="custom-control-label">@Local["Nguồn khách hàng"]</label>
            </div>
            <div class="form-check">
                <input id="TBR_SerCat" onchange="event.preventDefault();return TBR_Filter();" class="form-check-input pr-2"
                       type="checkbox">
                <label class="custom-control-label">@Local["Nhóm dịch vụ"]</label>
            </div>
            <div class="form-check">
                <input id="TBR_Gender" onchange="event.preventDefault();return TBR_Filter();" class="form-check-input pr-2"
                       type="checkbox">
                <label class="custom-control-label">@Local["Giới tính"]</label>
            </div>
            <div class="form-check">
                <input id="TBR_Age" onchange="event.preventDefault();return TBR_Filter();" class="form-check-input pr-2"
                       type="checkbox">
                <label class="custom-control-label">@Local["Độ tuổi"]</label>
            </div>
        </div>
    </div>
    <div class="right">
        <div class="icon-hover mx-1"
             data-bs-toggle="tooltip" data-bs-placement="top"
             data-bs-original-title="@Local[" Thu gọn"]">
            <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
               data-bs-toggle="collapse" href="#TBR_GridArea" aria-expanded="true"></i>
        </div>
        <div class="icon-hover mx-1"
             data-bs-toggle="tooltip" data-bs-placement="top"
             data-bs-original-title="@Local[" Tải lại"]">
            <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
               onclick="event.preventDefault(); return TBR_Load()"></i>
        </div>
        <div class="icon-hover mx-1"
             data-bs-toggle="tooltip" data-bs-placement="top"
             data-bs-original-title="@Local[" Xuất excel"]">
            <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
               onclick="event.preventDefault(); return TBR_Export()"></i>
        </div>
    </div>
</div>
<div class="collapsesticky collapse show" id="TBR_GridArea">
    <div class="card-body p-3 px-0 pt-0">
        <div class="m-0 my-3 mobile-responsive">
            <table class="table vt-table mb-0" id="TBR_Grid">
                <thead>
                    <tr role="row">
                        <th rowspan="3">#</th>
                        <th rowspan="3">@Local["Tên"]</th>
                        <th colspan="3">@Local["Doanh số"]</th>
                        <th class="source">@Local["Nguồn"]</th>
                        <th class="sercat">@Local["Nhóm dịch vụ"]</th>
                        <th class="gender">@Local["Giới tính"]</th>
                        <th class="age">@Local["Độ tuổi"]</th>
                    </tr>
                    <tr role="row">
                        <th rowspan="2">@Local["Tổng"]</th>
                        <th rowspan="2">@Local["Khách mới"]</th>
                        <th rowspan="2">@Local["Khách cũ"]</th>
                    </tr>
                    <tr rowspan="2" class="detail" role="row">
                    </tr>
                </thead>
                <tbody id="TBR_GridBody">
                </tbody>
            </table>
        </div>
    </div>
</div>

<div id="TBR_Detail_Branch_Container" style="display:none;">
    <div class="vtcardheader card-header pb-0 px-0">
        <div class="left">
            <p id="TBR_Detail_Branch_Tittle" class="text-md text-dark font-weight-bold mb-0 mt-1"></p>
        </div>
        <div class="right">
            <div class="text-primary fw-bold d-inline mx-2 text-nowrap mt-1">
                <span id="TBR_Detail_Branch_currentData">0</span>
                <span class="mx-2">/</span>
                <span id="TBR_Detail_Branch_totalData">0</span>
            </div>
            <div class="icon-hover mx-1 mt-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local[" Thu gọn"]">
                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                   data-bs-toggle="collapse" href="#TBR_Detail_Branch_DivArea" aria-expanded="true"></i>
            </div>
            <div class="icon-hover mx-1 mt-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local[" In báo cáo"]">
                <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                   onclick="event.preventDefault(); TBR_Detail_Branch_DetailPrintReport()"></i>
            </div>
            <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel">
                <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local[" Xuất excel"]">
                    <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                </div>
                <div class="input-group-text icon-hover w-auto vttech-input-item">
                    <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return TBR_Detail_Branch_ExportDetail(0)">@Local["Tất cả"]</i>
                </div>
                <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                    <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return TBR_Detail_Branch_ExportDetail(1)">@Local["Tùy chọn"]</i>
                </div>
            </div>
            <button class="btn btn-dark btn-sm mt-1 mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                @Local["Xem thêm"]
            </button>
        </div>
        <div class="toggle">
            <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                <ul class="card card-body text-dark text-capitalize opacity-10">
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="doccode" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Mã hồ sơ"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="custoldcode" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Mã khách hàng cũ"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="age" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Tuổi"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="gender" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Giới tính"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="isnew" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Khách hàng mới"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="sercat" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Nhóm dịch vụ"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="type" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Loại"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="source" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Nguồn"]</p>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="collapsesticky collapse show" id="TBR_Detail_Branch_DivArea">
        <div class="card-body p-3 px-0 pt-0">
            <div class="m-0 my-3 mobile-responsive">
                <table data-name="TBR_Detail_Branch_dtContent" class="table vt-table mb-0" id="TBR_Detail_Branch_dtContent">
                    <thead>
                        <tr>
                            <th style="width: 60px">#</th>
                            <th>@Local["Mã khách hàng"]</th>
                            <th data-name="custcodeold">@Local["Mã khách hàng cũ"]</th>
                            <th data-name="doccode">@Local["Mã hồ sơ"]</th>
                            <th>@Local["Khách hàng"]</th>
                            <th data-name="age">@Local["Tuổi"]</th>
                            <th data-name="gender">@Local["Giới tính"]</th>
                            <th data-name="isnew">@Local["Khách hàng mới"]</th>
                            <th>@Local["Thành tiền"]</th>
                            <th>@Local["Phát sinh"]</th>
                            <th>@Local["Thanh toán"]</th>
                            <th>@Local["Công nợ"]</th>
                            <th data-name="type">@Local["Loại"]</th>
                            <th data-name="sercat">@Local["Nhóm dịch vụ"]</th>
                            <th>@Local["Dịch vụ"]</th>
                            <th data-name="source">@Local["Nguồn"]</th>
                            <th>@Local["Chi nhánh"]</th>
                            <th>@Local["Ngày tạo"]</th>
                        </tr>
                    </thead>
                    <tbody id="TBR_Detail_Branch_dtContentBody">
                    </tbody>
                </table>
            </div>
            <button class="btnsysmore btn btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return TBR_Detail_Branch_RenderMore();">
                @Local["Xem thêm"]
            </button>
        </div>

    </div>
</div>


<script type="text/javascript">
    let TBR_Detail_BranchID;
    let TBR_Detail_Branch_shtable;
    let TBR_Detail_Branch_timeoutCount;
    let TBR_Detail_Branch_DataReportMain, TBR_Detail_Branch_DataReportMainSlice;
    let TBR_Detail_Branch_IndexReport = 0;

    $(document).ready(function () {
        TBR_Detail_Branch_shtable = $("#TBR_Detail_Branch_dtContent").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        ToolPopper();
        TBR_Load();
        TBR_MaterEvent();
        Checking_TabControl_Permission();
    });

    function TBR_Load() {
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";
        let _branchID = "@Model._branchID";
        AjaxLoad(url = "/Report/Target/Branch/AllBranchGrid/?handler=Loadata"
            , data = {
                'dateFrom': _dateFrom, 'dateTo': _dateTo,
                'branchID': _branchID
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let datas = JSON.parse(result);
                    let data  = datas["Table"];
                    let data1 = datas["Table1"];
                    let data2 = datas["Table2"];
                    let data3 = datas["Table3"];
                    let data4 = datas["Table4"];
                    $('#TBR_Grid .detail')[0].innerHTML = '';
                    let source_unique = data1.map(item => item.Source).filter((value, index, self) => self.indexOf(value) === index);
                    TBR_RenderSource(source_unique, "TBR_Grid");
                    let cat_unique = data2.map(item => item.ServiceCat).filter((value, index, self) => self.indexOf(value) === index);
                    TBR_RenderSerCat(cat_unique, "TBR_Grid");
                    let gender_unique = data3.map(item => item.Gender).filter((value, index, self) => self.indexOf(value) === index);
                    TBR_RenderGender(gender_unique, "TBR_Grid");
                    let age_unique = data4.map(item => item.BirthArea).filter((value, index, self) => self.indexOf(value) === index);
                    TBR_RenderAge(age_unique, "TBR_Grid");
                    TBR_Render(data, source_unique, cat_unique, gender_unique, age_unique, data1, data2, data3, data4,"TBR_GridBody");
                } else {
                    notiError_SW();
                }
            }
        );
        return false;
    }

    function TBR_MaterEvent() {

        $('#TBR_Grid tbody,#TBR_Grid tfoot').on('click', '.TBR_RowBranch', function () {
            TBR_Detail_BranchID = Number($(this).attr('data-id')) ? Number($(this).attr('data-id')) : 0;
            $("#TBR_Detail_Month_Container").hide();
            $("#TBR_Detail_Branch_Container").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#TBR_Detail_Branch_Container").offset().top
            }, 300);
            let branch = (RP_DataBranch[TBR_Detail_BranchID] != undefined) ? RP_DataBranch[TBR_Detail_BranchID].Name : ''
            if (TBR_Detail_BranchID != 0) {
                $("#TBR_Detail_Branch_Tittle").html(`${Outlang["Sys_doanh_so_chi_nhanh"] ?? 'Doanh số chi nhánh'} ${branch}`);
            }
            else {
                $("#TBR_Detail_Branch_Tittle").html(`${Outlang["Sys_doanh_so_chi_nhanh"] ?? 'Doanh số chi nhánh'} @Local["Tất cả"]`);
            }

            TBR_DetailLoad_ByBranch();
        });
    }

    async function TBR_Render (data, source_unique, cat_unique, gender_unique, age_unique, sourcedata, catdata, genderdata, agedata, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    let trtotal = '';
                    let tamount = 0, tamountnew = 0, tamountold = 0;
                    let tsource = [], tcat = [], tgender = [], tage = [];
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let branch = RP_DataBranch[item.BranchID];
                        tamount = tamount + item.Amount;
                        tamountnew = tamountnew + item.AmountNew;
                        tamountold = tamountold + item.AmountOld;

                        let tr =
                              '<td class="vt-number-order"></td>'
                            + '<td> <a class="TBR_RowBranch text-sm border-bottom border-primary" data-id="' + item.BranchID + '">' + (branch != undefined ? branch.Name : '') + '</a></td>'
                            + '<td>' + formatNumber(item.Amount) + '</td>'
                            + '<td>' + formatNumber(item.AmountNew) + '</td>'
                            + '<td>' + formatNumber(item.AmountOld) + '</td>';
                        for (let j = 0; j < source_unique.length; j++) {
                            let _item = sourcedata.filter(v => v.BranchID === item.BranchID && v.Source === source_unique[j]);
                            let _itemamount = _item[0] != undefined ? _item[0].Amount : 0;
                            tr = tr + '<td class="source">' + formatNumber(_itemamount) + '</td>'
                            tsource[j] = (tsource[j] != undefined ? tsource[j] : 0) + _itemamount;
                        }
                        for (let j = 0; j < cat_unique.length; j++) {
                            let _item = catdata.filter(v => v.BranchID === item.BranchID && v.ServiceCat === cat_unique[j]);
                            let _itemamount = _item[0] != undefined ? _item[0].Amount : 0;
                            tr = tr + '<td class="sercat">' + formatNumber(_itemamount) + '</td>'
                            tcat[j] = (tcat[j] != undefined ? tcat[j] : 0) + _itemamount;
                        }
                        for (let j = 0; j < gender_unique.length; j++) {
                            let _item = genderdata.filter(v => v.BranchID === item.BranchID && v.Gender === gender_unique[j]);
                            let _itemamount = _item[0] != undefined ? _item[0].Amount : 0;
                            tr = tr + '<td class="gender">' + formatNumber(_itemamount) + '</td>'
                            tgender[j] = (tgender[j] != undefined ? tgender[j] : 0) + _itemamount;
                        }
                        for (let j = 0; j < age_unique.length; j++) {
                            let _item = agedata.filter(v => v.BranchID === item.BranchID && v.BirthArea === age_unique[j]);
                            let _itemamount = _item[0] != undefined ? _item[0].Amount : 0;
                            tr = tr + '<td class="age">' + formatNumber(_itemamount) + '</td>'
                            tage[j] = (tage[j] != undefined ? tage[j] : 0) + _itemamount;
                        }
                        stringContent = stringContent + '<tr class="vt-number" role="row">' + tr + '</tr>';
                        if (data.length > 1 && i == data.length - 1) {
                            trtotal =
                                '<td></td>'
                                + '<td><a class="TBR_RowBranch text-sm border-white border-primary text-white" data-id="0">@Local["Tổng"]</a></td>'
                                + '<td>' + formatNumber(tamount) + '</td>'
                                + '<td>' + formatNumber(tamountnew) + '</td>'
                                + '<td>' + formatNumber(tamountold) + '</td>';
                            for (let j = 0; j < tsource.length; j++) {
                                trtotal = trtotal + '<td class="source">' + formatNumber(tsource[j]) + '</td>'
                            }
                            for (let j = 0; j < tcat.length; j++) {
                                trtotal = trtotal + '<td class="sercat">' + formatNumber(tcat[j]) + '</td>'
                            }
                            for (let j = 0; j < tgender.length; j++) {
                                trtotal = trtotal + '<td class="gender">' + formatNumber(tgender[j]) + '</td>'
                            }
                            for (let j = 0; j < tage.length; j++) {
                                trtotal = trtotal + '<td class="age">' + formatNumber(tage[j]) + '</td>'
                            }
                            stringContent = stringContent + '<tr class="text-white bg-gradient bg-primary" role="row">' + trtotal + '</tr>';
                        }


                    }
                }

                document.getElementById(id).innerHTML = stringContent;
            }
            TBR_Filter();
        })
    }

    //#region // RENDER HEADER

    function TBR_RenderSource (data, id) {
        var myNode = $('#' + id + ' .detail')[0];
        var myNodeParent = $('#' + id + ' .source')[0];
        if (myNode != null) {
            let stringContent = '';
            if (data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = RP_DataCustomerSource[data[i]];
                    stringContent = stringContent + `<th class="source">${item != undefined ? item.Name : '@Local["Khác"]'}</th >`;
                }
                myNode.innerHTML = myNode.innerHTML+stringContent;
                myNodeParent.setAttribute("colspan", data.length);
            }
            else myNodeParent.classList.add("d-none");

        }

    }

    function TBR_RenderSerCat (data, id) {
        var myNode = $('#' + id + ' .detail')[0];
        var myNodeParent = $('#' + id + ' .sercat')[0];
        if (myNode != null) {
            let stringContent = '';
            if (data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = RP_DataServiceCat[data[i]];
                    stringContent = stringContent + `<th class="sercat">${item != undefined ? item.Name : '@Local["Khác"]'}</th >`;
                }
                myNode.innerHTML = myNode.innerHTML + stringContent;
                myNodeParent.setAttribute("colspan", data.length);
            }
            else myNodeParent.classList.add("d-none");
        }
    }

    function TBR_RenderGender (data, id) {
        var myNode = $('#' + id + ' .detail')[0];
        var myNodeParent = $('#' + id + ' .gender')[0];
        if (myNode != null) {
            let stringContent = '';
            if (data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    stringContent = stringContent + `<th class="gender">${data[i]}</th >`;
                }
                myNode.innerHTML = myNode.innerHTML + stringContent;
                myNodeParent.setAttribute("colspan", data.length);
            }
            else myNodeParent.classList.add("d-none");

        }

    }

    function TBR_RenderAge (data, id) {
        var myNode = $('#' + id + ' .detail')[0];
        var myNodeParent = $('#' + id + ' .age')[0];
        if (myNode != null) {
            let stringContent = '';
            if (data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    stringContent = stringContent + `<th class="age">${data[i]}</th >`;
                }
                myNode.innerHTML = myNode.innerHTML + stringContent;
                myNodeParent.setAttribute("colspan", data.length);
            }
            else myNodeParent.classList.add("d-none");

        }

    }

    //#endregion

    //#region // Export Filter

    function TBR_Filter () {
        if ($('#TBR_Source').is(":checked")) $('#TBR_Grid .source').removeClass("d-none");
        else $('#TBR_Grid .source').addClass("d-none");
        if ($('#TBR_SerCat').is(":checked")) $('#TBR_Grid .sercat').removeClass("d-none");
        else $('#TBR_Grid .sercat').addClass("d-none");
        if ($('#TBR_Gender').is(":checked")) $('#TBR_Grid .gender').removeClass("d-none");
        else $('#TBR_Grid .gender').addClass("d-none");
        if ($('#TBR_Age').is(":checked")) $('#TBR_Grid .age').removeClass("d-none");
        else $('#TBR_Grid .age').addClass("d-none");
    }

    function TBR_Export () {
        syslog_ExpExcel('e', Outlang["Doanh_so_theo_chi_nhanh"]);
        exportToExcel("TBR_Grid", Outlang["Doanh_so_theo_chi_nhanh"]);
    }

    //#endregion



    //#region //LOADDATA DETAIL

    function TBR_DetailLoad_ByBranch() {
        let _branchID = "@Model._branchID";
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";
        let branchID = (_branchID != 0 && TBR_Detail_BranchID == 0) ? _branchID : TBR_Detail_BranchID;
        $("#TBR_Detail_Branch_dtContentBody").empty();
        TBR_Detail_Branch_IndexReport = 0;
        AjaxLoad(url = "/Report/Target/Branch/AllBranchGrid/?handler=LoadataDetailByBranch"
            , data = {
                'branchID': branchID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    TBR_Detail_Branch_DataReportMain = JSON.parse(JSON.stringify(data));
                    TBR_Detail_Branch_DataReportMainSlice = sliceIntoChunks(data, 500);
                    $("#TBR_Detail_Branch_dtContentBody").empty();
                    fnRenderBlock(TBR_Detail_Branch_DataReportMainSlice[TBR_Detail_Branch_IndexReport], "TBR_Detail_Branch_dtContentBody"
                        , blocknum = 100
                        , fnrender = TBR_Detail_Branch_Render
                        , fnsuccess = null
                    );
                    Count_Up("TBR_Detail_Branch_totalData", TBR_Detail_Branch_DataReportMain.length);
                }
                else {
                    notiError_SW();
                }
            }
        );
    }

    function TBR_Detail_Branch_RenderMore() {
        TBR_Detail_Branch_IndexReport += 1;
        if (TBR_Detail_Branch_DataReportMainSlice && TBR_Detail_Branch_DataReportMainSlice[TBR_Detail_Branch_IndexReport]) {
            fnRenderBlock(TBR_Detail_Branch_DataReportMainSlice[TBR_Detail_Branch_IndexReport], "TBR_Detail_Branch_dtContentBody"
                , blocknum = 100
                , fnrender = TBR_Detail_Branch_Render
                , fnsuccess = null
            );
        }
    }
    //#endregion

    //#region //RENDER DETAIL BRANCH DATA
    async function TBR_Detail_Branch_Render(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let CustYOld = 0;                            
                            if(!item.Birth.includes('1900')){
                                let date = new Date(item.Birth);
                                let dateNow = new Date();
                                CustYOld = (dateNow.getFullYear() - date.getFullYear())
                            }
                            CustYOld = CustYOld > 0 ? CustYOld : '';
                            let tr = `
                                    <tr class="vt-number">
                                        <td class="vt-number-order"></td>
                                        <td>
                                            <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustomerID}&ver=${versionofWebApplication}">${item.CustCode}</a>
                                        </td>
                                        <td data-name="custcodeold">${item.CustOldCode}</td>
                                        <td data-name="doccode">${item.DocCode}</td>
                                        <td>${item.CustName}</td>
                                        <td data-name="age">${CustYOld}</td>
                                        <td data-name="gender">${item.Gender}</td>
                                        <td data-name="isnew" class="text-center">${item.IsNew == 1 ? `<i class="fas fa-check text-success"></i>` : ''}</td>
                                        <td>${formatNumber(item.Amount)}</td>
                                        <td>${formatNumber(item.PriceDiscounted)}</td>
                                        <td>${formatNumber(item.Paid)}</td>
                                        <td>${formatNumber(item.Debt)}</td>
                                        <td data-name="type">${TBR_Detail_Branch_Render_GetType(item.Type)}</td>
                                        <td data-name="sercat">${(RP_DataServiceCat[item.ServiceCat] != undefined) ? RP_DataServiceCat[item.ServiceCat].Name : ''}</td>
                                        <td>${TBR_Detail_Branch_Render_GetName(item.Type, item.Service, item.Medicine, item.Card)}</td>
                                        <td data-name="source">${(RP_DataCustomerSource[item.Source] != undefined) ? RP_DataCustomerSource[item.Source].Name : ''}</td>
                                        <td>${(RP_DataBranch[item.BranchID] != undefined) ? RP_DataBranch[item.BranchID].Name : ''}</td>
                                        <td>${ConvertDateTimeUTC_DMYHM(item.Created)}</td>
                                    </tr>
                                `
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                TBR_Detail_Branch_shtable.Refresh();
                clearTimeout(TBR_Detail_Branch_timeoutCount);
                TBR_Detail_Branch_timeoutCount = setTimeout(() => {
                    Count_Up("TBR_Detail_Branch_currentData", $("#" + id).children().length);
                }, 300)
                resolve();
            }, 10)

        })
    }
    function TBR_Detail_Branch_Render_GetName(type, serid, medid, cardid) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = (RP_DataService[serid] != undefined) ? RP_DataService[serid].Name : ''
                    break;
                case 2:
                    result = (RP_DataCard[cardid] != undefined) ? RP_DataCard[cardid].Name : ''
                    break;
                case 3:
                    result = (RP_DataMedicine[medid] != undefined) ? RP_DataMedicine[medid].Name : ''
                    break;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    function TBR_Detail_Branch_Render_GetType(type) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = decodeHtml('@Local["Dịch vụ/sản phẩm"]')
                    break;
                case 2:
                    result = decodeHtml('@Local["Thẻ trả trước"]')
                    break;
                case 3:
                    result = decodeHtml('@Local["Đơn thuốc"]')
                    break;
                case 4:
                    result = decodeHtml('@Local["Tiền cọc"]')
                    break;

            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    //#endregion


    async function TBR_Detail_Branch_ExportDetail(isOption = 0) {
        try {
            if (TBR_Detail_Branch_DataReportMain && TBR_Detail_Branch_DataReportMain.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#TBR_Detail_Branch_Container');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "CustOldCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='custcodeold']`)).is(":checked"),
                        data: ["@Local["Mã hồ sơ"]"]
                    },
                    "DocCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='doccode']`)).is(":checked"),
                        data: ["@Local["Mã khách hàng cũ"]"]
                    },
                    "Age": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='age']`)).is(":checked"),
                        data: ["@Local["Tuổi"]"]
                    },
                    "Gender": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='gender']`)).is(":checked"),
                        data: ["@Local["Giới tính"]"]
                    },
                    "IsNew": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='isnew']`)).is(":checked"),
                        data: ["@Local["Khách hàng mới"]", (value) => {
                            return value == 1 ? 'x' : '';
                        }]
                    },
                    "Amount": ["@Local["Thành tiền"]"],
                    "PriceDiscounted": ["@Local["Phát sinh"]"],
                    "Paid": ["@Local["Thanh toán"]"],
                    "Debt": ["@Local["Công nợ"]"],
                    "Type": ["@Local["Loại"]", (value, { Type }) => {
                        return TBR_Detail_Branch_Render_GetType(Type);
                    }],
                    "ServiceCat": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='sercat']`)).is(":checked"),
                        data: ["@Local["Nhóm dịch vụ"]", (value) => {
                            return (RP_DataServiceCat[value] != undefined) ? RP_DataServiceCat[value].Name : '';
                        }]
                    },
                    "Service": ["@Local["Dịch vụ"]", (value, { Type, Service, Medicine, Card }) => {
                        return TBR_Detail_Branch_Render_GetName(Type, Service, Medicine, Card);
                    }],
                    "Source": ["@Local["Nguồn"]", (value) => {
                        return (RP_DataCustomerSource[value] != undefined) ? RP_DataCustomerSource[value].Name : '';
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", (value, { BranchID }) => {
                        return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                    }],
                    "Created": ["@Local["Ngày tạo"]", (value) => { return ConvertDateTimeUTC_DMYHM(value) }]
                }
                syslog_ExpExcel('e', Outlang["Sys_doanh_so_chi_nhanh"]);
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'TBR_Detail_Branch_dtContentBody', PermissionTable_TabControl);
                let nameExcel = $("#TBR_Detail_Branch_Tittle").html() || `${Outlang["Sys_doanh_so_chi_nhanh"] ?? '@Local["Doanh số chi tiết"]'}`;
                exportJsonToExcel(nameExcel, TBR_Detail_Branch_DataReportMain, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');

        }
    }


    async function TBR_Detail_Branch_DetailPrintReport() {
        try {
            if (TBR_Detail_Branch_DataReportMain && TBR_Detail_Branch_DataReportMain.length != 0) {
                let _branchID = TBR_Detail_BranchID;
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "CustOldCode": ["@Local["Mã khách hàng cũ"]", {
                        isShow: $(`.shtoogle[data-name='custcodeold']`).is(":checked")
                    }],
                    "DocCode": ["@Local["Mã hồ sơ"]", {
                        isShow: $(`.shtoogle[data-name='doccode']`).is(":checked")
                    }],
                    "Age": ["@Local["Tuổi"]", {
                        isShow: $(`.shtoogle[data-name='age']`).is(":checked")
                    }],
                    "Gender": ["@Local["Giới tính"]", {
                        isShow: $(`.shtoogle[data-name='gender']`).is(":checked")
                    }],
                    "IsNew": ["@Local["Khách hàng mới"]", {
                        callbackRenderValue: (value) => { return value == 1 ? 'x' : ''; }
                        , isShow: $(`.shtoogle[data-name='isnew']`).is(":checked")
                    }],
                    "Amount": ["@Local["Số tiền"]"],
                    "PriceDiscounted": ["@Local["Phát sinh"]"],
                    "Paid": ["@Local["Thanh toán"]"],
                    "Debt": ["@Local["Công nợ"]"],
                    "Type": ["@Local["Loại"]", {
                        callbackRenderValue: (value, { Type }) => {
                            return TBR_Detail_Branch_Render_GetType(Type);
                        }
                    }],
                    "ServiceCat": ["@Local["Nhóm dịch vụ"]", {
                        callbackRenderValue: (value) => {
                            return (RP_DataServiceCat[value] != undefined) ? RP_DataServiceCat[value].Name : '';
                        }
                        , isShow: $(`.shtoogle[data-name='sercat']`).is(":checked")
                    }],
                    "Service": ["@Local["Dịch vụ"]", {
                        callbackRenderValue: (value, { Type, Service, Medicine, Card }) => {
                            return TBR_Detail_Branch_Render_GetName(Type, Service, Medicine, Card);
                        }
                    }],
                    "Source": ["@Local["Nguồn"]", {
                        callbackRenderValue: (value) => {
                            return (RP_DataCustomerSource[value] != undefined) ? RP_DataCustomerSource[value].Name : '';
                        }
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        callbackRenderValue: (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }
                    }],
                    "Created": ["@Local["Ngày tạo"]", {
                        callbackRenderValue: (value) => { return ConvertDateTimeUTC_DMYHM(value) }
                    }]
                };
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let namePrint = $("#TBR_Detail_Branch_Tittle").html() || `${Outlang["Sys_doanh_so_chi_nhanh"] ?? 'excel'}`;
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = namePrint, TBR_Detail_Branch_DataReportMain, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
</script>
