@page
@model Report.Source.SourceGeneral
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>

<div class="card card-plain">
    <div class="vtcardheader card-header pb-0 px-0">
        <div class="left">
            <h6 class="mb-0">@Local["Chi tiết theo nguồn"]</h6>
        </div>
        <div class="right">
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Thu gọn"]">
                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                   data-bs-toggle="collapse" href="#SG_GridArea" aria-expanded="true"></i>
            </div>
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Tải lại"]">
                <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                   onclick="event.preventDefault(); return SG_Load()"></i>
            </div>
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Xuất excel"]">
                <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                   onclick="event.preventDefault(); return SG_Export()"></i>
            </div>
        </div>
    </div>
    <div class="collapsesticky collapse show" id="SG_GridArea">
        <div class="card-body p-0">
            <div class="m-0 my-3 mobile-responsive">
                <table class="table vt-table mb-0" id="SG_Grid">
                    <thead>
                        <tr role="row">
                            <th rowspan="3">#</th>
                            <th colspan="3">@Local["Nguồn"]</th>
                            <th colspan="4">@Local["Số khách/doanh thu"]</th>
                            <th rowspan="2" class="month">@Local["Chi tiết theo tháng"]</th>
                        </tr>
                        <tr role="row">
                            <th rowspan="2">@Local["Nguồn"]</th>
                            <th rowspan="2">@Local["Chi tiết"]</th>
                            <th rowspan="2">@Local["Giới thiệu"]</th>
                            <th rowspan="2">@Local["Số khách"]</th>
                            <th rowspan="2">@Local["Khách mới"]</th>
                            <th rowspan="2">@Local["Khách cũ"]</th>
                            <th rowspan="2">@Local["Doanh thu"]</th>
                        </tr>
                        <tr rowspan="1" class="detail" role="row">
                        </tr>
                    </thead>
                    <tbody id="SG_GridBody">
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</div>
<div id="SGGeneralDetail" style="display:none;">
    <div class="card card-plain">
        <div class="vtcardheader card-header pb-0 px-0">
            <div class="left">
                <p id="SGDetail_Source" class="text-md text-dark font-weight-bold mb-1"></p>
            </div>
            <div class="right">
                <div class="text-primary fw-bold d-inline mx-2 text-nowrap my-auto">
                    <span id="SG_currentdata">0</span>
                    <span class="mx-2">/</span>
                    <span id="SG_totaldata">0</span>
                </div>
                <div class="icon-hover mx-1  my-auto"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Thu gọn"]">
                    <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                       data-bs-toggle="collapse" href="#CustGroupCheckInDetail" aria-expanded="true"></i>
                </div>
                <div class="icon-hover mx-1  my-auto"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["In báo cáo"]">
                    <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); SG_DetailPrintReport()"></i>
                </div>
                <div class="my-auto">
                    <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_  my-auto" data-tab="export_excel">
                        <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Xuất excel"]">
                            <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                        </div>
                        <div class="input-group-text icon-hover w-auto vttech-input-item">
                            <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return SG_ExportDetail(0)">@Local["Tất cả"]</i>
                        </div>
                        <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                            <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return SG_ExportDetail(1)">@Local["Tùy chọn"]</i>
                        </div>
                    </div>
                </div>
                <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle my-auto" data-bs-toggle="collapse" data-bs-target="#colLists">
                    @Local["Xem thêm"]
                </button>
            </div>
            <div class="toggle">
                <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                    <ul class="card card-body text-dark text-capitalize opacity-10">
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="doccode" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Mã hồ sơ"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="custcodeold" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Mã khách hàng cũ"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="SerCreated" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Ngày lên dịch vụ"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="CusCreated" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Ngày tạo hồ sơ"]</p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="collapsesticky collapse show" id="CustGroupCheckInDetail">
            <div class="card-body p-0">
                <div class="m-0 my-3 mobile-responsive">
                    <table data-name="SG_GridDetail" class="table vt-table mb-0" id="SG_GridDetail">
                        <thead>
                            <tr>
                                <th style="width: 60px">#</th>
                                <th>@Local["Mã khách hàng"]</th>
                                <th data-name="custcodeold">@Local["Mã khách hàng cũ"]</th>
                                <th data-name="doccode">@Local["Mã hồ sơ"]</th>
                                <th>@Local["Khách hàng"]</th>
                                <th>@Local["Số tiền"]</th>
                                <th>@Local["Loại"]</th>
                                <th>@Local["Dịch vụ"]</th>
                                <th>@Local["Nguồn"]</th>
                                <th>@Local["Nguồn chi tiết"]</th>
                                <th>@Local["Người giới thiệu"]</th>
                                <th>@Local["Chi nhánh"]</th>
                                <th>@Local["Ngày thanh toán"]</th>
                                <th data-name="SerCreated">@Local["Ngày lên dịch vụ"]</th>
                                <th data-name="CusCreated">@Local["Ngày tạo hồ sơ"]</th>
                            </tr>
                        </thead>
                        <tbody id="SG_GridDetailBody">
                        </tbody>
                    </table>
                </div>
                <button class="btnsysmore btn btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return SG_RenderMore();">
                    @Local["Xem thêm"]
                </button>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    let xhrLoadList, xhrLoadDetail;
    let DataReportMain, DataReportMainSlice;
    let shtable;
    let SCDataMonth = [];
    let SCDataRaw = [];
    let IndexReport = 0;
    let timeoutCount;

    $(document).ready(function () {
        shtable = $("#SG_GridDetail").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        ToolPopper();
        SG_Load();
        Checking_TabControl_Permission();
    });
    function SG_Load() {
        SCDataMonth = [];
        SCDataRaw = [];
        $('#SG_Grid .detail').html('');
        if (xhrLoadList && xhrLoadList.readyState != 4) xhrLoadList.abort();
        let _branchID = "@Model._branchID";
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";
        xhrLoadList = AjaxLoad(url = "/Report/Source/SourceGeneral/?handler=Loadata"
            , data = {
                'branchID': _branchID
                , 'dateFrom': _dateFrom
                , 'dateTo': _dateTo
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "") {
                    let datas = JSON.parse(result);
                    let data = datas["Table"];
                    SCDataRaw = datas["Table1"];
                    SCDataMonth = datas["Table2"];
                    SG_RenderMonth(SCDataMonth, "SG_Grid");
                    SG_Render(data, "SG_GridBody");
                } else {
                    notiError_SW();
                }
            }
        );
        return false;
    }
    function SG_RenderMonth(data, id) {
        var myNode = $('#' + id + ' .detail')[0];
        var myNodeParent = $('#' + id + ' .month')[0];
        if (myNode != null) {
            let stringContent = '';
            if (data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    stringContent = stringContent + `<th class="month">${data[i].Month.substring(4, 6) + ' / ' + data[i].Month.substring(0, 4)}</th >`;
                }
                myNode.innerHTML = myNode.innerHTML + stringContent;
                myNodeParent.setAttribute("colspan", data.length);
            }
            else myNodeParent.classList.add("d-none");

        }

    }
    async function SG_Render(data, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                if (data && data.length > 0) {
                    let tmonth = [];
                    let TotalCust = 0, TotalNew = 0, TotalOld = 0, TotalAmount = 0;
                    let sourcecatname = '', sourcename = '';
                    let sourcecat = -1, source = -1;
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        TotalCust = TotalCust + item.TotalCust;
                        TotalNew = TotalNew + item.TotalNew;
                        TotalOld = TotalOld + item.TotalOld;
                        TotalAmount = TotalAmount + item.TotalAmount;
                        sourcecatname = (RP_DataCustomerSourceCat[item.SourceCatID] != undefined) ? RP_DataCustomerSourceCat[item.SourceCatID].Name : '';
                        sourcename = (RP_DataCustomerSource[item.SourceID] != undefined) ? RP_DataCustomerSource[item.SourceID].Name : '';
                        if (item.SourceCatID != sourcecat) {
                            sourcecat = item.SourceCatID;
                            sourcecatname = `<td rowspan=${item.ChildSource}>
                                                            <a href="#" class="cursor-pointer border-1 border-primary border-bottom buttonViewClass" data-brokerid="0" data-sourcecat="${item.SourceCatID}" data-source="0">
                                                                ${sourcecatname}
                                                            </a>
                                                        </td>`;
                        } else sourcecatname = '';

                        if (item.SourceID != source) {
                            source = item.SourceID;
                            sourcename = `<td rowspan=${item.ChildBroker}>
                                                            <a href="#" class="cursor-pointer border-1 border-primary border-bottom buttonViewClass" data-brokerid="0" data-sourcecat="${item.SourceCatID}" data-source="${item.SourceID}">
                                                                ${sourcename}
                                                            </a>
                                                        </td>`;
                        } else sourcename = '';


                        let tr = `
                                                    <td class="vt-number-order"></td>
                                                    ${sourcecatname}
                                                    ${sourcename}

                                                    <td>
                                                        <a href="#" class="cursor-pointer border-1 border-primary border-bottom buttonViewClass" data-brokerid="${item.BrokerID}" data-sourcecat="${item.SourceCatID}" data-source="${item.SourceID}">
                                                            ${item.BrokerID != 0 ? item.BrokerName : ''}
                                                        </a>
                                                    </td>

                                                    <td>${formatNumber(item.TotalCust)}</td>
                                                    <td>${formatNumber(item.TotalNew)}</td>
                                                    <td>${formatNumber(item.TotalOld)}</td>
                                                    <td>${formatNumber(item.TotalAmount)}</td>`;
                        for (let j = 0; j < SCDataMonth.length; j++) {
                            let _item = SCDataRaw.filter(v => v.SourceCatID === item.SourceCatID
                                && v.SourceID === item.SourceID
                                && v.BrokerID === item.BrokerID
                                && v.MonthCreated == SCDataMonth[j].Month
                            );
                            let sum = _item.map(item => item.TotalAmount).reduce((prev, curr) => prev + curr, 0);
                            tr = tr + '<td class="month">' + formatNumber(sum) + '</td>'
                            tmonth[j] = (tmonth[j] != undefined ? tmonth[j] : 0) + sum;
                        }
                        stringContent = stringContent + '<tr class="vt-number" role="row">' + tr + '</tr>';
                        if (data.length > 1 && i == data.length - 1) {
                            trtotal =
                                '<td></td>'
                                + '<td><a href="#" class="text-white cursor-pointer border-1 border-primary border-bottom buttonViewClass" data-brokerid="0" data-sourcecat="0" data-source="0">@Local["Tất cả"]</a></td>'
                                + '<td></td>'
                                + '<td></td>'
                                + '<td>' + formatNumber(TotalCust) + '</td>'
                                + '<td>' + formatNumber(TotalNew) + '</td>'
                                + '<td>' + formatNumber(TotalOld) + '</td>'
                                + '<td>' + formatNumber(TotalAmount) + '</td>';
                            for (let j = 0; j < tmonth.length; j++) {
                                trtotal = trtotal + '<td class="source">' + formatNumber(tmonth[j]) + '</td>'
                            }
                            stringContent = stringContent + '<tr class="text-white bg-gradient bg-primary" role="row">' + trtotal + '</tr>';
                        }
                    }

                }
                document.getElementById(id).innerHTML = stringContent;
            }
            SG_Event();

        })
    }
    //#region // LOAD DETAIL AND RENDER
    function SG_DetailLoad(sourcecat, source, brokerid) {
        if (xhrLoadDetail && xhrLoadDetail.readyState != 4) xhrLoadDetail.abort();
        let _branchID = "@Model._branchID";
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";
        IndexReport = 0;
        xhrLoadDetail = AjaxLoad(url = "/Report/Source/SourceGeneral/?handler=LoadataDetail"
            , data = {
                'branchID': _branchID,
                'SourceCatID': sourcecat,
                'SourceID': source,
                'BrokerID': brokerid,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    DataReportMain = JSON.parse(JSON.stringify(data));
                    DataReportMainSlice = sliceIntoChunks(data, 500);
                    $("#SG_GridDetailBody").empty();
                    fnRenderBlock(DataReportMainSlice[IndexReport], "SG_GridDetailBody"
                        , blocknum = 100
                        , fnrender = SG_DetailRender
                        , fnsuccess = null
                    );
                    Count_Up("SG_totaldata", DataReportMain.length);
                }
                else {
                    notiError_SW();
                }
            }
        );
    }
    function SG_RenderMore() {
        IndexReport += 1;
        if (DataReportMainSlice && DataReportMainSlice[IndexReport]) {
            fnRenderBlock(DataReportMainSlice[IndexReport], "SG_GridDetailBody"
                , blocknum = 100
                , fnrender = SG_DetailRender
                , fnsuccess = null
            );
        }
    }
    async function SG_DetailRender(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = `
                                <tr class="vt-number">
                                    <td class="vt-number-order"></td>
                                    <td>
                                        <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustomerID}&ver=${versionofWebApplication}">${item.CustCode}</a>
                                    </td>
                                    <td data-name="custcodeold">${item.CustOldCode}</td>
                                    <td data-name="doccode">${item.DocCode}</td>
                                    <td>${item.CustName}</td>
                                    <td>${formatNumber(item.Amount)}</td>
                                    <td>${SG_Render_GetType(item.Type)}</td>
                                    <td>${SG_Render_GetName(item.Type, item.ServiceID, item.MedID, item.CardID)}</td>
                                    <td>${(RP_DataCustomerSourceCat[item.SourceCatID] != undefined) ? RP_DataCustomerSourceCat[item.SourceCatID].Name : ''}</td>
                                    <td>${(RP_DataCustomerSource[item.SourceID] != undefined) ? RP_DataCustomerSource[item.SourceID].Name : ''}</td>
                                    <td>${item.BrokerName}</td>
                                    <td>${(RP_DataBranch[item.BranchID] != undefined) ? RP_DataBranch[item.BranchID].Name : ''}</td>
                                    <td>${ConvertDateTimeUTC_DMYHM(item.Created)}</td>
                                    <td data-name="SerCreated">${!item.SerCreated.includes('1900') ? ConvertDateTimeUTC_DMY(item.SerCreated) : ''}</td>
                                    <td data-name="CusCreated">${ConvertDateTimeUTC_DMY(item.CusCreated)}</td>
                                </tr>
                                `
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                shtable.Refresh();
                clearTimeout(timeoutCount);
                timeoutCount = setTimeout(() => {
                    Count_Up("SG_currentdata", $("#" + id).children().length);
                }, 300)
                resolve();
            }, 10)

        })
    }
    //#endregion
    //#region // Event
    function SG_Render_GetName(type, serid, medid, cardid) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = (RP_DataService[serid] != undefined) ? RP_DataService[serid].Name : ''
                    break;
                case 3:
                    result = (RP_DataMedicine[medid] != undefined) ? RP_DataMedicine[medid].Name : ''
                    break;
                case 4:
                    result = (RP_DataCard[cardid] != undefined) ? RP_DataCard[cardid].Name : ''
                    break;

            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    function SG_Render_GetType(type) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = decodeHtml('@Local["Dịch vụ/sản phẩm"]')
                    break;
                case 2:
                    result = decodeHtml('@Local["Tiền cọc"]')
                    break;
                case 3:
                    result = decodeHtml('@Local["Đơn thuốc"]')
                    break;
                case 4:
                    result = decodeHtml('@Local["Thẻ trả trước"]')
                    break;

            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }


    function SG_Event() {
        $("#SG_GridBody .buttonViewClass").unbind('click').on("click", function () {
            let sourcecat = $(this).attr('data-sourcecat');
            let source = $(this).attr('data-source');
            let brokerid = $(this).attr('data-brokerid');
            let brokername = $(this).attr('data-brokername');

            $("#SGGeneralDetail").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#SGGeneralDetail").offset().top
            }, 300);
            if (sourcecat == "0" && source == "0" && brokerid == "0") {
                $("#SGDetail_Source").html('@Local["Tất cả nguồn"]');
            }
            else {
                if (sourcecat == "0" && source != "0" && brokerid == "0")
                    $("#SGDetail_Source").html((RP_DataCustomerSource[source] != undefined) ? RP_DataCustomerSource[source].Name : '');
                else if (sourcecat == "0" && source != "0" && brokerid == "0")
                    $("#SGDetail_Source").html((RP_DataCustomerSourceCat[sourcecat] != undefined) ? RP_DataCustomerSourceCat[sourcecat].Name : '');
                else if (sourcecat == "0" && source == "0" && brokerid != "0")
                    $("#SGDetail_Source").html(brokername);

            }

            SG_DetailLoad(sourcecat, source, brokerid);
        })
    }
    function SG_Export () {
        syslog_ExpExcel('e', Outlang["Doanh_thu_theo_nguon"]);
        exportToExcel("SG_Grid", Outlang["Doanh_thu_theo_nguon"]);
    }
    async function SG_ExportDetail(isOption = 0) {
        try {
            if (DataReportMain && DataReportMain.length != 0) {

                let isAll = (isOption == 0);
                let eleContainer = $('#SGGeneralDetail');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "CustOldCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='custcodeold']`)).is(":checked"),
                        data: ["@Local["Mã khách hàng cũ"]"]
                    },
                    "DocCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='doccode']`)).is(":checked"),
                        data: ["@Local["Mã hồ sơ"]"]
                    },
                    "Amount": ["@Local["Số tiền"]"],
                    "Type": ["@Local["Loại"]", (value, { Type }) => {
                        return SG_Render_GetType(Type);
                    }],
                    "Service": ["@Local["Dịch vụ"]", (value, { Type, ServiceID, MedID, CardID }) => {
                        return SG_Render_GetName(Type, ServiceID, MedID, CardID);
                    }],
                    "Source": ["@Local["Nguồn"]", (value, { SourceCatID }) => {
                        return (RP_DataCustomerSourceCat[SourceCatID] != undefined) ? RP_DataCustomerSourceCat[SourceCatID].Name : '';
                    }],
                    "SourceDetail": ["@Local["Nguồn chi tiết"]", (value, { SourceID }) => {
                        return (RP_DataCustomerSource[SourceID] != undefined) ? RP_DataCustomerSource[SourceID].Name : '';
                    }],
                    "BrokerName": ["@Local["Người giới thiệu"]"],
                    "BranchID": ["@Local["Chi nhánh"]", (value, { BranchID }) => {
                        return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                    }],
                    "Created": ["@Local["Ngày thanh toán"]", (value) => {return ConvertDateTimeUTC_DMYHM(value)}]
                    , "SerCreated": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='SerCreated']`)).is(":checked"),
                        data: ["@Local["Ngày lên dịch vụ"]", (value) => {return (!value.includes('1900') ? ConvertDateTimeUTC_DMY(value) : '')}]
                    }
                    , "CusCreated": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='CusCreated']`)).is(":checked"),
                        data: ["@Local["Ngày tạo hồ sơ"]", (value) => {return ConvertDateTimeUTC_DMY(value)}]
                    }
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'SG_GridDetailBody', PermissionTable_TabControl);
                syslog_ExpExcel('e', Outlang["Nguon_chi_tiet"]);
                exportJsonToExcel(Outlang["Nguon_chi_tiet"], DataReportMain, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }

    async function SG_DetailPrintReport() {
        try {
            if (DataReportMain && DataReportMain.length != 0) {
                let _branchID = "@Model._branchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "CustOldCode": ["@Local["Mã khách hàng cũ"]", {
                        isShow: $(`.shtoogle[data-name='custcodeold']`).is(":checked")
                    }],
                    "DocCode": ["@Local["Mã hồ sơ"]", {
                        isShow: $(`.shtoogle[data-name='doccode']`).is(":checked")
                    }],
                    "Amount": ["@Local["Số tiền"]"],
                    "Type": ["@Local["Loại"]", {
                        callbackRenderValue: (value, { Type }) => {
                            return SG_Render_GetType(Type);
                        }
                    }],
                    "Service": ["@Local["Dịch vụ"]", {
                        callbackRenderValue: (value, { Type, ServiceID, MedID, CardID }) => {
                            return SG_Render_GetName(Type, ServiceID, MedID, CardID);
                        }
                    }],
                    "Source": ["@Local["Nguồn"]", {
                        callbackRenderValue: (value, { SourceCatID }) => {
                            return (RP_DataCustomerSourceCat[SourceCatID] != undefined) ? RP_DataCustomerSourceCat[SourceCatID].Name : '';
                        }
                    }],
                    "SourceDetail": ["@Local["Nguồn chi tiết"]", {
                        callbackRenderValue: (value, { SourceID }) => {
                            return (RP_DataCustomerSource[SourceID] != undefined) ? RP_DataCustomerSource[SourceID].Name : '';
                        }
                    }],
                    "BrokerName": ["@Local["Người giới thiệu"]"],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        callbackRenderValue: (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }
                    }],
                    "Created": ["@Local["Ngày thanh toán"]", {
                        callbackRenderValue: (value) => { return ConvertDateTimeUTC_DMYHM(value) }
                    }]
                    , "SerCreated": ["@Local["Ngày lên dịch vụ"]", {
                        isShow: $(`.shtoogle[data-name='SerCreated']`).is(":checked"),
                        callbackRenderValue: (value) => {return (!value.includes('1900') ? ConvertDateTimeUTC_DMY(value) : '')}
                    }]
                    , "CusCreated": ["@Local["Ngày tạo hồ sơ"]", {
                        isShow: $(`.shtoogle[data-name='CusCreated']`).is(":checked"),
                        callbackRenderValue: (value) => { return ConvertDateTimeUTC_DMY(value)}
                    }]
                };
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = Outlang["Nguon_chi_tiet"], DataReportMain, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
                                //#endregion

</script>
