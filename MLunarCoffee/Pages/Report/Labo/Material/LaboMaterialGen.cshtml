@page
@model MLunarCoffee.Pages.Report.Labo.Material.MaterialLaboGeneral
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<div class="collapsesticky collapse show" id="LMG_General">
    <div class="vtcardheader card-header pb-0 px-0">    
    <div class="right">
        <div class="icon-hover mx-1"
             data-bs-toggle="tooltip" data-bs-placement="top"
             data-bs-original-title="@Local["Thu gọn"]">
            <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
               data-bs-toggle="collapse" href="#LMG_GeneralDiv" aria-expanded="true"></i>
        </div>
        <div class="icon-hover mx-1"
             data-bs-toggle="tooltip" data-bs-placement="top"
             data-bs-original-title="@Local["Tải lại"]">
            <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
               onclick="event.preventDefault(); return LMG_LoadData()"></i>
        </div>
        <div class="icon-hover mx-1"
             data-bs-toggle="tooltip" data-bs-placement="top"
             data-bs-original-title="@Local["Xuất excel"]">
            <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
               onclick="event.preventDefault(); return LMG_Export()"></i>
        </div>
    </div> 
</div>
    <div class="card-body p-0 pt-0 collapsesticky collapse show" id=LMG_GeneralDiv>
        <div class="m-0 my-3 mobile-responsive">
            <div id="LMG_LoaderList" class="waitingdiv text-center w-100 mt-2 position-absolute start-50 translate-middle-x" style="display:none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <table class="table vt-table mb-0" id="LMG_Grid">
                <thead>
                    <tr>
                        <th style="width: 60px">#</th>
                        <th>@Local["Loại"]</th>
                        <th>@Local["Tổng tiền"]</th>
                        <th>@Local["Tổng răng"]</th>
                    </tr>
                </thead>
                <tbody id="LMG_GridBody">
                </tbody>
            </table>
        </div>
    </div>
</div>
<div id="LMD_Container" class="mt-3" style="display:none;">
    <div class="vtcardheader card-header pb-0 px-0">
        <div class="left">
            <p id="LMD_Title" class="text-md text-dark font-weight-bold mb-1"></p>
        </div>
        <div class="right">
            <div class="wrap">
                <div class="wrapblock">
                    <div class="text-primary fw-bold d-inline mx-2 text-nowrap mt-1">
                        <span id="LMD_CurrentData">0</span>
                        <span class="mx-2">/</span>
                        <span id="LMD_TotalData">0</span>
                    </div>
                    <div class="icon-hover mx-1 mt-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["Thu gọn"]">
                        <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                           data-bs-toggle="collapse" href="#LMD_DivArea" aria-expanded="true"></i>
                    </div>
                    <div class="icon-hover mx-1 mt-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["Tải lại"]">
                        <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                           onclick="event.preventDefault(); return LMD_Loaddata()"></i>
                    </div>
                    <div class="icon-hover mx-1 mt-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["In báo cáo"]">
                        <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                           onclick="event.preventDefault(); LMD_PrintReport()"></i>
                    </div>
                    <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel">
                        <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Xuất excel"]">
                            <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                        </div>
                        <div class="input-group-text icon-hover w-auto vttech-input-item">
                            <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return LMD_Export(0)">@Local["Tất cả"]</i>
                        </div>
                        <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                            <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return LMD_Export(1)">@Local["Tùy chọn"]</i>
                        </div>
                    </div>
                    <button class="btn btn-dark btn-sm mt-1 mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                        @Local["Xem thêm"]
                    </button>
                </div> 
            </div>
        </div>
        <div class="toggle">
            <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                <ul class="card card-body text-dark text-capitalize opacity-10">
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="colorteeth" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Màu răng"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="dimension" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Kích thước"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="properties" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Thuộc tính"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="labocode" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Mã labo"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="branch" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Chi nhánh"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="doctor" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Bác sĩ"]</p>
                    </li>
                </ul>
            </div> 
        </div>
    </div>
    <div class="collapsesticky collapse show" id="LMD_DivArea">
        <div class="card-body p-0 pt-0">
            <div class="m-0 my-3 mobile-responsive vt-header-sticky">
                <div id="LMD_LoaderList" class="waitingdiv text-center w-100 mt-2 position-absolute start-50 translate-middle-x" style="display:none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
                <table data-name="LMD_Grid" class="table vt-table mb-0" id="LMD_Grid">
                    <thead>
                        <tr>
                            <th style="width: 60px">#</th>
                            <th style="min-width: 200px">@Local["Mã khách hàng"]</th>
                            <th style="min-width: 200px">@Local["Khách hàng"]</th>
                            <th style="min-width: 200px" data-name="labocode">@Local["Mã labo"]</th>
                            <th style="min-width: 200px">@Local["Loại"]</th>
                            <th style="min-width: 200px">@Local["Dáng răng"]</th>
                            <th style="min-width: 200px">@Local["Đơn giá"]</th>
                            <th style="min-width: 200px">@Local["Răng"]</th>
                            <th style="min-width: 200px" data-name="colorteeth">@Local["Màu răng"]</th>
                            <th style="min-width: 200px" data-name="dimension">@Local["Kích thước"]</th>
                            <th style="min-width: 200px" data-name="properties">@Local["Thuộc tính"]</th>
                            <th style="min-width: 200px" data-name="branch">@Local["Chi nhánh"]</th>
                            <th style="min-width: 200px" data-name="doctor">@Local["Bác sĩ"]</th>
                        </tr>
                    </thead>
                    <tbody id="LMD_GridBody">
                    </tbody>
                </table>
            </div>
            <button class="btn btnsysmore btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return LMD_RenderMore();">
                @Local["Xem thêm"]
            </button>
        </div>

    </div>
</div>
<script type="text/javascript">
    let _branchID = "@Model._branchID";
    let _dateFrom = "@Model._dateFrom";
    let _dateTo = "@Model._dateTo";
    let xhrLoadList, xhrLoadDetail;
    let DataReportMainDetail, DataReportMainDetailSlice;
    let IndexReportDetail = 0;
    let timeoutCountDetail;
    let LMG_MaterialID = 0;
    let shtableDetail;
    $(document).ready(function () {
        ToolPopper();
        LMG_LoadData();
        shtableDetail = $("#LMD_Grid").TableExpandColumn({
            shtoogle: $('.shtoogleDetail')
        });
        Checking_TabControl_Permission();
    });
    function LMG_LoadData() {
        if (xhrLoadList && xhrLoadList.readyState != 4) xhrLoadList.abort();
        xhrLoadList = AjaxLoad(url = "/Report/Labo/Material/LaboMaterialGen/?handler=Loadata"
            , data = {
                'branchID': _branchID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    $("#LMG_GridBody").empty();
                    LMG_Render(data, "LMG_GridBody");
                }
            }
            , sender = null
            , before = function (e) {
                $("#LMG_LoaderList").show();
            }
            , complete = function (e) {
                $("#LMG_LoaderList").hide();
            }
        );
        return false;
    }

    async function LMG_Render(data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            if (data && data.length != 0) {
                let tr = '';
                let TotalUnitPrice = 0, TotalTeeth = 0;
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    //calc total
                    TotalUnitPrice += item.TotalUnitPrice;
                    TotalTeeth += item.TotalTeeth;
                    tr = `<tr class="vt-number" role="row">
                                    <td class="vt-number-order"></td>
                                    <td>
                                        <a href="#" class="border-1 border-primary border-bottom buttonViewClass mb-0 text-sm fw-bold" data-id="${item.MaterialID}">
                                            ${item.MaterialID == 0 ? '@Local["Không có Loại"]' : item.Material}
                                        </a>
                                    </td>
                                    <td>${formatNumber(item.TotalUnitPrice)}</td>
                                    <td>${formatNumber(item.TotalTeeth)}</td>
                                </tr>`;
                    myNode.insertAdjacentHTML('beforeend', tr);
                }
                tr = `<tr class="vt-number text-white bg-gradient bg-primary mt-2 LMG_RowTotal" role="row">
                                <td></td>
                                <td class="text-start">
                                    <a href="#" class="border-1 border-white border-bottom buttonViewClass text-white" data-id="-1">@Local["Tất cả"]</a>
                                </td>
                                <td>${formatNumber(TotalUnitPrice)}</td>
                                <td>${formatNumber(TotalTeeth)}</td>
                            </tr>`;
                myNode.insertAdjacentHTML('beforeend', tr);
                LMG_GeneralEvent();
            }
        }
    }

    function LMG_Render_GetName(data, id) {
        try {
            let result = '';
            if (data && data[id] != undefined) {
                result = data[id].Name;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    //#region // LOAD DETAIL AND RENDER
    function LMD_Loaddata() {
        if (xhrLoadDetail && xhrLoadDetail.readyState != 4) xhrLoadDetail.abort();
        IndexReportDetail = 0;
        xhrLoadDetail = AjaxLoad(url = "/Report/Labo/Material/LaboMaterialGen/?handler=LoadataDetail"
            , data = {
                'branchID': _branchID,
                'MaterialID': LMG_MaterialID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    DataReportMainDetail = JSON.parse(JSON.stringify(data));
                    DataReportMainDetailSlice = sliceIntoChunks(data, 500);
                    $("#LMD_GridBody").empty();
                    if (DataReportMainDetailSlice && DataReportMainDetailSlice.length != 0) {
                        fnRenderBlock(DataReportMainDetailSlice[IndexReportDetail], "LMD_GridBody"
                            , blocknum = 100
                            , fnrender = LMD_Render
                            , fnsuccess = null
                        );
                    }
                    Count_Up("LMD_TotalData", DataReportMainDetail.length);
                }
                else if (result == "0") {
                    notiWarning();
                }
            }
            , sender = null
            , before = function (e) {
                $("#LMD_LoaderList").show();
            }
            , complete = function (e) {
                $("#LMD_LoaderList").hide();
            }
        );
    }

    function LMD_RenderMore() {
        IndexReportDetail += 1;
        if (DataReportMainDetailSlice && DataReportMainDetailSlice[IndexReportDetail]) {
            fnRenderBlock(DataReportMainDetailSlice[IndexReportDetail], "LMD_GridBody"
                , blocknum = 100
                , fnrender = LMD_Render
                , fnsuccess = null
            );
        }
    }

    async function LMD_Render(data, id) {        
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        let countGroupEmp = -1, countGroupLab = -1;
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let Rowspan = 1;
                            let currentCustCode = data[i + 1] != undefined ? data[i + 1].CustCode : '';
                            //if(currentCustCode == item.CustCode) Rowspan += 1;
                            //else Rowspan = 0;
                            let tr = `
                                        <tr class="vt-number" role="row">
                                            <td class="vt-number-order"></td>
                                            <td rowspan=${Rowspan}>
                                                <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustID}&ver=${versionofWebApplication}">
                                                        ${item.CustCode}
                                                </a>
                                            </td>
                                            <td rowspan=${Rowspan}>${item.CustName}</td>
                                            <td data-name="labocode" rowspan=${Rowspan}>${item.LaboCode}</td>
                                            <td rowspan=${Rowspan}>${item.Material}</td>
                                            <td rowspan=${Rowspan}>${item.TeethLayout}</td>
                                            <td>${formatNumber(item.UnitPrice)}</td>
                                            <td>${item.Teeth}</td>
                                            <td data-name="colorteeth">
                                                    <div style="background:${item.Color}" class="text-success rounded">
                                                    ${item.ColorName}
                                                <div>
                                            </td>
                                            <td data-name="dimension">${item.Dimension}</td>
                                            <td data-name="properties">${item.Properties}</td>
                                            <td data-name="branch">${(RP_DataBranch[item.BranchID] != undefined ? RP_DataBranch[item.BranchID].Name : '')}</td>
                                            <td data-name="doctor">${(RP_DataEmployee[item.Doctor_ID] != undefined ? RP_DataEmployee[item.Doctor_ID].Name : '')}</td>
                                        </td>

                                    `
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                shtableDetail.Refresh();
                clearTimeout(timeoutCountDetail);
                timeoutCountDetail = setTimeout(() => {
                    Count_Up("LMD_CurrentData", $("#" + id).children().length);
                }, 300)
                resolve();
            }, 10)
        })
    }
    //#endregion

    //#region // Event
    function LMG_GeneralEvent() {
        $("#LMG_GridBody .buttonViewClass").unbind('click').on("click", function () {
            LMG_MaterialID = $(this).attr('data-id');
            $("#LMD_Container").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#LMD_Container").offset().top
            }, 300);
            if (LMG_MaterialID == "0") {
                $("#LMD_Title").html('@Local["Không có loại"]');
            }
            else {
                $("#LMD_Title").html(LMG_Render_GetName(RP_DataEmployee, LMG_MaterialID));
            }
            LMD_Loaddata();
        })
    }

    function LMG_Export () {
        syslog_ExpExcel('e', Outlang["Bao_cao_loai_labo"]);
        exportToExcel("LMG_Grid", Outlang["Bao_cao_loai_labo"]);
    }

    async function LMD_Export(isOption = 0) {
        try {
            if (DataReportMainDetail && DataReportMainDetail.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#LMD_Container');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }],
                    "Material": ["@Local["Loại"]"],
                    "LaboCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='labocode']`)).is(":checked"),
                        data: ["@Local["Mã labo"]"]
                    },
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "UnitPrice": ["@Local["Đơn giá"]"],
                    "Teeth": ["@Local["Chi tiết"]"],
                    "BranchID": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='branch']`)).is(":checked"),
                        data: ["@Local["Chi nhánh"]", (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }]
                    },
                    "Doctor_ID": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='doctor']`)).is(":checked"),
                        data: ["@Local["Bác sĩ"]", (value, { Doctor_ID }) => {
                            return (RP_DataEmployee[Doctor_ID] != undefined) ? RP_DataEmployee[Doctor_ID].Name : '';
                        }]
                    },                    
                    "Color": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='colorteeth']`)).is(":checked"),
                        data: ["@Local["Màu"]"]
                    },
                    "Dimension": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='dimension']`)).is(":checked"),
                        data: ["@Local["Kích thước"]"]
                    },
                    "Properties": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='properties']`)).is(":checked"),
                        data: ["@Local["Thuộc tính"]"]
                    },
                    "TeethLayout": ["@Local["Dáng răng"]"],
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'LMD_GridBody', PermissionTable_TabControl);
                let fileName = Outlang["Bao_cao_loai_labo"] + '-' + xoa_dau($("#LMD_Title").text()).replaceAll(' ', '-');
                syslog_ExpExcel('e', fileName);
                exportJsonToExcel(fileName, DataReportMainDetail, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }
    async function LMD_PrintReport() {
        try {
            if (DataReportMainDetail && DataReportMainDetail.length != 0) {
                let _branchID = "@Model._branchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";                
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "Material": ["@Local["Loại"]"],
                    "LaboCode": ["@Local["Mã labo"]", {
                        isShow: $(`.shtoogleDetail[data-name='labocode']`).is(":checked"),
                    }],
                    "UnitPrice": ["@Local["Đơn giá"]"],
                    "Teeth": ["@Local["Chi tiết"]"],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        isShow: $(`.shtoogleDetail[data-name='branch']`).is(":checked"),
                        callbackRenderValue: (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }
                    }],
                    "Doctor_ID": ["@Local["Bác sĩ"]", {
                        isShow: $(`.shtoogleDetail[data-name='doctor']`).is(":checked"),
                        callbackRenderValue: (value, { Doctor_ID }) => {
                            return (RP_DataEmployee[Doctor_ID] != undefined) ? RP_DataEmployee[Doctor_ID].Name : '';
                        }
                    }],                    
                    "Color": ["@Local["Màu"]", {
                        isShow: $(`.shtoogleDetail[data-name='colorteeth']`).is(":checked"),
                    }],
                    "Dimension": ["@Local["Kích thước"]", {
                        isShow: $(`.shtoogleDetail[data-name='dimension']`).is(":checked"),
                    }],
                    "Properties": ["@Local["Thuộc tính"]", {
                        isShow: $(`.shtoogleDetail[data-name='properties']`).is(":checked"),
                    }],
                    "TeethLayout": ["@Local["Dáng răng"]"],
                }
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let fileName = Outlang["Bao_cao_loai_labo"] ?? 'VTTech_PrintForm' + ' ' + $("#LMD_Title").text();
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = fileName, DataReportMainDetail, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
            //#endregion

</script>


