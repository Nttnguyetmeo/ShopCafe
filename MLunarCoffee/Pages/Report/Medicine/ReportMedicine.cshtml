@page
@model MLunarCoffee.Pages.Report.Medicine.ReportMedicineModel
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<div id="RMed_MasterContainer pb-3">
    <div class="card card-plain">
        <div class="vtcardheader card-header pb-0 px-0">
            <div class="right">
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Thu gọn"]">
                    <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                       data-bs-toggle="collapse" href="#RMed_MasterGridArea" aria-expanded="true"></i>
                </div>
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Tải lại"]">
                    <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); return RMed_LoadData()"></i>
                </div>
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Xuất excel"]">
                    <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                       onclick="event.preventDefault(); return RMed_MasterExport()"></i>
                </div>
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["In báo cáo"]">
                    <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); RMed_MasterPrint()"></i>
                </div>
            </div>
        </div>
        <div class="collapsesticky collapse show" id="RMed_MasterGridArea">
            <div class="card-body p-0 pt-3">
                <div class="m-0 my-0 mobile-responsive vt-header-sticky">
                    <table data-name="RMed_MasterGrid" class="table vt-table mb-0" id="RMed_MasterGrid">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th class="d-none">ID</th>
                                <th>@Local["Mã sản phẩm"]</th>
                                <th>@Local["Sản phẩm"]</th>
                                <th>@Local["Số lượng kiểm kê"]</th>
                                <th>@Local["Đơn vị"]</th>
                                <th>@Local["Đơn giá trung bình"]</th>
                                <th>@Local["Thành tiền"]</th>
                                <th>@Local["Số đơn thuốc"]</th>
                            </tr>
                        </thead>
                        <tbody id="RMed_MasterGridBody">
                        </tbody>
                        <tfoot id="RMed_MasterGridFooter">
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="RMed_DetailContainer" style="display:none;">
    <div id="RMed_DetailProduct">
        <div class="card card-plain">
            <div class="vtcardheader card-header pb-0 px-0">
                <div class="left">
                    <p id="RMed_NameProduct" class="text-md text-dark font-weight-bold mb-0 mt-1"></p>
                </div>
                <div class="right">
                    <div class="wrap">
                        <div class="wrapblock">
                            <div class="text-primary fw-bold d-inline me-2 text-nowrap mt-1">
                                <span id="RMed_currentdata">0</span>
                                <span class="mx-2">/</span>
                                <span id="RMed_totaldata">0</span>
                            </div>
                            <div class="icon-hover mx-1 mt-1"
                                    data-bs-toggle="tooltip" data-bs-placement="top"
                                    data-bs-original-title="@Local["Thu gọn"]">
                                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                                    data-bs-toggle="collapse" href="#RMed_MedGridArea" aria-expanded="true"></i>
                            </div>
                            <div class="icon-hover mx-1 mt-1"
                                    data-bs-toggle="tooltip" data-bs-placement="top"
                                    data-bs-original-title="@Local["Tải lại"]">
                                <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                                    onclick="event.preventDefault(); return RMed_MedLoadData()"></i>
                            </div>
                            <div class="icon-hover mx-1 mt-1" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="@Local["In báo cáo"]">
                                <i class="vtt-icon vttech-icon-print text-lg text-primary" onclick="RMed_MedPrint()"></i>
                            </div>
                            <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel" data-checkper="1">
                                <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="@Local["Xuất excel"]">
                                    <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                                </div>
                                <div class="input-group-text icon-hover w-auto vttech-input-item">
                                    <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return RMed_MedExport(0)">@Local["Tất cả"]</i>
                                </div>
                                <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                                    <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return RMed_MedExport(1)">@Local["Tùy chọn"]</i>
                                </div>
                            </div>
                            <button class="btn btn-dark btn-sm mt-1 mb-0 position-relative dropdown-toggle collapsed" data-bs-toggle="collapse" data-bs-target="#colListsMed" aria-expanded="false">
                                @Local["Xem thêm"]
                            </button> 
                        </div>
                    </div>
                </div>
                <div class="toggle">
                    <div class="position-absolute z-index-3 end-1 top-100 mt-2 collapse" id="colListsMed" style="min-width: 250px;">
                        <ul class="card card-body text-dark text-capitalize opacity-10">
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogleMed form-check-input" data-name="seller" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Bán thuốc"] (@Local["Nhân viên"])</p>
                            </li>
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogleMed form-check-input" data-name="doctor" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Bác sĩ kê toa"]</p>
                            </li>
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogleMed form-check-input" data-name="createdby" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Người kê toa"]</p>
                            </li>
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogleMed form-check-input" data-name="created" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Ngày tạo"]</p>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card-body pt-3 px-0">
                <div class="vtcardheader card-header p-0 border-0">
                    <div class="left pe-2">
                        <div class="vtcondition">
                            <a class="sign" data-open="Hiển thị" data-close="Thu gọn" data-bs-toggle="collapse" aria-expanded="true"></a>
                            <div class="fulllap collapse collapsesticky show">
                                <div class="d-lg-flex">
                                    <div class="input-group py-1 p-lg-0 pe-lg-2" id="searchApp">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input id="RMed_txtFilter" type="text" class="form-control" placeholder="eg .@Local["Tìm kiếm"] (@Local["Mã"], @Local["Tên"])">
                                        <div class="input-group-text" id="RMed_AreaBtnSearch">
                                            <i class="btn_clear fas fa-minus-circle opacity-1"></i>
                                            <div class="spinner-border spinner-border-sm d-none"></div>
                                        </div>
                                        <div class="input-group-text p-0">
                                            <div class="position-relative d-inline px-2">
                                                <a class="cursor-pointer px-2" data-bs-toggle="collapse" role="tab" data-bs-target="#colsearch" aria-expanded="true">
                                                    <i class=" text-gradient text-primary fas fa-filter"></i>
                                                </a>
                                                <div class="collapsesticky position-absolute z-index-3 end-1 top-100 mt-1 collapse" id="colsearch" style="min-width: 285px; left: -244.344px;">
                                                    <div class="card card-body text-dark text-capitalize opacity-10">
                                                        <div class="col-12 mt-2">
                                                            <div class="ui fluid search selection dropdown form-control" id="RMed_SellerID">
                                                                <input type="hidden" name="branch" />
                                                                <input class="search" autocomplete="off" tabindex="0" />
                                                                <div class="default text">eg .@Local["Bán thuốc"] (@Local["Nhân viên"])</div>
                                                                <div id="RMed_cbbSellerID" class="menu" tabindex="-1">
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-12 mt-2">
                                                            <div class="ui fluid search selection dropdown form-control" id="RMed_DocID">
                                                                <input type="hidden" name="branch" />
                                                                <input class="search" autocomplete="off" tabindex="0" />
                                                                <div class="default text">eg .@Local["Bác sĩ kê toa"]</div>
                                                                <div id="RMed_cbbDocID" class="menu" tabindex="-1">
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-12 mt-2">
                                                            <div class="ui fluid search selection dropdown form-control" id="RMed_CreatedID">
                                                                <input type="hidden" name="branch" />
                                                                <input class="search" autocomplete="off" tabindex="0" />
                                                                <div class="default text">eg .@Local["Người kê toa"]</div>
                                                                <div id="RMed_cbbCreatedID" class="menu" tabindex="-1">
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-12 mt-2">
                                                            <div class="ui fluid search selection dropdown form-control" id="RMed_DebtID">
                                                                <i class="remove icon"></i><i class="dropdown icon"></i>
                                                                <input type="hidden" name="branch" value="0">
                                                                <input class="search" autocomplete="off" tabindex="0">
                                                                <div class="text">Người tạo</div>
                                                                <div id="RMed_cbbDebtID" class="menu transition hidden" tabindex="-1">
                                                                <div class="item active" data-value="0">@Local["Công nợ"]</div>
                                                                <div class="item" data-value="1">@Local["Có công nợ"]</div>
                                                                <div class="item" data-value="2">@Local["Không"]</div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <button class="btn btn-dark btn-sm mt-3 mb-2" onclick="RMed_CloseFilter()">@Local["Đóng"]</button>
                                                        <button class="btn btn-primary btn-sm" onclick="RMed_Fillter()">@Local["Ok"]</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="right overflow-x">
                        <div class="row mx-0 d-flex flex-shrink-0 gap-3 mb-0">
                            <div class="col-w-200 border border-5 border-bottom-0 border-top-0 border-end-0 border-success py-1 bg-gray-100 rounded-2 border-radius-top-start-0 border-radius-bottom-start-0">
                                <p class="text-sm pb-0 mb-0 text-secondary fst-italic">@Local["Phát sinh"]</p>
                                <h6 id="RMed_TotalTarget" class="font-weight-bolder mb-0">0</h6>
                            </div>
                            <div class="col-w-200 border border-5 border-bottom-0 border-top-0 border-end-0 border-warning py-1 bg-gray-100 rounded-2 border-radius-top-start-0 border-radius-bottom-start-0">
                                <p class="text-sm pb-0 mb-0 text-secondary fst-italic">@Local["Thanh toán"]</p>
                                <h6 id="RMed_TotalPayment" class="font-weight-bolder mb-0"></h6>
                            </div>
                            <div class="col-w-200 border border-5 border-bottom-0 border-top-0 border-end-0 border-danger py-1 bg-gray-100 rounded-2 border-radius-top-start-0 border-radius-bottom-start-0">
                                <p class="text-sm pb-0 mb-0 text-secondary fst-italic">@Local["Công nợ"]</p>
                                <h6 id="RMed_TotalLeft" class="font-weight-bolder mb-0"></h6>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="collapsesticky collapse show" id="RMed_MedGridArea">
                    <div class="m-0 mt-3 mobile-responsive vt-header-sticky">
                        <table data-name="RMed_MedGrid" class="table vt-table mb-0" id="RMed_MedGrid">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th class="d-none">ID</th>
                                    <th>@Local["Khách hàng"]</th>
                                    <th>@Local["Mã đơn thuốc"]</th>
                                    <th>@Local["Tên đơn thuốc"]</th>
                                    <th>@Local["Chi nhánh"]</th>
                                    <th>@Local["Nguồn dịch vụ"]</th>
                                    <th data-name="seller">@Local["Bán thuốc"] (@Local["Nhân viên"])</th>
                                    <th data-name="doctor">@Local["Bác sĩ kê toa"]</th>
                                    <th data-name="createdby">@Local["Người kê toa"]</th>
                                    <th data-name="created">@Local["Ngày tạo"]</th>
                                    <th>@Local["Chẩn đoán"]</th>
                                    <th>@Local["Phát sinh"]</th>
                                    <th>@Local["Thanh toán"]</th>
                                    <th>@Local["Công nợ"]</th>
                                </tr>
                            </thead>
                            <tbody id="RMed_MedGridBody">
                            </tbody>
                        </table>
                    </div>
                    <button class="btnsysmore btn btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return RMed_MedRenderMore();">
                        @Local["Xem thêm"]
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="RMed_MedicineDetail" style="display:none;">
        <div class="card card-plain">
            <div class="vtcardheader card-header pb-0 px-0 pt-0">
                <div class="left">
                    <p id="RMed_NameMedicine" class="text-md text-dark font-weight-bold mb-1"></p>
                </div>
                <div class="right">
                    <div class="icon-hover mx-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["Xuất excel"]">
                        <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                           onclick="event.preventDefault(); return RMed_DetailExport()"></i>
                    </div>
                    <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                        @Local["Xem thêm"]
                    </button>
                </div>
                <div class="toggle">
                    <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                        <ul class="card card-body text-dark text-capitalize opacity-10">
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogle form-check-input" data-name="detailpres" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Kê toa"]</p>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="collapsesticky collapse show">
                <div class="card-body p-0">
                    <div class="m-0 my-3 mobile-responsive vt-header-sticky">
                        <table class="table vt-table mb-0" id="RMed_GridDetail">
                            <thead>
                                <tr>
                                    <th rowspan="2">#</th>
                                    <th rowspan="2">@Local["Tên thuốc"]</th>
                                    <th rowspan="2">@Local["Đơn giá"]</th>
                                    <th rowspan="2">@Local["Số lượng"]</th>
                                    <th rowspan="2">@Local["Đơn vị"]</th>
                                    <th rowspan="1" colspan="3" data-name="detailpres">@Local["Kê toa"]</th>
                                    <th rowspan="2">@Local["Đơn vị kiểm kê"]</th>
                                    <th rowspan="2">@Local["Sáng"]</th>
                                    <th rowspan="2">@Local["Trưa"]</th>
                                    <th rowspan="2">@Local["Tối"]</th>
                                </tr>
                                <tr>
                                    <th rowspan="1" data-name="detailpres">@Local["Tên thuốc"]</th>
                                    <th rowspan="1" data-name="detailpres">@Local["Số lượng"]</th>
                                    <th rowspan="1" data-name="detailpres">@Local["Đơn vị"]</th>
                                </tr>
                            </thead>
                            <tbody id="RMed_GridDetailBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    let _branchID = "@Model._BranchID";
    let _dateFrom = "@Model._dateFrom";
    let _dateTo = "@Model._dateTo";
    let xhrLoadProduct, xhrLoadMed, xhrLoadDetail;
    let RMed_DataMaster = [];

    let RMed_MedDataMain = [];
    let RMed_MedDataSlice;
    let RMed_MedIndexReport = 0;
    let RMed_MedTimeOut;
    let TotalQuantity = 0, TotalAvgPrice = 0, TotalAmount = 0, TotalCase = 0;
    let shtable, shtablemed;
    let RMed_Timer;
    $(document).ready(function () {
        shtable = $("#RMed_GridDetail").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        shtablemed = $("#RMed_MedGrid").TableExpandColumn({
            shtoogle: $('.shtoogleMed')
        });
        let dataEmp = Object.values(RP_DataEmployee);
        Load_Combo(dataEmp, "RMed_cbbSellerID", false, '@Local["Bán hàng"]');
        $("#RMed_SellerID").dropdown("refresh");
        $("#RMed_SellerID").dropdown("set selected", "0");

        Load_Combo(dataEmp, "RMed_cbbCreatedID", false, '@Local["Người tạo"]');
        $("#RMed_CreatedID").dropdown("refresh");
        $("#RMed_CreatedID").dropdown("set selected", "0");

        let dataDoc = dataEmp.filter(e => e.GroupID == 14);

        Load_Combo(dataDoc, "RMed_cbbDocID", false, '@Local["Bác sĩ kê toa"]');
        $("#RMed_DocID").dropdown("refresh");
        $("#RMed_DocID").dropdown("set selected", "0");
        RMed_LoadData();
    })
    //#region //LOADDATA
    function RMed_LoadData() {
        if (xhrLoadProduct && xhrLoadProduct.readyState != 4) xhrLoadProduct.abort();
        RMed_DataMaster = [];
        TotalQuantity = 0, TotalAvgPrice = 0, TotalAmount = 0, TotalCase = 0;
        $("#RMed_MasterGridBody").empty("");
        $('#RMed_MasterGridFooter').empty("");
        xhrLoadProduct = AjaxLoad(url = "/Report/Medicine/ReportMedicine/?handler=LoadData"
            , data = {
                'BranchID': _branchID
                , 'dateFrom': _dateFrom
                , 'dateTo': _dateTo
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    if (data && data.length > 0) {
                        RMed_DataMaster = [...data];
                        fnRenderBlock(data, "RMed_MasterGridBody"
                            , blocknum = 100
                            , fnrender = RMed_RenderMaster
                            , fnsuccess = null
                        );
                    }
                }
                else {
                    notiError_SW();
                }
            }
        );
    }
    //#endregion

    //#region //RENDER
    async function RMed_RenderMaster(data, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                if (data && data.length != 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        TotalQuantity += item.TotalQuantity;
                        TotalAvgPrice += Number(item.TotalAvgPrice.toFixed(2));
                        TotalAmount += Number(item.TotalAmount.toFixed(2));
                        TotalCase += item.TotalCase;
                        let tr =
                            `<td class="vt-number-order"></td>
                            <td class="d-none">${item.ID}</td>
                            <td class="">
                                <a class="border-1 border-primary border-bottom buttonViewDetail" data-id="${item.ID}" data-code="${item.Code}">${item.Code}</a>
                            </td>
                            <td>${item.Name}</td>
                            <td>${formatNumber(item.TotalQuantity)}</td>
                            <td>${item.Unit}</td>
                            <td>${formatNumber((item.TotalAvgPrice).toFixed(2))}</td>
                            <td>${formatNumber((item.TotalAmount).toFixed(2))}</td>
                            <td>${formatNumber(item.TotalCase)}</td>
                            `
                        tr = `<tr class="vt-number" role="row">${tr}</tr>`;
                        myNode.insertAdjacentHTML('beforeend', tr);
                        if(i == data.length - 1) {

                            let tr =
                                `<td></td>
                                <td class="d-none">0</td>
                                <td class="">
                                    <a class="border-1 border-white text-white border-bottom buttonViewDetail" data-id="0" data-code="@Local["Tất cả"]">@Local["Tất cả"]</a>
                                </td>
                                <td>-</td>
                                <td>${formatNumber(TotalQuantity)}</td>
                                <td>-</td>
                                <td>${formatNumber(TotalAvgPrice.toFixed(2))}</td>
                                <td>${formatNumber(TotalAmount.toFixed(2))}</td>
                                <td>${formatNumber(TotalCase)}</td>
                                `
                            tr = `<tr class="text-white bg-primary" role="row">${tr}</tr>`;
                            $('#RMed_MasterGridFooter').html(tr);
                        }
                    }
                    RMed_Event();
                }
            }
            resolve();

        })
    }
    //#endregion

    //#region //EVENT
    function RMed_Event () {
        $("#RMed_MasterGrid .buttonViewDetail").unbind("click").click(function () {

            let ID = $(this).attr('data-id');
            let Code = $(this).attr('data-code');

            $("#RMed_MedicineDetail").hide();
            $("#RMed_DetailContainer").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#RMed_DetailContainer").offset().top
            }, 300);
            $("#RMed_NameProduct").html(Code);

            RMed_LoadMed(ID);
        })
    }
    //#endregion

    //#region //LOADMED
    function RMed_LoadMed (id) {
        if (xhrLoadMed && xhrLoadMed.readyState != 4) xhrLoadMed.abort();
        let _branchID = "@Model._BranchID";
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";

        RMed_MedIndexReport = 0;
        RMed_MedDataMain = [];
        $("#RMed_MedGridBody").empty();

        $("#RMed_SellerID").dropdown("refresh");
        $("#RMed_SellerID").dropdown("set selected", "0");

        $("#RMed_CreatedID").dropdown("refresh");
        $("#RMed_CreatedID").dropdown("set selected", "0");

        $("#RMed_DocID").dropdown("refresh");
        $("#RMed_DocID").dropdown("set selected", "0");

        $("#RMed_DebtID").dropdown("refresh");
        $("#RMed_DebtID").dropdown("set selected", "0");

        xhrLoadMed = AjaxLoad(url = "/Report/Medicine/ReportMedicine/?handler=LoadMed"
            , data = {
                'BranchID': _branchID
                , 'dateFrom': _dateFrom
                , 'dateTo': _dateTo
                , 'ProductID': id
            }
            , async = true
            , error = function () {notiError_SW();}
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    if (data && data.length != 0) {
                        RMed_LoadTotal(data);
                        RMed_MedDataMain = JSON.parse(JSON.stringify(data));
                        RMed_MedDataSlice = sliceIntoChunks(JSON.parse(result), 500);
                        fnRenderBlock(RMed_MedDataSlice[RMed_MedIndexReport], "RMed_MedGridBody"
                            , blocknum = 100
                            , fnrender = RMed_MedRender
                            , fnsuccess = null
                        );
                        Count_Up("RMed_totaldata", data.length);
                    }
                }
                else {
                    notiError_SW();
                }
            }
        );
        return false;
    }

    async function RMed_LoadTotal(data) {
        new Promise(resolve => {
            let totalPrice = 0, totalAmount = 0, totalDemand = 0;
            if (data && data.length > 0) {
                for (let i = 0; i < data.length; i++) {
                    totalPrice += data[i].MedPrice;
                    totalAmount += data[i].MedAmount;
                }
            }
            totalDemand = Number(totalPrice) - Number(totalAmount);
            Count_Up("RMed_TotalTarget", totalPrice, 1);
            Count_Up("RMed_TotalPayment", totalAmount, 1);
            Count_Up("RMed_TotalLeft", totalDemand, 1);
            resolve();
        })
    }

    function RMed_MedRenderMore () {
        RMed_MedIndexReport += 1;
        if (RMed_MedDataSlice && RMed_MedDataSlice[RMed_MedIndexReport]) {
            fnRenderBlock(RMed_MedDataSlice[RMed_MedIndexReport], "RMed_MedGridBody"
                , blocknum = 100
                , fnrender = RMed_MedRender
                , fnsuccess = null
            );
        }
    }

    //#endregion


    //#region //RENDER MED
    async function RMed_MedRender (data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr =
                                `<td class="vt-number-order"></td>
                                <td class="d-none">${item.ID}</td>
                                <td>
                                    <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CusID}&ver=${versionofWebApplication}">
                                        ${item.CusCode} ${item.CustOldCode != '' ? `<span class="text-secondary text-sm ps-1">${item.CustOldCode}</span>` :''}
                                    </a><br/>
                                    <span>${item.CusName}</span>
                                </td>
                                <td class=""><a class="border-1 border-primary border-bottom buttonViewMed" data-id="${item.ID}" data-code="${item.MedCode}">${item.MedCode}</a></td>
                                <td>${item.MedName}</td>
                                <td>${item.BranchName}</td>
                                <td>${item.SourceName}</td>
                                <td data-name="seller">${Fun_GetName_ByID(RP_DataEmployee, item.SellerID) }</td>
                                <td data-name="doctor">${Fun_GetName_ByID(RP_DataEmployee, item.DocID) }</td>
                                <td data-name="createdby">${Fun_GetName_ByID(RP_DataEmployee, item.CreatedBy) }</td>
                                <td data-name="created">${ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(item.Created))}</td>
                                <td>${item.Diagnosis}</td>
                                <td>${formatNumber(item.MedPrice)}</td>
                                <td>${formatNumber(item.MedAmount)}</td>
                                <td>${formatNumber(item.MedPrice - item.MedAmount)}</td>
                                `
                            tr = `<tr class="vt-number" role="row">${tr}</tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }

                        clearTimeout(RMed_MedTimeOut);
                        RMed_MedTimeOut = setTimeout(() => {
                            Count_Up("RMed_currentdata", $("#" + id).children().length);
                        })
                    }
                    shtablemed.Refresh();
                    RMed_MedEvent();
                }
            }, 100);
            resolve();
        })
    }

    //#endregion

    //#region //EVENT MED

    function RMed_MedEvent () {
        $("#RMed_MedGridBody .buttonViewMed").unbind("click").click(function () {
            let ID = $(this).attr('data-id');
            let Code = $(this).attr('data-code');

            $("#RMed_MedicineDetail").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#RMed_MedicineDetail").offset().top
            }, 300);
            $("#RMed_NameMedicine").html(Code);

            RMed_DetailLoad(ID);
        })

        $("#RMed_txtFilter").on("keyup", function () {
            clearTimeout(RMed_Timer);
            $("#RMed_AreaBtnSearch .btn_clear").addClass('d-none');
            $("#RMed_AreaBtnSearch .spinner-border").removeClass('d-none');
            RMed_Timer = setTimeout(() => {
                RMed_Fillter();
            }, 500);
        })

        $("#RMed_AreaBtnSearch .btn_clear").on("click", function () {
            $("#RMed_txtFilter").val("");
            RMed_Fillter();
        })
    }

    function RMed_CloseFilter() {
        $('#colsearch').collapse('hide');
    }

    function RMed_Fillter() {
        if (RMed_MedDataMain && RMed_MedDataMain.length > 0) {
            let _Dt = [...RMed_MedDataMain];
            let sellerID = $("#RMed_SellerID").dropdown("get value") ? Number($("#RMed_SellerID").dropdown("get value")) : 0;
            let docID = $("#RMed_DocID").dropdown("get value") ? Number($("#RMed_DocID").dropdown("get value")) : 0;
            let createdBy = $("#RMed_CreatedID").dropdown("get value") ? Number($("#RMed_CreatedID").dropdown("get value")) : 0;
            let debtid = $("#RMed_DebtID").dropdown("get value") ? Number($("#RMed_DebtID").dropdown("get value")) : 0;
            let SearchText = $("#RMed_txtFilter").val() ? xoa_dau($("#RMed_txtFilter").val()).toLowerCase().trim() : '';

            if (sellerID != 0) {
                _Dt = _Dt.filter((item) => { return (item?.SellerID ?? -1) == sellerID });
            }
            if (docID != 0) {
                _Dt = _Dt.filter((item) => { return (item?.DocID ?? -1) == docID });
            }
            if (createdBy != 0) {
                _Dt = _Dt.filter((item) => { return (item?.CreatedBy ?? -1) == createdBy });
            }

            if (debtid != 0) {
                _Dt = _Dt.filter((item) => {
                    let debt = Number(item?.MedPrice ?? 0) - Number(item?.MedAmount ?? 0);
                    return (debtid == 1 && debt > 0) || (debtid == 2 && debt <= 0)
                 });
            }
            if (SearchText != '' && SearchText.length > 3) {
                _Dt = _Dt.filter((item) => {
                    return ((xoa_dau(item["CusCode"])).toLowerCase().trim().includes(SearchText)
                        || (xoa_dau(item["CusName"])).toLowerCase().trim().includes(SearchText)
                        || (xoa_dau(item["MedCode"])).toLowerCase().trim().includes(SearchText)
                        || (xoa_dau(item["MedName"])).toLowerCase().trim().includes(SearchText)

                    )
                })
            }
            $("#RMed_AreaBtnSearch .btn_clear").removeClass('d-none');
            $("#RMed_AreaBtnSearch .spinner-border").addClass('d-none');
            if (SearchText == '' || SearchText.length > 3) {
                RMed_MedIndexReport = 0;
                $("#RMed_MedGridBody").empty();
                Count_Up("RMed_totaldata", _Dt.length);
                $("#RMed_currentdata").html(0);
                RMed_LoadTotal(_Dt);
                RMed_MedDataSlice = sliceIntoChunks(_Dt, 500);
                if (RMed_MedDataSlice && RMed_MedDataSlice[RMed_MedIndexReport]) {
                    fnRenderBlock(RMed_MedDataSlice[RMed_MedIndexReport], "RMed_MedGridBody"
                        , blocknum = 100
                        , fnrender = RMed_MedRender
                        , fnsuccess = null
                    );
                }


            }
        }
    }

    //#endregion

    //#region //Detail Medicine

    function RMed_DetailLoad (ID) {
        if (xhrLoadDetail && xhrLoadDetail.readyState != 4) xhrLoadDetail.abort();

        $("#RMed_GridDetailBody").empty("");
        xhrLoadDetail = AjaxLoad(url = "/Report/Medicine/ReportMedicine/?handler=LoadataDetail"
            , data = {
                'ID': ID
            }
            , async = true
            , error = function () {notiError_SW();}
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    if (data && data.length > 0) {
                        fnRenderBlock(data, "RMed_GridDetailBody"
                            , blocknum = 100
                            , fnrender = RMed_DetailRender
                            , fnsuccess = null
                        );
                    }
                }
                else {
                    notiError_SW();
                }
            }
        );
    }

    async function RMed_DetailRender (data, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                if (data && data.length != 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let tr = `
                                <tr class="vt-number">
                                    <td class="vt-number-order"></td>
                                    <td>${item.ProductName}</td>
                                    <td>${formatNumber(item.Price)}</td>
                                    <td>${item.Quantity}</td>
                                    <td>${item.UnitName}</td>
                                    <td data-name="detailpres">${item.PresMedicineName}</td>
                                    <td data-name="detailpres">${item.PresQuantity}</td>
                                    <td data-name="detailpres">${item.PresUnitName}</td>
                                    <td>${item.UnitInventory}</td>
                                    <td>${item.Dosage1}</td>
                                    <td>${item.Dosage2}</td>
                                    <td>${item.Dosage3}</td>
                                </tr>
                                `
                        myNode.insertAdjacentHTML('beforeend', tr);
                    }
                }
                shtable.Refresh();
            }
            resolve();

        })
    }

    //#endregion

    //#region // Export - Print

    function RMed_MasterExport() {
        try {
            if (RMed_DataMaster && RMed_DataMaster.length != 0) {
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }]
                    , "Code": ["@Local["Mã sản phẩm"]"]
                    , "Name": ["@Local["Sản phẩm"]"]
                    , "TotalQuantity": ["@Local["Số lượng kiểm kê"]"]
                    , "Unit": ["@Local["Đơn vị"]"]
                    , "TotalAvgPrice": ["@Local["Đơn giá trung bình"]"]
                    , "TotalAmount": ["@Local["Thành tiền"]"]
                    , "TotalCase": ["@Local["Số đơn thuốc"]"]
                }
                syslog_ExpExcel('e', Outlang["Thuoc"]);
                exportJsonToExcel((Outlang["Thuoc"] != undefined ? Outlang["Thuoc"] : "Thuốc"), RMed_DataMaster, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }

    async function RMed_MasterPrint() {
        try {
            let dataRoot = RMed_DataMaster;
            if (dataRoot && dataRoot.length != 0) {
                let _branchID = "@Model._BranchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, idx) => { return idx + 1 }
                    }]
                    , "Code": ["@Local["Mã sản phẩm"]"]
                    , "Name": ["@Local["Sản phẩm"]"]
                    , "TotalQuantity": ["@Local["Số lượng kiểm kê"]", {
                        callbackRenderValue: (value) => { return formatNumber(value) }
                        , isTotalFooter: true
                    }]
                    , "Unit": ["@Local["Đơn vị"]"]
                    , "TotalAvgPrice": ["@Local["Đơn giá trung bình"]", {
                        callbackRenderValue: (value) => { return formatNumber(Number(value.toFixed(2))) }
                        , isTotalFooter: true
                    }]
                    , "TotalAmount": ["@Local["Thành tiền"]", {
                        callbackRenderValue: (value) => { return formatNumber(Number(value.toFixed(2))) }
                        , isTotalFooter: true
                    }]
                    , "TotalCase": ["@Local["Số đơn thuốc"]", {
                        callbackRenderValue: (value) => { return formatNumber(value) }
                        , isTotalFooter: true
                    }]
                };
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = '@Local["Thuốc"]', dataRoot, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }

    function RMed_MedExport(isOption = 0) {
        try {
            if (RMed_MedDataMain && RMed_MedDataMain.length != 0) {

                let isAll = (isOption == 0);
                let eleContainer = $('#RMed_MedGridArea');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }]
                    , "CusCode": ["@Local["Mã khách hàng"]"]
                    , "CustOldCode": ["@Local["Mã khách hàng cũ"]"]
                    , "CusName": ["@Local["Tên khách hàng"]"]
                    , "MedCode": ["@Local["Mã đơn thuốc"]"]
                    , "MedName": ["@Local["Tên đơn thuốc"]"]
                    , "BranchName": ["@Local["Chi nhánh"]"]
                    , "SourceName": ["@Local["Nguồn dịch vụ"]"]
                    , "SellerID": {
                        isShow: isAll || (eleContainer.find(`.shtoogleMed[data-name='seller']`)).is(":checked"),
                        data: ["@Local["Bán thuốc"]", (v) => { return Fun_GetName_ByID(RP_DataEmployee, v) }]
                    }
                    , "DocID": {
                        isShow: isAll || (eleContainer.find(`.shtoogleMed[data-name='doctor']`)).is(":checked"),
                        data: ["@Local["Bác sĩ kê toa"]", (v) => { return Fun_GetName_ByID(RP_DataEmployee, v) }]
                    }
                    , "CreatedBy": {
                        isShow: isAll || (eleContainer.find(`.shtoogleMed[data-name='createdby']`)).is(":checked"),
                        data: ["@Local["Người kê toa"]", (v) => { return Fun_GetName_ByID(RP_DataEmployee, v) }]
                    }
                    , "Created": {
                        isShow: isAll || (eleContainer.find(`.shtoogleMed[data-name='created']`)).is(":checked"),
                        data: ["@Local["Ngày tạo"]", (v) => { return ConvertDateTimeUTC_DMY(v) }]
                    }
                    , "Diagnosis": ["@Local["Chẩn đoán"]"]
                    , "MedPrice": ["@Local["Phát sinh"]"]
                    , "MedAmount": ["@Local["Thanh toán"]"]
                    , "AmountLeft": ["@Local["Còn lại"]", (v, { MedPrice, MedAmount }) => { return Number(MedPrice) - Number(MedAmount) }]
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'RMed_MedGrid', PermissionTable_TabControl);
                syslog_ExpExcel('e', Outlang["Sys_don_thuoc_khach_hang"]);
                exportJsonToExcel((Outlang["Sys_don_thuoc_khach_hang"] != undefined ? Outlang["Sys_don_thuoc_khach_hang"] : "Đơn thuốc khách hàng"), RMed_MedDataMain, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }

    async function RMed_MedPrint() {
        try {
            let dataRoot = RMed_MedDataMain;
            if (dataRoot && dataRoot.length != 0) {
                let _branchID = "@Model._BranchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, idx) => { return idx + 1 }
                    }]
                    , "CusCode": ["@Local["Mã khách hàng"]"]
                    , "CustOldCode": ["@Local["Mã khách hàng cũ"]"]
                    , "CusName": ["@Local["Tên khách hàng"]"]
                    , "MedCode": ["@Local["Mã đơn thuốc"]"]
                    , "MedName": ["@Local["Tên đơn thuốc"]"]
                    , "BranchName": ["@Local["Chi nhánh"]"]
                    , "SourceName": ["@Local["Nguồn dịch vụ"]"]
                    , "SellerID": ["@Local["Bán thuốc"]", {
                        isShow: $(`.shtoogleMed[data-name='seller']`).is(":checked"),
                        callbackRenderValue: (v) => { return Fun_GetName_ByID(RP_DataEmployee, v) }
                    }]
                    , "DocID": ["@Local["Bác sĩ kê toa"]", {
                        isShow: $(`.shtoogleMed[data-name='doctor']`).is(":checked"),
                        callbackRenderValue: (v) => { return Fun_GetName_ByID(RP_DataEmployee, v) }
                    }]
                    , "CreatedBy": ["@Local["Người kê toa"]", {
                        isShow: $(`.shtoogleMed[data-name='createdby']`).is(":checked"),
                        callbackRenderValue: (v) => { return Fun_GetName_ByID(RP_DataEmployee, v) }
                    }]
                    , "Created": ["@Local["Ngày tạo"]", {
                        isShow: $(`.shtoogleMed[data-name='created']`).is(":checked"),
                        callbackRenderValue: (v) => { return ConvertDateTimeUTC_DMY(v) }
                    }]
                    , "Diagnosis": ["@Local["Chẩn đoán"]"]
                    , "MedPrice": ["@Local["Phát sinh"]"]
                    , "MedAmount": ["@Local["Thanh toán"]"]
                    , "AmountLeft": ["@Local["Còn lại"]", {
                        callbackRenderValue: (v, { MedPrice, MedAmount }) => { return Number(MedPrice) - Number(MedAmount) }
                    }],
                };
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = '@Local["Đơn thuốc khách hàng"]', dataRoot, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }

    async function RMed_DetailExport () {
        let fileName = xoa_dau($("#RMed_NameMedicine").text()).replaceAll(' ', '-');
        syslog_ExpExcel('e', fileName);
        await exportToExcel("RMed_GridDetail", fileName);
    }
        //#endregion


</script>