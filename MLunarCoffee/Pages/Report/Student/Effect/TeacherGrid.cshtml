@page
@model MLunarCoffee.Pages.Report.Student.Effect.TeacherGridModel
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<div class="collapsesticky collapse show" id="SETeacher_General">
    <div class="vtcardheader card-header pb-0 px-0">
        <div class="right">
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Thu gọn"]">
                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                   data-bs-toggle="collapse" href="#SETeacher_GeneralDiv" aria-expanded="true"></i>
            </div>
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Tải lại"]">
                <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                   onclick="event.preventDefault(); return SETeacher_LoadData()"></i>
            </div>
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Xuất excel"]">
                <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                   onclick="event.preventDefault(); return SETeacher_Export()"></i>
            </div>
        </div> 
    </div>
    <div class="card-body p-0 pt-0 collapsesticky collapse show" id=SETeacher_GeneralDiv>
        <div class="m-0 my-3 mobile-responsive">
            <div id="SETeacher_LoaderList" class="waitingdiv text-center w-100 mt-2 position-absolute start-50 translate-middle-x" style="display:none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <table class="table vt-table mb-0" id="SETeacher_Grid">
                <thead>
                    <tr role="row">
                        <th rowspan="2">#</th>
                        <th rowspan="2">@Local["Giảng viên"]</th>
                        <th rowspan="1" colspan="2">@Local["Thời gian lý thuyết"]</th>
                        <th rowspan="1" colspan="2">@Local["Thời gian thực tế"]</th>
                        <th rowspan="1" colspan="2">@Local["Hiệu suất hoàn thành"] (%)</th>
                        <th rowspan="1" colspan="2">@Local["Doanh số"]</th>
                        <th rowspan="1" colspan="2">@Local["Doanh thu"]</th>
                    </tr>
                    <tr role="row">
                        <th>@Local["Số buổi"]</th>
                        <th>@Local["Giờ"]</th>
                        <th>@Local["Số buổi"]</th>
                        <th>@Local["Giờ"]</th>
                        <th>@Local["Theo số buổi"]</th>
                        <th>@Local["Theo số giờ"]</th>
                        <th>@Local["Số lượng học viên"]</th>
                        <th>@Local["Phát sinh"]</th>
                        <th>@Local["Số lượng học viên"]</th>
                        <th>@Local["Thanh toán"]</th>
                    </tr>
                </thead>
                <tbody id="SETeacher_GridBody">
                </tbody>
            </table>
        </div>
    </div>
</div>
<div id="SETeacherDetail_TeachingContainer" class="mt-3" style="display:none;">
    <div class="d-flex align-items-center mb-sm-0 mb-4 overflow-x">
        <div class="form-check">
            <input id="target" name="SETeacherTab" value="0" class="SETeacherTab form-check-input pr-2 cursor-pointer" type="radio" checked="checked">
            <label class="custom-control-label cursor-pointer text-nowrap" for="target">@Local["Hiệu quả làm việc"]</label>
        </div>
        <div class="form-check ms-3">
            <input id="revenue" name="SETeacherTab" value="1" class="SETeacherTab form-check-input pr-2 cursor-pointer" type="radio">
            <label class="custom-control-label cursor-pointer text-nowrap" for="revenue">@Local["Hiệu quả tài chính"]</label>
        </div>
    </div>
    <div id="SETeacherDetail_TabDetail">
        <div id="SETeacherDetail_LoaderList" class="waitingdiv text-center w-100 mt-2 position-absolute start-50 translate-middle-x" style="display:none;">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div id="SETeacherDetail_TeachingDetail">
            <div class="vtcardheader card-header p-0">
                <div class="left d-sm-flex">
                    <p id="SETeacherDetail_TeachingTitle" class="text-md text-dark font-weight-bold mb-1 d-none"></p>
                    <div class="ms-n3 ps-1 me-3">
                        <div class="ui dropdown text-dark fw-bold text-sm border-0" id="SET_Teaching_TeacherID">
                            <input type="hidden" />
                            <div class="default text">eg .@Local["Giảng viên"]</div>
                            <div id="cbbSET_Teaching_TeacherID" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                    <div class="ms-n3 ps-1">
                        <div class="ui dropdown text-dark fw-bold text-sm border-0" id="SET_Teaching_CourseID">
                            <input type="hidden" />
                            <div class="default text">eg .@Local["Khóa học"]</div>
                            <div id="cbbSET_Teaching_CourseID" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="right">
                    <div class="wrap">
                        <div class="wrapblock">
                            <div class="text-primary fw-bold d-inline mx-2 text-nowrap mt-1">
                                <span id="SETeacherDetail_TeachingCurrentData">0</span>
                                <span class="mx-2">/</span>
                                <span id="SETeacherDetail_TeachingTotalData">0</span>
                            </div>
                            <div class="icon-hover mx-1 mt-1"
                                 data-bs-toggle="tooltip" data-bs-placement="top"
                                 data-bs-original-title="@Local["Thu gọn"]">
                                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                                   data-bs-toggle="collapse" href="#SETeacherDetail_TeachingDivArea" aria-expanded="true"></i>
                            </div>
                            <div class="icon-hover mx-1 mt-1"
                                 data-bs-toggle="tooltip" data-bs-placement="top"
                                 data-bs-original-title="@Local["Tải lại"]">
                                <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                                   onclick="event.preventDefault(); return SETeacherDetail_Loaddata()"></i>
                            </div>
                            <div class="icon-hover mx-1 mt-1"
                                 data-bs-toggle="tooltip" data-bs-placement="top"
                                 data-bs-original-title="@Local["In báo cáo"]">
                                <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                                   onclick="event.preventDefault(); SETeacherDetail_TeachingPrintReport()"></i>
                            </div>
                            <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel">
                                <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                                     data-bs-toggle="tooltip" data-bs-placement="top"
                                     data-bs-original-title="@Local["Xuất excel"]">
                                    <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                                </div>
                                <div class="input-group-text icon-hover w-auto vttech-input-item">
                                    <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return SETeacherDetail_TeachingExport(0)">@Local["Tất cả"]</i>
                                </div>
                                <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                                    <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return SETeacherDetail_TeachingExport(1)">@Local["Tùy chọn"]</i>
                                </div>
                            </div>
                            <button class="btn btn-dark btn-sm mt-1 mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                                @Local["Xem thêm"]
                            </button>
                        </div> 
                    </div>
                </div>
                <div class="toggle">
                    <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                        <ul class="card card-body text-dark text-capitalize opacity-10">
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogleDetail form-check-input" data-name="plantime" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Số giờ lý thuyết"]</p>
                            </li>
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogleDetail form-check-input" data-name="realtime" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Số giờ thực tế"]</p>
                            </li>
                            <li class="d-flex">
                                <div class="form-check form-switch">
                                    <input class="shtoogleDetail form-check-input" data-name="branch" type="checkbox">
                                </div>
                                <p class="text-sm">@Local["Chi nhánh"]</p>
                            </li>
                        </ul>
                    </div>

                </div>
            </div>
            <div class="collapsesticky collapse show" id="SETeacherDetail_TeachingDivArea">
                <div class="card-body p-0 pt-0">
                    <div class="m-0 my-3 mobile-responsive vt-header-sticky">
                        <table data-name="SETeacherDetail_TeachingGrid" class="table vt-table mb-0" id="SETeacherDetail_TeachingGrid">
                            <thead>
                                <tr>
                                    <th style="width: 60px">#</th>
                                    <th data-name="teacher">@Local["Giảng viên"]</th>
                                    <th data-name="course">@Local["Khoá học"]</th>
                                    <th data-name="subject">@Local["Môn học"]</th>
                                    <th data-name="room">@Local["Lớp học"]</th>
                                    <th data-name="begintime">@Local["Thời gian bắt đầu"]</th>
                                    <th data-name="endtime">@Local["Thời gian kết thúc"]</th>
                                    <th data-name="plantime">@Local["Số giờ lý thuyết"]</th>
                                    <th data-name="timein">@Local["Thời gian vào"]</th>
                                    <th data-name="timeout">@Local["Thời gian ra"]</th>
                                    <th data-name="realtime">@Local["Số giờ thực tế"]</th>
                                    <th data-name="status">@Local["Trạng thái"]</th>
                                    <th data-name="branch">@Local["Chi nhánh"]</th>
                                </tr>
                            </thead>
                            <tbody id="SETeacherDetail_TeachingGridBody">
                            </tbody>
                        </table>
                    </div>
                    <button class="btn btnsysmore btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return SETeacherDetail_TeachingRenderMore();">
                        @Local["Xem thêm"]
                    </button>
                </div>

            </div>
        </div>
        <div id="SETeacherDetail_FinanceDetail" style="display:none;">
            <div class="vtcardheader card-header pb-0 px-0">
                <div class="left">
                    <p id="SETeacherDetail_FinanceTitle" class="text-md text-dark font-weight-bold mb-1 d-none"></p>
                    <div class="ui dropdown text-dark fw-bold text-sm border-0" id="SET_Finance_TeacherID">
                        <input type="hidden" />
                        <div class="default text">eg .@Local["Giảng viên"]</div>
                        <div id="cbbSET_Finance_TeacherID" class="menu" tabindex="-1">
                        </div>
                    </div>
                </div>
                <div class="right">
                    <div class="text-primary fw-bold d-inline mx-2">
                        <span id="SETeacherDetail_FinanceCurrentData">0</span>
                        <span class="mx-2">/</span>
                        <span id="SETeacherDetail_FinanceTotalData">0</span>
                    </div>
                    <div class="icon-hover mx-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["Thu gọn"]">
                        <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                           data-bs-toggle="collapse" href="#SETeacherDetail_FinanceDivArea" aria-expanded="true"></i>
                    </div>
                    <div class="icon-hover mx-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["Tải lại"]">
                        <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                           onclick="event.preventDefault(); return SETeacherDetail_Loaddata()"></i>
                    </div>
                    <div class="icon-hover mx-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["Xuất excel"]">
                        <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                           onclick="event.preventDefault(); return SETeacherDetail_FinanceExport()"></i>
                    </div>
                    <div class="icon-hover mx-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["In báo cáo"]">
                        <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                           onclick="event.preventDefault(); SETeacherDetail_FinancePrintReport()"></i>
                    </div>
                </div>
            </div>
            <div class="collapsesticky collapse show" id="SETeacherDetail_FinanceDivArea">
                <div class="card-body p-0 pt-0">
                    <div class="m-0 my-3 mobile-responsive vt-header-sticky">
                        <table data-name="SETeacherDetail_FinanceGrid" class="table vt-table mb-0" id="SETeacherDetail_FinanceGrid">
                            <thead>
                                <tr>
                                    <th style="width: 60px">#</th>
                                    <th data-name="teacher">@Local["Giảng viên"]</th>
                                    <th data-name="stucode">@Local["Mã học viên"]</th>
                                    <th style="min-width: 140px">@Local["Tên học viên"]</th>
                                    <th style="min-width: 140px">@Local["Tổng phát sinh"]</th>
                                    <th style="min-width: 140px">@Local["Tổng thanh toán"]</th>
                                    <th data-name="branch">@Local["Chi nhánh"]</th>
                                </tr>
                            </thead>
                            <tbody id="SETeacherDetail_FinanceGridBody">
                            </tbody>
                        </table>
                    </div>
                    <button class="btn btnsysmore btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return SETeacherDetail_FinanceRenderMore();">
                        @Local["Xem thêm"]
                    </button>
                </div>

            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    let _branchID = "@Model._branchID";
    let _dateFrom = "@Model._dateFrom";
    let _dateTo = "@Model._dateTo";
    let xhrLoadList, xhrLoadDetail;
    let DataReportMainTeachingRoot, DataReportTeaching, DataReportTeachingSlice;
    let DataReportMainFinanceRoot, DataReportFinance, DataReportFinanceSlice;
    let IndexReportDetail = 0, IndexReportDetailFinance = 0;
    let timeoutCountDetail, timeoutCountDetailFinance;
    let SETeacher_ID = 0;
    let shtableDetail;
    $(document).ready(function () {
        ToolPopper();
        SETeacher_LoadData();
        SETeacherDetail_HandleChangeTab();
        shtableDetail = $("#SETeacherDetail_TeachingGrid").TableExpandColumn({
            shtoogle: $('.shtoogleDetail')
        });
        Checking_TabControl_Permission();
    });
    function SETeacher_LoadData() {
        if (xhrLoadList && xhrLoadList.readyState != 4) xhrLoadList.abort();
        xhrLoadList = AjaxLoad(url = "/Report/Student/Effect/TeacherGrid/?handler=Loadata"
            , data = {
                'branchID': _branchID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    let dataTeacher = data.map(e => {
                        return {
                            ID: e.TeacherID,
                            Name: e.Teacher
                        };
                    });
                    //dataTeacher.push({
                    //    ID: 0,
                    //    Name: "@Local["Tất cả giảng viên"]"
                    //})

                    Load_Combo(dataTeacher, "cbbSET_Teaching_TeacherID", true, "@Local["Giảng viên"]");
                    $("#SET_Teaching_TeacherID").dropdown("refresh");
                    $("#SET_Teaching_TeacherID").dropdown("set selected", '0');

                    Load_Combo(dataTeacher, "cbbSET_Finance_TeacherID", true, "@Local["Giảng viên"]");
                    $("#SET_Finance_TeacherID").dropdown("refresh");
                    $("#SET_Finance_TeacherID").dropdown("set selected", '0');

                    $("#SETeacher_GridBody").empty();
                    SETeacher_Render(data, "SETeacher_GridBody");
                }
            }
            , sender = null
            , before = function (e) {
                $("#SETeacher_LoaderList").show();
            }
            , complete = function (e) {
                $("#SETeacher_LoaderList").hide();
            }
        );
        return false;
    }

    async function SETeacher_Render(data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            if (data && data.length != 0) {
                let tr = '';
                let totalPlanCase = 0, totalPlanTime = 0, totalRealCase = 0, totalRealTime = 0;
                let totalTarget = 0, totalAmountTarget = 0, totalRevenue = 0, totalAmountRevenue = 0;
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    let effectByCase = (item.PlanCase != 0) ? (item.RealCase / item.PlanCase).toFixed(4) * 100 : 0;
                    let effectByTime = (item.PlanTime != 0) ? (item.RealTime / item.PlanTime).toFixed(4) * 100 : 0;
                    //calc total
                    totalPlanCase += item.PlanCase;
                    totalPlanTime += item.PlanTime;
                    totalRealCase += item.RealCase;
                    totalRealTime += item.RealTime;
                    totalTarget += item.TotalTarget;
                    totalAmountTarget += item.TotalTargetAmount;
                    totalRevenue += item.TotalRevenue;
                    totalAmountRevenue += item.TotalRevenueAmount;
                    tr = `<tr class="vt-number" role="row">
                                                                      <td class="vt-number-order"></td>
                                                                      <td>
                                                                          <a href="#" class="border-1 border-primary border-bottom buttonViewClass mb-0 text-sm fw-bold" data-id="${item.TeacherID}" data-name="${item.Teacher}">
                                                                             ${item.Teacher}
                                                                          </a>
                                                                      </td>
                                                                      <td>${formatNumber(item.PlanCase)}</td>
                                                                      <td>${(item.PlanTime / 60).toFixed(2)}</td>
                                                                      <td>${formatNumber(item.RealCase)}</td>
                                                                      <td>${(item.RealTime / 60).toFixed(2)}</td>
                                                                      <td>${effectByCase.toFixed(2)}</td>
                                                                      <td>${effectByTime.toFixed(2)}</td>
                                                                      <td>${formatNumber(item.TotalTarget)}</td>
                                                                      <td>${formatNumber(item.TotalTargetAmount)}</td>
                                                                      <td>${formatNumber(item.TotalRevenue)}</td>
                                                                      <td>${formatNumber(item.TotalRevenueAmount)}</td>
                                                                      </tr>`;
                    myNode.insertAdjacentHTML('beforeend', tr);
                }
                tr = `<tr class="vt-number text-white bg-gradient bg-primary mt-2 SETeacher_RowTotal" role="row">
                                                                                                     <td></td>
                                                                                                     <td class="text-start">
                                                                                                         <a href="#" class="border-1 border-white border-bottom buttonViewClass text-white" data-id="0">@Local["Tất cả"]</a>
                                                                                                     </td>
                                                                                                     <td>${formatNumber(totalPlanCase)}</td>
                                                                                                     <td>${(totalPlanTime / 60).toFixed(2)}</td>
                                                                                                     <td>${formatNumber(totalRealCase)}</td>
                                                                                                     <td>${(totalRealTime / 60).toFixed(2)}</td>
                                                                                                     <td>${((totalRealCase / totalPlanTime).toFixed(4) * 100).toFixed(2)}</td>
                                                                                                     <td>${((totalRealTime / totalPlanTime).toFixed(4) * 100).toFixed(2)}</td>
                                                                                                     <td>${formatNumber(totalTarget)}</td>
                                                                                                     <td>${formatNumber(totalAmountTarget)}</td>
                                                                                                     <td>${formatNumber(totalRevenue)}</td>
                                                                                                     <td>${formatNumber(totalAmountRevenue)}</td>
                                                                                                 </tr>`;
                myNode.insertAdjacentHTML('beforeend', tr);
                SETeacher_GeneralEvent();
            }
        }
    }
    //#region // LOAD DETAIL AND RENDER
    function SETeacherDetail_Loaddata() {
        if (xhrLoadDetail && xhrLoadDetail.readyState != 4) xhrLoadDetail.abort();
        IndexReportDetail = 0;
        xhrLoadDetail = AjaxLoad(url = "/Report/Student/Effect/TeacherGrid/?handler=LoadataDetail"
            , data = {
                'branchID': _branchID,
                'teacherID': SETeacher_ID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "[]") {

                    let { DataTeaching, DataCourseCombo, DataFinance } = JSON.parse(result);

                    Load_Combo(DataCourseCombo, "cbbSET_Teaching_CourseID", true, "@Local["Khóa học"]");
                    $("#SET_Teaching_CourseID").dropdown();
                    $("#SET_Teaching_CourseID").dropdown("refresh");
                    $("#SET_Teaching_CourseID").dropdown("set selected", '0');

                    SETeacherDetail_TeachingLoadData(DataTeaching);
                    SETeacherDetail_FinanceLoadData(DataFinance);
                    SET_TeacherDetail_Filter();
                }
                else if (result == "0") {
                    notiWarning();
                }
            }
            , sender = null
            , before = function (e) {
                $("#SETeacherDetail_LoaderList").show();
            }
            , complete = function (e) {
                $("#SETeacherDetail_LoaderList").hide();
            }
        );
    }

    function SETeacherDetail_HandleRender(indexReport, idGrid, dataSlice, functionRender) {
        indexReport = 0;
        $(`#${idGrid}`).empty();
        if (dataSlice && dataSlice.length != 0) {
            fnRenderBlock(dataSlice[indexReport], idGrid
                , blocknum = 100
                , fnrender = functionRender
                , fnsuccess = null
            );
        }
    }

    //#region //Effect Teaching

    async function SETeacherDetail_TeachingLoadData(data) {
        DataReportMainTeachingRoot = JSON.parse(JSON.stringify(data));
        DataReportTeaching = JSON.parse(JSON.stringify(data));
        DataReportTeachingSlice = sliceIntoChunks(data, 500);
        SETeacherDetail_HandleRender(IndexReportDetail, "SETeacherDetail_TeachingGridBody", DataReportTeachingSlice, SETeacherDetail_TeachingRender);
        Count_Up("SETeacherDetail_TeachingTotalData", DataReportTeaching.length);
    }

    function SETeacherDetail_TeachingRenderMore() {
        IndexReportDetail += 1;
        if (DataReportTeachingSlice && DataReportTeachingSlice[IndexReportDetail]) {
            fnRenderBlock(DataReportTeachingSlice[IndexReportDetail], "SETeacherDetail_TeachingGridBody"
                , blocknum = 100
                , fnrender = SETeacherDetail_TeachingRender
                , fnsuccess = null
            );
        }
    }

    async function SETeacherDetail_TeachingRender(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        let tr = '';
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let begintime = ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(item.Dayint.toString() + item.TimeStart.toString()));
                            let endtime = ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(item.Dayint.toString() + item.TimeEnd.toString()));
                            let timein = item.TimeinClass != '' ? ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(item.TimeinClass.toString())) : '';
                            let timeout = item.TimeoutClass != '' ? ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(item.TimeoutClass.toString())) : '';
                            let tr = `<tr class="vt-number" role="row">
                                                              <td class="vt-number-order"></td>
                                                              <td data-name="teacher">${item.Teacher}</td>
                                                              <td data-name="course">${item.Course}</td>
                                                              <td data-name="subject">${item.SubjectName}</td>
                                                              <td data-name="room">${item.ClassName}</td>
                                                              <td data-name="begintime">${begintime}</td>
                                                              <td data-name="endtime">${endtime}</td>
                                                              <td data-name="plantime">${formatNumber(item.PlanTime)}</td>
                                                                      <td data-name="timein">${timein}</td>
                                                                      <td data-name="timeout">${timeout}</td>
                                                                  <td data-name="realtime">${formatNumber(item.RealTime)}</td>
                                                              <td data-name="status" class="${SETeacherDetail_TeachingGetStatus(item.Status).TextColor}">
                                                              ${SETeacherDetail_TeachingGetStatus(item.Status).Value}
                                                              </td>
                                                              <td data-name="branch">${(RP_DataBranch[item.BranchID] != undefined ? RP_DataBranch[item.BranchID].Name : '')}</td>
                                                              </tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                shtableDetail.Refresh();
                clearTimeout(timeoutCountDetail);
                timeoutCountDetail = setTimeout(() => {
                    Count_Up("SETeacherDetail_TeachingCurrentData", $("#" + id).children().length);
                }, 300)
                resolve();
            }, 10)
        })
    }

    function SETeacherDetail_TeachingGetStatus(type) {
        let status = {
            0: { Value: '@Local["Chưa dạy"]', TextColor: 'text-secondary' },
            1: { Value: '@Local["Đang dạy"]', TextColor: 'text-primary' },
            2: { Value: '@Local["Đã dạy"]', TextColor: 'text-success' },
        }
        return status[type] || 'undifined';
    }
    //#endregion

    //#region //Effect Finance

    async function SETeacherDetail_FinanceLoadData(data) {
        DataReportMainFinanceRoot = JSON.parse(JSON.stringify(data));
        DataReportFinance = JSON.parse(JSON.stringify(data));
        DataReportFinanceSlice = sliceIntoChunks(data, 500);
        SETeacherDetail_HandleRender(IndexReportDetailFinance, "SETeacherDetail_FinanceGridBody", DataReportFinanceSlice, SETeacherDetail_FinanceRender);
        Count_Up("SETeacherDetail_FinanceTotalData", DataReportFinance.length);
    }

    function SETeacherDetail_FinanceRenderMore() {
        IndexReportDetailFinance += 1;
        if (DataReportFinanceSlice && DataReportFinanceSlice[IndexReportDetailFinance]) {
            fnRenderBlock(DataReportFinanceSlice[IndexReportDetailFinance], "SETeacherDetail_FinanceGridBody"
                , blocknum = 100
                , fnrender = SETeacherDetail_FinanceRender
                , fnsuccess = null
            );
        }
    }

    async function SETeacherDetail_FinanceRender(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        let tr = '';
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = `<tr class="vt-number" role="row">
                                                                                          <td class="vt-number-order"></td>
                                                                                          <td data-name="teacher">${item.Teacher}</td>
                                                                                          <td data-name="stucode">
                                                                                              <a target="_blank" href="/Student/student/studentmain?studentid=${item.StuID}">
                                                                                                  ${item.StuCode}
                                                                                              </a>
                                                                                          </td>
                                                                                          <td>${item.StuName}</td>
                                                                                          <td data-name="tuition">${formatNumber(item.TotalTuition)}</td>
                                                                                          <td data-name="payment">${formatNumber(item.TotalPayment)}</td>
                                                                                          <td data-name="branch">${(RP_DataBranch[item.BranchID] != undefined ? RP_DataBranch[item.BranchID].Name : '')}</td>
                                                                                          </tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                shtableDetail.Refresh();
                clearTimeout(timeoutCountDetailFinance);
                timeoutCountDetailFinance = setTimeout(() => {
                    Count_Up("SETeacherDetail_FinanceCurrentData", $("#" + id).children().length);
                }, 300)
                resolve();
            }, 10)
        })
    }
    //#endregion

    //#endregion

    //#region // Event
    function SETeacher_GeneralEvent() {
        $("#SETeacher_GridBody .buttonViewClass").unbind('click').on("click", function () {
            SETeacher_ID = $(this).attr('data-id');
            $('#SETeacherDetail_TeachingCurrentData').html('0');
            $('#SETeacherDetail_TeachingTotalData').html('0');
            $('#SETeacherDetail_FinanceCurrentData').html('0');
            $('#SETeacherDetail_FinanceTotalData').html('0');
            let name = $(this).attr('data-name');
            $("#SETeacherDetail_TeachingContainer").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#SETeacherDetail_TeachingContainer").offset().top
            }, 300);
            if (SETeacher_ID == "0") {
                $("#SETeacherDetail_TeachingTitle").html('@Local["Tất cả giáo viên"]');
                $("#SETeacherDetail_FinanceTitle").html('@Local["Tất cả giáo viên"]');

                $('#SET_Teaching_TeacherID').removeClass("disabled bg-white");
                $('#SET_Teaching_TeacherID .text').removeClass("text-secondary");
                $("#SET_Teaching_TeacherID").dropdown("refresh");
                $("#SET_Teaching_TeacherID").dropdown("set selected", '0');

                $('#SET_Finance_TeacherID').removeClass("disabled bg-white");
                $('#SET_Finance_TeacherID .text').removeClass("text-secondary");
                $("#SET_Finance_TeacherID").dropdown("refresh");
                $("#SET_Finance_TeacherID").dropdown("set selected", '0');
            }
            else {
                $("#SETeacherDetail_TeachingTitle").html(name);
                $("#SETeacherDetail_FinanceTitle").html(name);

                $('#SET_Teaching_TeacherID').addClass("disabled bg-white");
                $('#SET_Teaching_TeacherID .text').addClass("text-secondary");
                $("#SET_Teaching_TeacherID").dropdown("refresh");
                $("#SET_Teaching_TeacherID").dropdown("set selected", SETeacher_ID);

                $('#SET_Finance_TeacherID').addClass("disabled bg-white");
                $('#SET_Finance_TeacherID .text').addClass("text-secondary");
                $("#SET_Finance_TeacherID").dropdown("refresh");
                $("#SET_Finance_TeacherID").dropdown("set selected", SETeacher_ID);
            }

            SETeacherDetail_Loaddata();
        })
    }
    function SET_TeacherDetail_Filter() {
        $("#SET_Teaching_TeacherID").unbind('change').on("change", function () {
            let teacherid = Number($(this).dropdown('get value')) ? Number($(this).dropdown('get value')) : 0;
            let courseid = Number($('#SET_Teaching_CourseID').dropdown('get value')) ? Number($('#SET_Teaching_CourseID').dropdown('get value')) : 0;

            $("#SET_Finance_TeacherID").dropdown("refresh");
            $("#SET_Finance_TeacherID").dropdown("set selected", teacherid);

            SET_TeacherDetail_Teaching_Filter(teacherid, courseid);
        })

        $("#SET_Teaching_CourseID").unbind('change').on("change", function () {
            let teacherid = Number($('#SET_Teaching_TeacherID').dropdown('get value')) ? Number($('#SET_Teaching_TeacherID').dropdown('get value')) : 0;
            let courseid = Number($(this).dropdown('get value')) ? Number($(this).dropdown('get value')) : 0;

            SET_TeacherDetail_Teaching_Filter(teacherid, courseid);
        })

        $("#SET_Finance_TeacherID").unbind('change').on("change", function () {
            let teacherid = Number($(this).dropdown('get value')) ? Number($(this).dropdown('get value')) : 0;

            $("#SET_Teaching_TeacherID").dropdown("refresh");
            $("#SET_Teaching_TeacherID").dropdown("set selected", teacherid);

            if (!DataReportMainFinanceRoot || DataReportMainFinanceRoot.length == 0) return;

            DataReportFinance = JSON.parse(JSON.stringify(DataReportMainFinanceRoot));

            DataReportFinance = DataReportFinance.filter(function (el) {
                return (Number(el.TeacherID) == teacherid || teacherid == 0);
            });

            let _d = JSON.parse(JSON.stringify(DataReportFinance));
            Count_Up("SETeacherDetail_FinanceTotalData", _d.length);
            DataReportFinanceSlice = sliceIntoChunks(_d, 500);
            SETeacherDetail_HandleRender(IndexReportDetailFinance, "SETeacherDetail_FinanceGridBody", DataReportFinanceSlice, SETeacherDetail_FinanceRender);

        })
    }

    function SET_TeacherDetail_Teaching_Filter(teacherid, courseid) {
        if (!DataReportMainTeachingRoot || DataReportMainTeachingRoot.length == 0) return;

        DataReportTeaching = JSON.parse(JSON.stringify(DataReportMainTeachingRoot));

        DataReportTeaching = DataReportTeaching.filter(function (el) {
            return ((Number(el.TeacherID) == teacherid || teacherid == 0)
                && (Number(el.CourseID) == courseid || courseid == 0));
        });

        let _d = JSON.parse(JSON.stringify(DataReportTeaching));
        Count_Up("SETeacherDetail_TeachingTotalData", _d.length);
        DataReportTeachingSlice = sliceIntoChunks(_d, 500);
        SETeacherDetail_HandleRender(IndexReportDetail, "SETeacherDetail_TeachingGridBody", DataReportTeachingSlice, SETeacherDetail_TeachingRender);
    }

    function SETeacher_Export() {
        syslog_ExpExcel('e', Outlang["Bao_cao_hieu_qua_giang_vien"]);
        exportToExcel("SETeacher_Grid", Outlang["Bao_cao_hieu_qua_giang_vien"]);
    }

    async function SETeacherDetail_TeachingExport(isOption = 0) {
        try {
            if (DataReportMainTeachingRoot && DataReportMainTeachingRoot.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#SETeacherDetail_TeachingDetail');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }],
                    "Teacher": ["@Local["Giảng viên"]"],
                    "Course": ["@Local["Khoá học"]"],
                    "SubjectName": ["@Local["Môn học"]"],
                    "ClassName": ["@Local["Lớp học"]"],
                    "Dayint": ["@Local["Thời gian bắt đầu"]", (value, { TimeStart }) => {
                        return ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(value.toString() + TimeStart.toString()));
                    }],
                    "Dayint": ["@Local["Thời gian kết thúc"]", (value, { TimeEnd }) => {
                        return ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(value.toString() + TimeEnd.toString()));
                    }],
                    "PlanTime": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='plantime']`)).is(":checked"),
                        data: ["@Local["Số giờ lý thuyết"]", (value) => {
                            return formatNumber(value);
                        }]
                    },
                    "TimeinClass": ["@Local["Thời gian vào"]", (value, { TimeStart }) => {
                        return value != '' ? ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(value.toString())) : '';
                    }],
                    "TimeoutClass": ["@Local["Thời gian ra"]", (value, { TimeEnd }) => {
                        return value != '' ? ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(value.toString())) : '';
                    }],
                    "RealTime": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='realtime']`)).is(":checked"),
                        data: ["@Local["Số giờ lý thuyết"]", (value) => {
                            return formatNumber(value);
                        }]
                    },
                    "Status": ["@Local["Trạng thái"]", (value) => {
                        return decodeHtml(SETeacherDetail_TeachingGetStatus(value)?.Value ?? "");
                    }],
                    "BranchID": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='createdby']`)).is(":checked"),
                        data: ["@Local["Người tạo"]", (value, { CreatedBy }) => {
                            return (RP_DataBranch[CreatedBy] != undefined) ? RP_DataBranch[CreatedBy].Name : '';
                        }]
                    }
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'SETeacherDetail_TeachingGridBody', PermissionTable_TabControl);
                let fileName = Outlang["Bao_cao_hieu_qua_lam_viec_giang_vien"] + '_' + xoa_dau($("#SETeacherDetail_TeachingTitle").text()).replaceAll(' ', '-');
                syslog_ExpExcel('e', fileName);
                exportJsonToExcel(fileName, DataReportMainTeachingRoot, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }

    async function SETeacherDetail_TeachingPrintReport() {
        try {
            if (DataReportMainTeachingRoot && DataReportMainTeachingRoot.length != 0) {
                let _branchID = "@Model._branchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }],
                    "Teacher": ["@Local["Giảng viên"]"],
                    "Course": ["@Local["Khoá học"]"],
                    "SubjectName": ["@Local["Môn học"]"],
                    "ClassName": ["@Local["Lớp học"]"],
                    "Dayint": ["@Local["Thời gian bắt đầu"]", {
                        callbackRenderValue: (value, { TimeStart }) => {
                            return ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(value.toString() + TimeStart.toString()));
                        }
                    }],
                    "Dayint": ["@Local["Thời gian kết thúc"]", {
                        callbackRenderValue: (value, { TimeEnd }) => {
                            return ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(value.toString() + TimeEnd.toString()));
                        }
                    }],
                    "PlanTime": ["@Local["Số giờ lý thuyết"]", {
                        isShow: $(`.shtoogle[data-name='plantime']`).is(":checked"),
                        callbackRenderValue: (value) => {
                            return formatNumber(value);
                        }
                    }],
                    "TimeinClass": ["@Local["Thời gian vào"]", {
                        callbackRenderValue: (value, { TimeStart }) => {
                            return value != '' ? ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(value.toString())) : '';
                        }
                    }],
                    "TimeoutClass": ["@Local["Thời gian ra"]", {
                        callbackRenderValue: (value, { TimeEnd }) => {
                            return value != '' ? ConvertDateTimeUTC_DMYHM(INTYMDHMToDate(value.toString())) : '';
                        }
                    }],
                    "RealTime": ["@Local["Số giờ thực tế"]", {
                        isShow: $(`.shtoogle[data-name='realtime']`).is(":checked"),
                        callbackRenderValue: (value) => {
                            return formatNumber(value);
                        }
                    }],
                    "Status": ["@Local["Trạng thái"]", {
                        callbackRenderValue: (value) => {
                            return decodeHtml(SETeacherDetail_TeachingGetStatus(value).Value);
                        }
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        isShow: $(`.shtoogle[data-name='branch']`).is(":checked"),
                        callbackRenderValue: (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }
                    }],
                };
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            let fileName = Outlang["Bao_cao_hieu_qua_lam_viec_giang_vien"] + ' ' + $("#SETeacherDetail_TeachingTitle").text();
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = fileName, DataReportMainTeachingRoot, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
    async function SETeacherDetail_FinanceExport() {
        try {
            if (DataReportMainFinanceRoot && DataReportMainFinanceRoot.length != 0) {
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }],
                    "Teacher": ["@Local["Giảng viên"]"],
                    "StuCode": ["@Local["Mã học viên"]"],
                    "StuName": ["@Local["Tên học viên"]"],
                    "TotalTuition": ["@Local["Tổng thanh toán"]", (value) => {
                        return formatNumber(value);
                    }],
                    "TotalPayment": ["@Local["Tổng thanh toán"]", (value) => {
                        return formatNumber(value);
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", (value, { BranchID }) => {
                        return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                    }],
                }
                let fileName = Outlang["Bao_cao_hieu_qua_tai_chinh_giang_vien"] + '_' + xoa_dau($("#SETeacherDetail_TeachingTitle").text()).replaceAll(' ', '-');
                syslog_ExpExcel('e', fileName);
                exportJsonToExcel(fileName, DataReportMainFinanceRoot, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }
    async function SETeacherDetail_FinancePrintReport() {
        try {
            if (DataReportMainFinanceRoot && DataReportMainFinanceRoot.length != 0) {
                let _branchID = "@Model._branchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }],
                    "Teacher": ["@Local["Giảng viên"]"],
                    "StuCode": ["@Local["Mã học viên"]"],
                    "StuName": ["@Local["Tên học viên"]"],
                    "TotalTuition": ["@Local["Tổng thanh toán"]", {
                        callbackRenderValue: (value) => {
                            return formatNumber(value);
                        }
                    }],
                    "TotalPayment": ["@Local["Tổng thanh toán"]", {
                        callbackRenderValue: (value) => {
                            return formatNumber(value);
                        }
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        callbackRenderValue: (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }
                    }],
                };
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let fileName = Outlang["Bao_cao_hieu_qua_tai_chinh_giang_vien"] + ' ' + $("#SETeacherDetail_TeachingTitle").text();
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = fileName, DataReportMainFinanceRoot, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
    function SETeacherDetail_HandleChangeTab() {
        $(".SETeacherTab").unbind("change").change(function () {
            DeSource_IsRevenue = Number($(this).val());
            if (DeSource_IsRevenue == 0) {
                $('#SETeacherDetail_TeachingDetail').show();
                $('#SETeacherDetail_FinanceDetail').hide();
            }
            else {
                $('#SETeacherDetail_TeachingDetail').hide();
                $('#SETeacherDetail_FinanceDetail').show();
            }
        })
    }
                                                                                                                        //#endregion

</script>


