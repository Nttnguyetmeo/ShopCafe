@page
@model MLunarCoffee.Pages.Report.Revenue.Branch.AllBranchGridModel
@{
    Layout = null;
}
<div class="ABG_MasterContainer">
    <div class="vtcardheader card-header pb-0 px-0">
        <div class="left">
            <div class="d-flex overflow-auto align-items-center mb-sm-0 gap-2">
                <div class="form-check">
                    <input id="ABG_Source" class="form-check-input"
                           type="checkbox">
                    <label class="custom-control-label">@Local["Nguồn khách hàng"]</label>
                </div>
                <div class="form-check">
                    <input id="ABG_SerCat" class="form-check-input"
                           type="checkbox">
                    <label class="custom-control-label">@Local["Nhóm dịch vụ"]</label>
                </div>
                <div class="form-check">
                    <input id="ABG_Gender" class="form-check-input"
                           type="checkbox">
                    <label class="custom-control-label">@Local["Giới tính"]</label>
                </div>
                <div class="form-check">
                    <input id="ABG_Age" class="form-check-input"
                           type="checkbox">
                    <label class="custom-control-label">@Local["Độ tuổi"]</label>
                </div>
            </div>
        </div>
        <div class="right">
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local[" Thu gọn"]">
                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                   data-bs-toggle="collapse" href="#ABG_GridArea" aria-expanded="true"></i>
            </div>
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local[" Tải lại"]">
                <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                   onclick="event.preventDefault(); return ABG_LoadData()"></i>
            </div>
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local[" Xuất excel"]">
                <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                   onclick="event.preventDefault(); return ABG_Export()"></i>
            </div>
        </div>
    </div>
    <div class="collapsesticky collapse show" id="ABG_GridArea">
        <div class="card-body px-0 pt-0">
            <div id="ABG_LoaderList" class="waitingdiv text-center w-100 mt-2 position-absolute start-50 translate-middle-x" style="display:none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="m-0 my-3 mobile-responsive">
                <table class="table vt-table mb-0" id="ABG_Grid">
                    <thead>
                        <tr id="ABG_Row_Parrent" role="row">
                            <th rowspan="4">#</th>
                            <th rowspan="4">@Local["Chi nhánh"]</th>
                            <th rowspan="4">@Local["Tổng khách"]</th>
                            <th rowspan="4">@Local["Tổng doanh thu"]</th>
                            <th rowspan="4">@Local["Tổng phát sinh"]</th>
                            <th rowspan="4">@Local["Tổng tiền thanh toán"]</th>
                            <th rowspan="4">@Local["Tổng tiền công nợ"]</th>
                        </tr>
                        <tr id="ABG_Row_Child1" role="row">
                        </tr>
                        <tr id="ABG_Row_Child2" role="row">
                        </tr>
                        <tr id="ABG_Row_Child3" role="row">
                        </tr>
                    </thead>
                    <tbody id="ABG_GridBody">
                    </tbody>
                    <tfoot id="ABG_GridFooter">
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>
<div id="ABG_Detail_Month_Container" style="display:none;">
    <div class="vtcardheader card-header pb-0 px-0">
        <div class="left">
            <p id="ABG_Detail_Month_Tittle" class="text-md text-dark font-weight-bold mb-1"></p>
        </div>
        <div class="right">
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local[" Thu gọn"]">
                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                   data-bs-toggle="collapse" href="#ABG_Detail_Month_Area" aria-expanded="true"></i>
            </div>
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local[" Xuất excel"]">
                <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                   onclick="event.preventDefault(); return ABG_Detail_Month_Export()"></i>
            </div>
        </div>
    </div>
    <div class="collapsesticky collapse show" id="ABG_Detail_Month_Area">
        <div class="card-body px-0 pt-0">
            <div class="m-0 my-3 mobile-responsive">
                <table data-name="ABG_Detail_Month_dtContent" class="table vt-table mb-0" id="ABG_Detail_Month_dtContent">
                    <thead>
                        <tr>
                            <th rowspan="2" style="width: 60px">#</th>
                            <th rowspan="2">@Local["Chi nhánh"]</th>
                            <th rowspan="2" colspan="2">@Local["Nội dung"]</th>
                            <th rowspan="1" id="ABG_Detail_Month_dtContent_Th_Month"></th>
                            <th rowspan="2">@Local["Tổng"]</th>
                        </tr>
                        <tr id="ABG_Detail_Month_dtContent_Th_DayOfMonth">
                        </tr>
                    </thead>
                    <tbody id="ABG_Detail_Month_dtContentBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div id="ABG_Detail_Branch_Container" style="display:none;">
    <div class="vtcardheader card-header pb-0 px-0">
        <div class="left">
            <p id="ABG_Detail_Branch_Tittle" class="text-md text-dark font-weight-bold mb-0 mt-1"></p>
        </div>
        <div class="right">
            <div class="text-primary fw-bold d-inline mx-2 text-nowrap mt-1">
                <span id="ABG_Detail_Branch_currentData">0</span>
                <span class="mx-2">/</span>
                <span id="ABG_Detail_Branch_totalData">0</span>
            </div>
            <div class="icon-hover mx-1 mt-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local[" Thu gọn"]">
                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                   data-bs-toggle="collapse" href="#ABG_Detail_Branch_DivArea" aria-expanded="true"></i>
            </div>
            <div class="icon-hover mx-1 mt-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local[" In báo cáo"]">
                <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                   onclick="event.preventDefault(); ABG_Detail_Branch_DetailPrintReport()"></i>
            </div>
            <div>
                <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel">
                    <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local[" Xuất excel"]">
                        <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                    </div>
                    <div class="input-group-text icon-hover w-auto vttech-input-item">
                        <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return ABG_Detail_Branch_ExportDetail(0)">@Local["Tất cả"]</i>
                    </div>
                    <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                        <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return ABG_Detail_Branch_ExportDetail(1)">@Local["Tùy chọn"]</i>
                    </div>
                </div>
            </div>
            <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                @Local["Xem thêm"]
            </button>
        </div>
        <div class="toggle">
            <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                <ul class="card card-body text-dark text-capitalize opacity-10">
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="doccode" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Mã hồ sơ"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="custoldcode" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Mã khách hàng cũ"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="age" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Tuổi"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="gender" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Giới tính"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="isnew" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Khách hàng mới"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="sercat" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Nhóm dịch vụ"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="type" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Loại"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="source" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Nguồn"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="paymentmethod" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Hình thức thanh toán"]</p>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="collapsesticky collapse show" id="ABG_Detail_Branch_DivArea">
        <div class="card-body px-0 py-0">
            <div class="m-0 my-3 mobile-responsive vt-header-sticky">
                <table data-name="ABG_Detail_Branch_dtContent" class="table vt-table mb-0" id="ABG_Detail_Branch_dtContent">
                    <thead>
                        <tr>
                            <th style="width: 60px">#</th>
                            <th>@Local["Mã khách hàng"]</th>
                            <th data-name="custoldcode">@Local["Mã khách hàng cũ"]</th>
                            <th data-name="doccode">@Local["Mã hồ sơ"]</th>
                            <th>@Local["Khách hàng"]</th>
                            <th data-name="age">@Local["Tuổi"]</th>
                            <th data-name="gender">@Local["Giới tính"]</th>
                            <th data-name="isnew">@Local["Khách hàng mới"]</th>
                            <th>@Local["Tiền thu"]</th>
                            <th>@Local["Phát sinh"]</th>
                            <th>@Local["Thanh toán"]</th>
                            <th>@Local["Công nợ"]</th>
                            <th data-name="paymentmethod">@Local["Hình thức thanh toán"]</th>
                            <th data-name="type">@Local["Loại"]</th>
                            <th data-name="sercat">@Local["Nhóm dịch vụ"]</th>
                            <th>@Local["Dịch vụ"]</th>
                            <th data-name="source">@Local["Nguồn"]</th>
                            <th>@Local["Chi nhánh"]</th>
                            <th>@Local["Ngày tạo"]</th>
                        </tr>
                    </thead>
                    <tbody id="ABG_Detail_Branch_dtContentBody">
                    </tbody>
                </table>
            </div>
            <button class="btnsysmore btn btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return ABG_Detail_Branch_RenderMore();">
                @Local["Xem thêm"]
            </button>
        </div>

    </div>
</div>

<script type="text/javascript">
    //#region //INIT

    var ABG_MasterDataByMonth = {}, ABG_MasterDataByBranch = {}, ABG_MasterDataAll = [];
    let ABG_Detail_Month_DateFrom, ABG_Detail_Month_DateTo;
    let ABG_Detail_Month, ABG_Detail_Year;
    let ABG_Detail_NumDayOfMonth;
    let ABG_Month_xhrLoadDetail;
    let ABG_Detail_BranchID;
    let ABG_Detail_Branch_DataReportMain, ABG_Detail_Branch_DataReportMainSlice;
    let ABG_Branch_xhrLoadDetail;
    let ABG_Detail_Branch_IndexReport = 0;
    let ABG_Detail_Branch_timeoutCount;
    let ABG_Detail_Branch_shtable;
    $(document).ready(function () {
        ToolPopper();
        ABG_Detail_Branch_shtable = $("#ABG_Detail_Branch_dtContent").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        ABG_LoadData();
        Checking_TabControl_Permission();
    });
    //#endregion

    //#region //LOADDATA
    function ABG_LoadData() {
        ABG_MasterDataByMonth = {};
        ABG_MasterDataByBranch = {};
        ABG_MasterDataAll = [];
        $('#ABG_GridBody').empty();
        $('#ABG_LoaderList').show();
        $('#ABG_Grid').addClass('d-none');
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";
        let _branchID = "@Model._branchID";
        AjaxLoad(url = "/Report/Revenue/Branch/AllBranchGrid/?handler=Loadata"
            , data = {
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
                'branchID': _branchID
            }
            , async = true
            , error = function () {
                notiError_SW();
                $('#ABG_LoaderList').hide();
                $('#ABG_Grid').removeClass('d-none');
            }
            , success = function (result) {
                if (result != "0") {
                    let datas = JSON.parse(result);
                    let data = datas["Table"];
                    let data1 = datas["Table1"];
                    let data2 = datas["Table2"];
                    let data3 = datas["Table3"];
                    let data4 = datas["Table4"];
                    let data5 = datas["Table5"];
                    ABG_GroupByMasterData(data, tableName = "Table");
                    ABG_GroupByMasterData(data1, tableName = "Table1");
                    ABG_GroupByMasterData(data2, tableName = "Table2");
                    ABG_GroupByMasterData(data3, tableName = "Table3");
                    ABG_GroupByMasterData(data4, tableName = "Table4");
                    ABG_MasterDataAll = data5;
                    ABG_RenderData();
                }
                else {
                    notiError_SW();
                }
            }
        );
        return false;
    }

    async function ABG_GroupByMasterData(data, tableName = "Table") {
        return new Promise(resolve => {
            for (let i = 0; i < data.length; i++) {
                let v = data[i];
                let key = v.RevYear + '_' + v.RevMonth;
                if (!ABG_MasterDataByMonth[key] || !ABG_MasterDataByMonth[key][tableName]) {
                    ABG_MasterDataByMonth[key] = { ...ABG_MasterDataByMonth[key], [tableName]: [] }
                }
                if (tableName == "Table") {
                    if (!ABG_MasterDataByBranch[v.BranchID]) {
                        ABG_MasterDataByBranch[v.BranchID] = {
                            ID: v.BranchID,
                            totalQuant: 0,
                            totalAmount: 0,
                            totalPriceDiscounted: 0,
                            totalPaid: 0
                        }
                    }
                    ABG_MasterDataByBranch[v.BranchID].totalQuant += v.TotalCust;
                    ABG_MasterDataByBranch[v.BranchID].totalAmount += v.Amount;
                    ABG_MasterDataByBranch[v.BranchID].totalPriceDiscounted += v.TotalPriceDiscounted;
                    ABG_MasterDataByBranch[v.BranchID].totalPaid += v.TotalPaid;
                }
                ABG_MasterDataByMonth[key][tableName].push(v);
            }
            resolve()
        })
    }
    //#endregion

    //#region //RENDER DATA
    async function ABG_RenderData() {
        return new Promise(resolve => {
            $('#ABG_Row_Child1').empty();

            $('#ABG_Row_Child2').empty();

            $('#ABG_Row_Child3').empty();
            for ([key, value] of Object.entries(ABG_MasterDataByMonth)) {

                let data = value["Table"];
                let sourcedata = value["Table1"];
                let catdata = value["Table2"];
                let genderdata = value["Table3"];
                let agedata = value["Table4"];
                let numCols = 0;
                let strMonth = ABG_RenderHeaderMonth(key);
                $('#ABG_Row_Parrent').append(strMonth);

                numCols += ABG_RenderHeaderRevenue(key);

                let source_unique = sourcedata.map(item => item.Source).filter((value, index, self) => self.indexOf(value) === index);
                ABG_RenderHeaderSource(key, source_unique)

                let cat_unique = catdata.map(item => item.ServiceCat).filter((value, index, self) => self.indexOf(value) === index);
                ABG_RenderHeaderCat(key, cat_unique)

                let gender_unique = genderdata.map(item => item.Gender).filter((value, index, self) => self.indexOf(value) === index);
                ABG_RenderHeaderGender(key, gender_unique)

                let age_unique = agedata.map(item => item.BirthArea).filter((value, index, self) => self.indexOf(value) === index);
                ABG_RenderHeaderAge(key, age_unique)

                $(`#ABG_Row_Tr_Month_${key}`).attr("colspan", numCols);

                ABG_RenderBody(data, source_unique, cat_unique, gender_unique, age_unique, sourcedata, catdata, genderdata, agedata, id = "ABG_GridBody")
            }
            ABG_Filter();
            $('#ABG_Source').trigger('click');
            ABG_MaterEvent();
            $('#ABG_LoaderList').hide();
            $('#ABG_Grid').removeClass('d-none');
            resolve();
        })
    }

    //#region //RENDER HEADER
    function ABG_RenderHeaderMonth(strKey) {
        let result = '';
        let keys = strKey.split('_');
        let year = keys[0] && keys[0].length == 4 ? keys[0] : '1900';
        let month = !isNaN(Number(keys[1])) && Number(keys[1]) < 10 ? `0${keys[1]}` : keys[1];
        result = `<th id="ABG_Row_Tr_Month_${strKey}">
                                                      <a href="#" class="border-1 border-primary border-bottom ABG_HeaderMonth mb-0 text-sm fw-bold" data-month="${month}" data-year="${year}">
                                                      ${month}/${year}
                                                      </a>
                                                      </th>`;
        return result;
    }

    function ABG_RenderHeaderRevenue(key) {
        let numCols = 6;
        let child1 = `<th id="ABG_Row_Th_revenue_${key}" colspan="${numCols}" class="revenue">@Local["Doanh thu"]</th>`;
        let child2 = `<th colspan="2">@Local["Tổng"]</th>
                                                          <th colspan="2">@Local["Khách mới"]</th>
                                                          <th colspan="2">@Local["Khách cũ"]</th>`;
        let child3 = `<th>@Local["Số lượng"]</th>
                            <th>@Local["Doanh thu"]</th>
                            <th>@Local["Số lượng"]</th>
                            <th>@Local["Doanh thu"]</th>
                            <th>@Local["Số lượng"]</th>
                            <th>@Local["Doanh thu"]</th>`;
        $('#ABG_Row_Child1').append(child1);

        $('#ABG_Row_Child2').append(child2);

        $('#ABG_Row_Child3').append(child3);

        return numCols;
    }

    function ABG_RenderHeaderSource(key, data) {
        let numCols = 0
        if (data && data.length > 0) {
            numCols = data.length * 2;
            let child1 = `<th id="ABG_Row_Th_source_${key}" colspan="${numCols}" data-key="${key}" class="child1 source d-none">@Local["Nguồn"]</th>`;
            let child2 = ``, child3 = ``;
            for (let i = 0; i < data.length; i++) {
                let item = RP_DataCustomerSource[data[i]];
                child2 += `<th colspan="2" class="source d-none">${item != undefined ? item.Name : '@Local["Khác"]'}</th>`;
                child3 += `<th class="source d-none">@Local["Số lượng"]</th>
                                                       <th class="source d-none">@Local["Doanh thu"]</th>`
            }

            $('#ABG_Row_Child1').append(child1);

            $('#ABG_Row_Child2').append(child2);

            $('#ABG_Row_Child3').append(child3);
        }
        return numCols;
    }

    function ABG_RenderHeaderCat(key, data) {
        let numCols = 0
        if (data && data.length > 0) {
            numCols = data.length;
            let child1 = `<th id="ABG_Row_Th_sercat_${key}" colspan="${numCols}" data-key="${key}" class="child1 sercat d-none">@Local["Nhóm dịch vụ"]</th>`;
            let child2 = ``, child3 = ``;
            for (let i = 0; i < data.length; i++) {
                let item = RP_DataServiceCat[data[i]];
                child2 += `<th rowspan="2" class="sercat d-none">${item != undefined ? item.Name : '@Local["Khác"]'}</th>`;
            }

            $('#ABG_Row_Child1').append(child1);

            $('#ABG_Row_Child2').append(child2);
        }
        return numCols;
    }

    function ABG_RenderHeaderGender(key, data) {
        let numCols = 0
        if (data && data.length > 0) {
            numCols = data.length * 2;
            let child1 = `<th id="ABG_Row_Th_gender_${key}" colspan="${numCols}" data-key="${key}" class="child1 gender d-none">@Local["Giới tính"]</th>`;
            let child2 = ``, child3 = ``;
            for (let i = 0; i < data.length; i++) {
                child2 += `<th colspan="2" class="gender d-none">${data[i] || '@Local["Khác"]'}</th>`;
                child3 += `<th class="gender d-none">@Local["Số lượng"]</th>
                                                      <th class="gender d-none">@Local["Doanh thu"]</th>`
            }

            $('#ABG_Row_Child1').append(child1);

            $('#ABG_Row_Child2').append(child2);

            $('#ABG_Row_Child3').append(child3);
        }
        return numCols;
    }

    function ABG_RenderHeaderAge(key, data) {
        let numCols = 0;
        if (data && data.length > 0) {
            numCols = data.length * 2;
            let child1 = `<th id="ABG_Row_Th_age_${key}" colspan="${numCols}" data-key="${key}" class="child1 age d-none">@Local["Độ tuổi"]</th>`;
            let child2 = ``, child3 = ``;
            for (let i = 0; i < data.length; i++) {
                child2 += `<th colspan="2" class="age d-none">${data[i] || '@Local["Khác"]'}</th>`;
                child3 += `<th class="age d-none">@Local["Số lượng"]</th>
                                                       <th class="age d-none">@Local["Doanh thu"]</th>`
            }

            $('#ABG_Row_Child1').append(child1);

            $('#ABG_Row_Child2').append(child2);

            $('#ABG_Row_Child3').append(child3);
        }
        return numCols;
    }

    //#endregion

    //#region //RENDER BODY
    function ABG_RenderBody(data, source_unique, cat_unique, gender_unique, age_unique, sourcedata, catdata, genderdata, agedata, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            let trtotal = '';
            let tamountbranch = 0, tquantbranch = 0;
            let tamount = 0, tamountnew = 0, tamountold = 0, tquant = 0, tquantnew = 0, tquantold = 0;
            let tsource = [], tcat = [], tgender = [], tage = [];
            let dataBranch = Object.values(ABG_MasterDataByBranch);
            for (let i = 0; i < dataBranch.length; i++) {
                let itemBranch = dataBranch[i];
                let indexData = data.findIndex(e => e.BranchID == itemBranch.ID)
                let item = data[indexData];
                let branchID = itemBranch.ID ?? 0;
                let branch = RP_DataBranch[branchID] ?? '';
                let revContent = ABG_RenderRevenue(item);
                let sourceContent = ABG_RenderSource(item, sourcedata, source_unique, tsource);
                let sercatContent = ABG_RenderSerCat(item, catdata, cat_unique, tcat);
                let genderContent = ABG_RenderGender(item, genderdata, gender_unique, tgender);
                let ageContent = ABG_RenderAge(item, agedata, age_unique, tage);
                tquant = tquant + (item?.TotalCust ?? 0);
                tamount = tamount + (item?.Amount ?? 0);
                tquantnew = tquantnew + (item?.TotalNew ?? 0);
                tamountnew = tamountnew + (item?.AmountNew ?? 0);
                tquantold = tquantold + (item?.TotalOld ?? 0);
                tamountold = tamountold + (item?.AmountOld ?? 0);
                let tr = `${revContent}
                                ${sourceContent}
                                ${sercatContent}
                                ${genderContent}
                                ${ageContent}
                                `;
                if ($(`#ABG_Row_Tr_${branchID}`).length) {
                    $(`#ABG_Row_Tr_${branchID}`).append(tr);
                }
                else {
                    let totalquan = itemBranch?.totalQuant ?? 0;
                    let totalamount = itemBranch?.totalAmount ?? 0;
                    let totalpaid = itemBranch?.totalPaid ?? 0;
                    let totalpricediscounted = itemBranch?.totalPriceDiscounted ?? 0;
                    let totaldebt = totalpricediscounted - totalpaid;

                    tquantbranch += totalquan;
                    tamountbranch += totalamount;
                    tr = `
                            <tr id="ABG_Row_Tr_${branchID}" class="vt-number" role="row">
                                <td class="vt-number-order"></td>
                                <td id="ABG_Row_Tr_BrN_${branchID}">
                                    <a href="#" class="border-1 border-primary border-bottom ABG_RowBranch mb-0 text-sm fw-bold" data-id="${branchID}">
                                        ${(branch?.Name ?? '')}
                                    </a>
                                </td>
                                <td id="ABG_Row_Tr_TQuant_${branchID}">${formatNumber(totalquan)}
                                <td id="ABG_Row_Tr_TAmount_${branchID}">${formatNumber(totalamount)}
                                <td id="ABG_Row_Tr_TPriceDiscounted_${branchID}">${formatNumber(totalpricediscounted)}
                                <td id="ABG_Row_Tr_TPaid_${branchID}">${formatNumber(totalpaid)}
                                <td id="ABG_Row_Tr_TDebt_${branchID}">${formatNumber(totaldebt)}
                                ${tr}
                            </tr>`;
                    myNode.insertAdjacentHTML("beforeend", tr);
                }
            }
            let itemTotalAll = ABG_MasterDataAll && ABG_MasterDataAll[0];
            trtotal = '<td>' + formatNumber(tquant) + '</td>'
                + '<td>' + formatNumber(tamount) + '</td>'
                + '<td>' + formatNumber(tquantnew) + '</td>'
                + '<td>' + formatNumber(tamountnew) + '</td>'
                + '<td>' + formatNumber(tquantold) + '</td>'
                + '<td>' + formatNumber(tamountold) + '</td>';
            for (let j = 0; j < tsource.length; j++) {
                trtotal = trtotal + '<td class="source d-none">' + formatNumber(tsource[j]?.quant ?? 0) + '</td>'
                trtotal = trtotal + '<td class="source d-none">' + formatNumber(tsource[j]?.amount ?? 0) + '</td>'
            }
            for (let j = 0; j < tcat.length; j++) {
                trtotal = trtotal + '<td class="sercat d-none">' + formatNumber(tcat[j]?.amount ?? 0) + '</td>'
            }
            for (let j = 0; j < tgender.length; j++) {
                trtotal = trtotal + '<td class="gender d-none">' + formatNumber(tgender[j]?.quant ?? 0) + '</td>'
                trtotal = trtotal + '<td class="gender d-none">' + formatNumber(tgender[j]?.amount ?? 0) + '</td>'
            }
            for (let j = 0; j < tage.length; j++) {
                trtotal = trtotal + '<td class="age d-none">' + formatNumber(tage[j]?.quant ?? 0) + '</td>'
                trtotal = trtotal + '<td class="age d-none">' + formatNumber(tage[j]?.amount ?? 0) + '</td>'
            }
            if ($('#ABG_GridFooter_Row').length) {
                $('#ABG_GridFooter_Row').append(trtotal);
            }
            else {
                trtotal = '<tr id="ABG_GridFooter_Row" class="text-white bg-gradient bg-primary" role="row">'
                    + '<td></td>'
                    + '<td><a href="#" class="border-1 border-white text-white border-bottom ABG_RowBranch mb-0 text-sm fw-bold" data-id="0">@Local["Tổng"]</a></td>'
                    + '<td>' + formatNumber(tquantbranch) + '</td>'
                    + '<td>' + formatNumber(tamountbranch) + '</td>'
                    + '<td>' + formatNumber(itemTotalAll?.PriceDiscounted) + '</td>'
                    + '<td>' + formatNumber(itemTotalAll?.Paid) + '</td>'
                    + '<td>' + formatNumber(itemTotalAll?.PriceDiscounted - itemTotalAll?.Paid) + '</td>'
                    + trtotal
                    + '</tr>';
                $('#ABG_GridFooter').html(trtotal);
            }
        }
    }

    function ABG_RenderRevenue(item) {
        let result = `<td>${formatNumber(item?.TotalCust ?? '')}</td>
                                                  <td>${formatNumber(item?.Amount ?? '')}</td>
                                                  <td>${formatNumber(item?.TotalNew ?? '')}</td>
                                                  <td>${formatNumber(item?.AmountNew ?? '')}</td>
                                                  <td>${formatNumber(item?.TotalOld ?? '')}</td>
                                                  <td>${formatNumber(item?.AmountOld ?? '')}</td>`;
        return result;
    }

    function ABG_RenderSource(item, sourcedata, source_unique, tsource) {
        let result = ``;
        for (let j = 0; j < source_unique.length; j++) {
            let _item = sourcedata.filter(v => v.RevMonth === item?.RevMonth && v.RevYear === item?.RevYear && v.BranchID === item?.BranchID && v.Source === source_unique[j]);
            let _itemquant = _item[0] != undefined ? _item[0].TotalCust : 0;
            let _itemamount = _item[0] != undefined ? _item[0].Amount : 0;
            result += `<td class="source d-none">${formatNumber(item && item != undefined ? _itemquant : '')}</td>
                                                   <td class="source d-none">${formatNumber(item && item != undefined ? _itemamount : '')}</td>`;
            if (tsource[j] != undefined && Object.keys(tsource[j]).length > 0) {
                tsource[j].quant = (tsource[j]?.quant ?? 0) + _itemquant;
                tsource[j].amount = (tsource[j]?.amount ?? 0) + _itemamount;
            }
            else {
                tsource[j] = { quant: _itemquant, amount: _itemamount }
            }
        }
        return result;
    }

    function ABG_RenderSerCat(item, catdata, cat_unique, tcat) {
        let result = ``;
        for (let j = 0; j < cat_unique.length; j++) {
            let _item = catdata.filter(v => v.RevMonth === item?.RevMonth && v.RevYear === item?.RevYear && v.BranchID === item?.BranchID && v.ServiceCat === cat_unique[j]);
            let _itemquant = _item[0] != undefined ? _item[0].TotalCust : 0;
            let _itemamount = _item[0] != undefined ? _item[0].Amount : 0;
            result += `<td class="sercat d-none">${formatNumber(item && item != undefined ? _itemamount : '')}</td>`;
            if (tcat[j] != undefined && Object.keys(tcat[j]).length > 0) {
                tcat[j].amount = (tcat[j]?.amount ?? 0) + _itemamount;
            }
            else {
                tcat[j] = { quant: _itemquant, amount: _itemamount }
            }
        }
        return result;
    }

    function ABG_RenderGender(item, genderdata, gender_unique, tgender) {
        let result = ``;
        for (let j = 0; j < gender_unique.length; j++) {
            let _item = genderdata.filter(v => v.RevMonth === item?.RevMonth && v.RevYear === item?.RevYear && v.BranchID === item?.BranchID && v.Gender === gender_unique[j]);
            let _itemquant = _item[0] != undefined ? _item[0].TotalCust : 0;
            let _itemamount = _item[0] != undefined ? _item[0].Amount : 0;
            result += `<td class="gender d-none">${formatNumber(item && item != undefined ? _itemquant : '')}</td>
                                                       <td class="gender d-none">${formatNumber(item && item != undefined ? _itemamount : '')}</td>`;
            if (tgender[j] != undefined && Object.keys(tgender[j]).length > 0) {
                tgender[j].quant = (tgender[j]?.quant ?? 0) + _itemquant;
                tgender[j].amount = (tgender[j]?.amount ?? 0) + _itemamount;
            }
            else {
                tgender[j] = { quant: _itemquant, amount: _itemamount }
            }
        }
        return result;
    }

    function ABG_RenderAge(item, agedata, age_unique, tage) {
        let result = ``;
        for (let j = 0; j < age_unique.length; j++) {
            let _item = agedata.filter(v => v.RevMonth === item?.RevMonth && v.RevYear === item?.RevYear && v.BranchID === item?.BranchID && v.BirthArea === age_unique[j]);
            let _itemquant = _item[0] != undefined ? _item[0].TotalCust : 0;
            let _itemamount = _item[0] != undefined ? _item[0].Amount : 0;
            result += `<td class="age d-none">${formatNumber(item && item != undefined ? _itemquant : '')}</td>
                                                   <td class="age d-none">${formatNumber(item && item != undefined ? _itemamount : '')}</td>`;
            if (tage[j] != undefined && Object.keys(tage[j]).length > 0) {
                tage[j].quant = (tage[j]?.quant ?? 0) + _itemquant;
                tage[j].amount = (tage[j]?.amount ?? 0) + _itemamount;
            }
            else {
                tage[j] = { quant: _itemquant, amount: _itemamount }
            }
        }
        return result;
    }
    //#endregion

    //#endregion
    //#region //EVENT
    function ABG_Filter() {
        $('#ABG_Source').change(function () {
            if ($('#ABG_Source').is(":checked")) {
                ABG_ChangeParrentCols(type = 'source', true);
                $('#ABG_Grid .source').removeClass("d-none");
            }
            else {
                ABG_ChangeParrentCols(type = 'source', false);
                $('#ABG_Grid .source').addClass("d-none");
            }
        })

        $('#ABG_SerCat').change(function () {
            if ($('#ABG_SerCat').is(":checked")) {
                ABG_ChangeParrentCols(type = 'sercat', true);
                $('#ABG_Grid .sercat').removeClass("d-none");
            }
            else {
                ABG_ChangeParrentCols(type = 'sercat', false);
                $('#ABG_Grid .sercat').addClass("d-none");
            }
        })

        $('#ABG_Gender').change(function () {
            if ($('#ABG_Gender').is(":checked")) {
                ABG_ChangeParrentCols(type = 'gender', true);
                $('#ABG_Grid .gender').removeClass("d-none");
            }
            else {
                ABG_ChangeParrentCols(type = 'gender', false);
                $('#ABG_Grid .gender').addClass("d-none");
            }
        })

        $('#ABG_Age').change(function () {
            if ($('#ABG_Age').is(":checked")) {
                ABG_ChangeParrentCols(type = 'age', true);
                $('#ABG_Grid .age').removeClass("d-none");
            }
            else {
                ABG_ChangeParrentCols(type = 'age', false);
                $('#ABG_Grid .age').addClass("d-none");
            }
        })

    }

    function ABG_ChangeParrentCols(type = 'source', isAdding = true) {
        $(`#ABG_Grid .child1.${type}`).each(function (i, obj) {
            let key = $(this).attr('data-key');
            let numcols = !isNaN(Number($(this).attr('colspan'))) ? Number($(this).attr('colspan')) : 0;
            let parrenCols = !isNaN(Number($(`#ABG_Row_Tr_Month_${key}`).attr('colspan'))) ? Number($(`#ABG_Row_Tr_Month_${key}`).attr('colspan')) : 1;
            let leftCols = isAdding ? parrenCols + numcols : parrenCols - numcols;
            $(`#ABG_Row_Tr_Month_${key}`).attr('colspan', leftCols);
        });
    }
    function ABG_MaterEvent() {
        $('#ABG_Grid thead').on('click', '.ABG_HeaderMonth', function () {
            let month = Number($(this).attr('data-month')) ? Number($(this).attr('data-month')) : 0;
            let year = Number($(this).attr('data-year')) ? Number($(this).attr('data-year')) : 0;
            ABG_Detail_NumDayOfMonth = new Date(year, month, 0).getDate();
            let _dateFrom = "@Model._dateFrom";
            let _dateTo = "@Model._dateTo";
            ABG_Detail_Month = month, ABG_Detail_Year = year;
            ABG_Detail_Month_DateFrom = ConvertString_DMY_To_DateTime(_dateFrom) < ConvertString_DMY_To_DateTime(`01-${month}-${year}`) ? `01-${month}-${year}` : _dateFrom;
            ABG_Detail_Month_DateTo = ConvertString_DMY_To_DateTime(_dateTo) > ConvertString_DMY_To_DateTime(`01-${month}-${year}`) ? `${ABG_Detail_NumDayOfMonth}-${month}-${year}` : _dateTo;
            $("#ABG_Detail_Branch_Container").hide();
            $("#ABG_Detail_Month_Container").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#ABG_Detail_Month_Container").offset().top
            }, 300);
            $("#ABG_Detail_Month_Tittle").html(`${Outlang["Sys_doanh_thu_chi_nhanh"] ?? 'Doanh thu chi nhánh'} ${month}/${year}`);

            ABG_DetailLoad_ByMonth();
        });

        $('#ABG_Grid tbody,#ABG_Grid tfoot').on('click', '.ABG_RowBranch', function () {
            ABG_Detail_BranchID = Number($(this).attr('data-id')) ? Number($(this).attr('data-id')) : 0;
            $("#ABG_Detail_Month_Container").hide();
            $("#ABG_Detail_Branch_Container").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#ABG_Detail_Branch_Container").offset().top
            }, 300);
            let branch = (RP_DataBranch[ABG_Detail_BranchID] != undefined) ? RP_DataBranch[ABG_Detail_BranchID].Name : ''
            if (ABG_Detail_BranchID != 0) {
                $("#ABG_Detail_Branch_Tittle").html(`${Outlang["Sys_doanh_thu_chi_nhanh"] ?? 'Doanh so chi nhánh'} ${branch}`);
            }
            else {
                $("#ABG_Detail_Branch_Tittle").html(`${Outlang["Sys_doanh_thu_chi_nhanh"] ?? 'Doanh so chi nhánh'} @Local["Tất cả"]`);
            }

            ABG_DetailLoad_ByBranch();
        });
    }

    //#endregion

    //#region //LOADDATA DETAIL
    function ABG_DetailLoad_ByMonth() {
        $('#ABG_Detail_Month_dtContent_Th_Month').html(Outlang[`Tháng ${ABG_Detail_Month}`] ?? `Tháng ${ABG_Detail_Month}`);
        ABG_Detail_Month_RenderHeader();
        if (ABG_Month_xhrLoadDetail && ABG_Month_xhrLoadDetail.readyState != 4) ABG_Month_xhrLoadDetail.abort();
        let _branchID = "@Model._branchID";
        IndexReport = 0;
        ABG_Month_xhrLoadDetail = AjaxLoad(url = "/Report/Revenue/Branch/AllBranchGrid/?handler=LoadataDetailByMonth"
            , data = {
                'branchID': _branchID,
                'dateFrom': ABG_Detail_Month_DateFrom,
                'dateTo': ABG_Detail_Month_DateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    let remakeData = ABG_Detail_Month_RemakeData(data);
                    ABG_Detail_Month_Render(remakeData, 'ABG_Detail_Month_dtContentBody');
                }
                else {
                    notiError_SW();
                }
            }
        );
    }

    function ABG_Detail_Month_RemakeData(data) {
        let result = {};
        result = data.reduce((p, v) => {
            if (!p[v.BranchID]) {
                let dayOfMonth = ABG_Detail_Month_Init_DayOfMonth() ?? {};
                p[v.BranchID] = {
                    BranchID: v.BranchID
                    , Amount: { ...dayOfMonth }
                    , AmountNew: { ...dayOfMonth }
                    , AmountOld: { ...dayOfMonth }
                    , TotalCust: { ...dayOfMonth }
                    , TotalNew: { ...dayOfMonth }
                    , TotalOld: { ...dayOfMonth }
                }
            }
            ABG_Detail_Month_RemakeItemData(p[v.BranchID], currItem = v);
            return p;
        }, {});
        return result;
    }

    function ABG_Detail_Month_Init_DayOfMonth() {
        let result = {};
        for (let i = 0; i < ABG_Detail_NumDayOfMonth; i++) {
            result[i] = 0;
        }
        return result;
    }

    function ABG_Detail_Month_RemakeItemData(item, currItem) {
        let day = StringYMDTODate(currItem?.DateCreated ?? '1900-01-01').getDate() - 1;
        item.Amount[day] = currItem?.Amount ?? 0;
        item.AmountNew[day] = currItem?.AmountNew ?? 0;
        item.AmountOld[day] = currItem?.AmountOld ?? 0;
        item.TotalCust[day] = currItem?.TotalCust ?? 0;
        item.TotalNew[day] = currItem?.TotalNew ?? 0;
        item.TotalOld[day] = currItem?.TotalOld ?? 0;
    }

    function ABG_DetailLoad_ByBranch() {
        if (ABG_Branch_xhrLoadDetail && ABG_Branch_xhrLoadDetail.readyState != 4) ABG_Branch_xhrLoadDetail.abort();
        let _branchID = "@Model._branchID";
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";
        let branchID = (_branchID != 0 && ABG_Detail_BranchID == 0) ? _branchID : ABG_Detail_BranchID;
        $("#ABG_Detail_Branch_dtContentBody").empty();
        ABG_Detail_Branch_IndexReport = 0;
        ABG_Branch_xhrLoadDetail = AjaxLoad(url = "/Report/Revenue/Branch/AllBranchGrid/?handler=LoadataDetailByBranch"
            , data = {
                'branchID': branchID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    ABG_Detail_Branch_DataReportMain = JSON.parse(JSON.stringify(data));
                    ABG_Detail_Branch_DataReportMainSlice = sliceIntoChunks(data, 500);
                    $("#ABG_Detail_Branch_dtContentBody").empty();
                    fnRenderBlock(ABG_Detail_Branch_DataReportMainSlice[ABG_Detail_Branch_IndexReport], "ABG_Detail_Branch_dtContentBody"
                        , blocknum = 100
                        , fnrender = ABG_Detail_Branch_Render
                        , fnsuccess = null
                    );
                    Count_Up("ABG_Detail_Branch_totalData", ABG_Detail_Branch_DataReportMain.length);
                }
                else {
                    notiError_SW();
                }
            }
        );
    }

    function ABG_Detail_Branch_RenderMore() {
        ABG_Detail_Branch_IndexReport += 1;
        if (ABG_Detail_Branch_DataReportMainSlice && ABG_Detail_Branch_DataReportMainSlice[ABG_Detail_Branch_IndexReport]) {
            fnRenderBlock(ABG_Detail_Branch_DataReportMainSlice[ABG_Detail_Branch_IndexReport], "ABG_Detail_Branch_dtContentBody"
                , blocknum = 100
                , fnrender = ABG_Detail_Branch_Render
                , fnsuccess = null
            );
        }
    }
    //#endregion

    //#region //RENDER DETAIL BRANCH DATA
    async function ABG_Detail_Branch_Render(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let CustYOld = 0;
                            if (!item.Birth.includes('1900')) {
                                let date = new Date(item.Birth);
                                let dateNow = new Date();
                                CustYOld = dateNow.getFullYear() - date.getFullYear();
                            }
                            let strmethod = (RP_DataPaymentMethod[item.PaymentMethod] != undefined ? RP_DataPaymentMethod[item.PaymentMethod].Name : '')
                                + (RP_DataPaymentMethodDetail[item.PaymentMethodTransfer] != undefined ? ' - ' + RP_DataPaymentMethodDetail[item.PaymentMethodTransfer].Name : '')
                                + (RP_DataPaymentMethodDetail[item.PaymentMethodPos] != undefined ? ' - ' + RP_DataPaymentMethodDetail[item.PaymentMethodPos].Name : '')
                                ;

                            let tr = `
                                        <tr class="vt-number">
                                            <td class="vt-number-order"></td>
                                            <td>
                                                <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustomerID}&ver=${versionofWebApplication}">${item.CustCode}</a>
                                            </td>
                                            <td data-name="custoldcode">${item.CustOldCode}</td>
                                            <td data-name="doccode">${item.DocCode}</td>
                                            <td>${item.CustName}</td>
                                            <td data-name="age">${CustYOld == 0 ? '' : CustYOld}</td>
                                            <td data-name="gender">${item.Gender}</td>
                                            <td data-name="isnew" class="text-center">${item.IsNew == 1 ? `<i class="fas fa-check text-success"></i>` : ''}</td>
                                            <td>${formatNumber(item.Amount)}</td>
                                            <td>${formatNumber(item.PriceDiscounted)}</td>
                                            <td>${formatNumber(item.Paid)}</td>
                                            <td>${formatNumber(item.Debt)}</td>
                                            <td data-name="paymentmethod">${strmethod}</td>
                                            <td data-name="type">${ABG_Detail_Branch_Render_GetType(item.Type)}</td>
                                            <td data-name="sercat">${(RP_DataServiceCat[item.ServiceCat] != undefined) ? RP_DataServiceCat[item.ServiceCat].Name : ''}</td>
                                            <td>${ABG_Detail_Branch_Render_GetName(item.Type, item.Service, item.Medicine, item.Card)}</td>
                                            <td data-name="source">${(RP_DataCustomerSource[item.Source] != undefined) ? RP_DataCustomerSource[item.Source].Name : ''}</td>
                                            <td>${(RP_DataBranch[item.BranchID] != undefined) ? RP_DataBranch[item.BranchID].Name : ''}</td>
                                            <td>${ConvertDateTimeUTC_DMYHM(item.Created)}</td>
                                        </tr>
                                    `
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                ABG_Detail_Branch_shtable.Refresh();
                clearTimeout(ABG_Detail_Branch_timeoutCount);
                ABG_Detail_Branch_timeoutCount = setTimeout(() => {
                    Count_Up("ABG_Detail_Branch_currentData", $("#" + id).children().length);
                }, 300)
                resolve();
            }, 10)

        })
    }
    function ABG_Detail_Branch_Render_GetName(type, serid, medid, cardid) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = (RP_DataService[serid] != undefined) ? RP_DataService[serid].Name : ''
                    break;
                case 2:
                    result = (RP_DataCard[cardid] != undefined) ? RP_DataCard[cardid].Name : ''
                    break;
                case 3:
                    result = (RP_DataMedicine[medid] != undefined) ? RP_DataMedicine[medid].Name : ''
                    break;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    function ABG_Detail_Branch_Render_GetType(type) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = decodeHtml('@Local["Dịch vụ/sản phẩm"]')
                    break;
                case 2:
                    result = decodeHtml('@Local["Thẻ trả trước"]')
                    break;
                case 3:
                    result = decodeHtml('@Local["Đơn thuốc"]')
                    break;
                case 4:
                    result = decodeHtml('@Local["Tiền cọc"]')
                    break;

            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    //#endregion

    //#region //RENDER DETAIL MONTH DATA
    function ABG_Detail_Month_RenderHeader() {
        let tr = '';
        for (let i = 0; i < ABG_Detail_NumDayOfMonth; i++) {
            tr += `<th>${i + 1}</th>`;
        }
        $('#ABG_Detail_Month_dtContent_Th_Month').attr('colspan', ABG_Detail_NumDayOfMonth);
        $('#ABG_Detail_Month_dtContent_Th_DayOfMonth').html(tr);
    }

    async function ABG_Detail_Month_Render(data, id) {
        new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringContent = '';
                let _data = Object.values(data);
                if (_data && _data.length > 0) {

                    for (let i = 0; i < _data.length; i++) {
                        let item = _data[i];
                        let tr = `
                                                      <tr class="vt-number">
                                                          <td rowspan="6" class="vt-number-order"></td>
                                                          <td rowspan="6">${(RP_DataBranch[item.BranchID] != undefined) ? RP_DataBranch[item.BranchID].Name : ''}</td>
                                                          <td rowspan="2">@Local["Tổng"]</td>
                                                          <td rowspan="1">@Local["Số lượng"]</td>
                                                          ${BG_Detail_Month_Render_DayItem(item.TotalCust)}
                                                      </tr>
                                                      <tr>
                                                          <td rowspan="1">@Local["Doanh thu"]</td>
                                                          ${BG_Detail_Month_Render_DayItem(item.Amount)}
                                                      </tr>
                                                      <tr>
                                                           <td rowspan="2">@Local["Khách mới"]</td>
                                                           <td rowspan="1">@Local["Số lượng"]</td>
                                                           ${BG_Detail_Month_Render_DayItem(item.TotalNew)}
                                                      </tr>
                                                      <tr>
                                                           <td rowspan="1">@Local["Doanh thu"]</td>
                                                           ${BG_Detail_Month_Render_DayItem(item.AmountNew)}
                                                      </tr>
                                                      <tr>
                                                           <td rowspan="2">@Local["Khách cũ"]</td>
                                                           <td rowspan="1">@Local["Số lượng"]</td>
                                                           ${BG_Detail_Month_Render_DayItem(item.TotalOld)}
                                                      </tr>
                                                      <tr>
                                                           <td rowspan="1">@Local["Doanh thu"]</td>
                                                           ${BG_Detail_Month_Render_DayItem(item.AmountOld)}
                                                      </tr>
                                                      `
                        myNode.insertAdjacentHTML('beforeend', tr);
                    }

                }
            }
            resolve();
        })
    }

    function BG_Detail_Month_Render_DayItem(data) {
        let tr = '';
        if (data && Object.keys(data).length > 0) {
            let total = 0;
            for (let i = 0; i < ABG_Detail_NumDayOfMonth; i++) {
                let item = !isNaN(Number(data[i])) ? Number(data[i]) : 0;
                total += item;
                tr += `<td>${formatNumber(item)}</td>`;
            }
            tr += `<td>${formatNumber(total)}</td>`;
        }
        return tr;
    }

    //#endregion

    //#endregion

    //#region //EXPORT
    async function ABG_Export() {
        syslog_ExpExcel('e', Outlang['Doanh_thu_theo_chi_nhanh']);
        await exportToExcel("ABG_Grid", Outlang['Doanh_thu_theo_chi_nhanh']);
    }
    async function ABG_Detail_Month_Export() {
        let nameExcel = $("#ABG_Detail_Month_Tittle").html() || `${Outlang["Sys_doanh_thu_chi_nhanh"] ?? '@Local["Doanh thu chi tiết"] '} ${ABG_Detail_Month}/${ABG_Detail_Year}`;
        await exportToExcel("ABG_Detail_Month_dtContent", Outlang['Doanh_thu_theo_chi_nhanh']);
    }

    async function ABG_Detail_Branch_ExportDetail(isOption = 0) {
        try {
            if (ABG_Detail_Branch_DataReportMain && ABG_Detail_Branch_DataReportMain.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#ABG_Detail_Branch_Container');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "CustOldCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='custoldcode']`)).is(":checked"),
                        data: ["@Local["Mã khách hàng cũ"]"]
                    },
                    "DocCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='doccode']`)).is(":checked"),
                        data: ["@Local["Mã hồ sơ"]"]
                    },
                    "Age": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='age']`)).is(":checked"),
                        data: ["@Local["Tuổi"]"]
                    },
                    "Gender": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='gender']`)).is(":checked"),
                        data: ["@Local["Giới tính"]"]
                    },
                    "IsNew": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='isnew']`)).is(":checked"),
                        data: ["@Local["Khách hàng mới"]", (value) => {
                            return value == 1 ? 'x' : '';
                        }]
                    },
                    "Amount": ["@Local["Số tiền"]"],
                    "PriceDiscounted": ["@Local["Phát sinh"]"],
                    "Paid": ["@Local["Thanh toán"]"],
                    "Debt": ["@Local["Công nợ"]"],
                    "PaymentMethod": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='paymentmethod']`)).is(":checked"),
                        data: ["@Local["Hình thức thanh toán"]", (value, { PaymentMethodTransfer, PaymentMethodPos }) => {
                            return ((RP_DataPaymentMethod[value] != undefined) ? RP_DataPaymentMethod[value].Name : '')
                                + ((RP_DataPaymentMethodDetail[PaymentMethodTransfer] != undefined) ? ' - ' + RP_DataPaymentMethodDetail[PaymentMethodTransfer].Name : '')
                                + ((RP_DataPaymentMethodDetail[PaymentMethodPos] != undefined) ? ' - ' + RP_DataPaymentMethodDetail[PaymentMethodPos].Name : '')
                                ;
                        }]
                    },
                    "Type": ["@Local["Loại"]", (value, { Type }) => {
                        return ABG_Detail_Branch_Render_GetType(Type);
                    }],
                    "ServiceCat": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='sercat']`)).is(":checked"),
                        data: ["@Local["Nhóm dịch vụ"]", (value) => {
                            return (RP_DataServiceCat[value] != undefined) ? RP_DataServiceCat[value].Name : '';
                        }]
                    },
                    "Service": ["@Local["Dịch vụ"]", (value, { Type, Service, Medicine, Card }) => {
                        return ABG_Detail_Branch_Render_GetName(Type, Service, Medicine, Card);
                    }],
                    "Source": ["@Local["Nguồn"]", (value) => {
                        return (RP_DataCustomerSource[value] != undefined) ? RP_DataCustomerSource[value].Name : '';
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", (value, { BranchID }) => {
                        return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                    }],
                    "Created": ["@Local["Ngày tạo"]", (value) => { return ConvertDateTimeUTC_DMYHM(value) }]
                }

                syslog_ExpExcel('e', Outlang["Sys_doanh_thu_chi_nhanh"]);
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'ABG_Detail_Branch_dtContentBody', PermissionTable_TabControl);
                let nameExcel = $("#ABG_Detail_Branch_Tittle").html() || `${Outlang["Sys_doanh_thu_chi_nhanh"] ?? '@Local["Doanh thu chi tiết"]'}`;
                exportJsonToExcel(nameExcel, ABG_Detail_Branch_DataReportMain, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }

    async function ABG_Detail_Branch_DetailPrintReport() {
        try {
            if (ABG_Detail_Branch_DataReportMain && ABG_Detail_Branch_DataReportMain.length != 0) {
                let _branchID = ABG_Detail_BranchID;
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "DocCode": ["@Local["Mã hồ sơ"]", {
                        isShow: $(`.shtoogle[data-name='doccode']`).is(":checked")
                    }],
                    "Age": ["@Local["Tuổi"]", {
                        isShow: $(`.shtoogle[data-name='age']`).is(":checked")
                    }],
                    "Gender": ["@Local["Giới tính"]", {
                        isShow: $(`.shtoogle[data-name='gender']`).is(":checked")
                    }],
                    "IsNew": ["@Local["Khách hàng mới"]", {
                        callbackRenderValue: (value) => { return value == 1 ? 'x' : ''; }
                        , isShow: $(`.shtoogle[data-name='isnew']`).is(":checked")
                    }],
                    "Amount": ["@Local["Số tiền"]"],
                    "PriceDiscounted": ["@Local["Phát sinh"]"],
                    "Paid": ["@Local["Thanh toán"]"],
                    "Debt": ["@Local["Công nợ"]"],
                    "Type": ["@Local["Loại"]", {
                        callbackRenderValue: (value, { Type }) => {
                            return ABG_Detail_Branch_Render_GetType(Type);
                        }
                    }],
                    "ServiceCat": ["@Local["Nhóm dịch vụ"]", {
                        callbackRenderValue: (value) => {
                            return (RP_DataServiceCat[value] != undefined) ? RP_DataServiceCat[value].Name : '';
                        }
                        , isShow: $(`.shtoogle[data-name='sercat']`).is(":checked")
                    }],
                    "Service": ["@Local["Dịch vụ"]", {
                        callbackRenderValue: (value, { Type, Service, Medicine, Card }) => {
                            return ABG_Detail_Branch_Render_GetName(Type, Service, Medicine, Card);
                        }
                    }],
                    "Source": ["@Local["Nguồn"]", {
                        callbackRenderValue: (value) => {
                            return (RP_DataCustomerSource[value] != undefined) ? RP_DataCustomerSource[value].Name : '';
                        }
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        callbackRenderValue: (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }
                    }],
                    "Created": ["@Local["Ngày tạo"]", {
                        callbackRenderValue: (value) => { return ConvertDateTimeUTC_DMYHM(value) }
                    }]
                };
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let namePrint = $("#ABG_Detail_Branch_Tittle").html() || `${Outlang["Sys_doanh_thu_chi_nhanh"] ?? 'excel'}`;
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = namePrint, ABG_Detail_Branch_DataReportMain, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
                        //#endregion
</script>