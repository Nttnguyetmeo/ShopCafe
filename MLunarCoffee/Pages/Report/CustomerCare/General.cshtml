@page
@model MLunarCoffee.Pages.Report.CustomerCare.General.CustCareGenModel
@{
    Layout = null;
}

<script>js_require('/js/comon/initialize_setting.js');</script>

<div class="vtcardheader card-header pb-0 px-0">
    <div class="left">
        <h6 class="mb-0">@Local["Báo cáo tổng quát chăm sóc khách hàng"]</h6>
        <p class="text-sm mb-0">@Local["Báo cáo tổng quát chăm sóc khách hàng theo nhân viên"]</p>
    </div>
    <div class="right">
        <div class="icon-hover mx-1"
             data-bs-toggle="tooltip" data-bs-placement="top"
             data-bs-original-title="@Local["Thu gọn"]">
            <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
               data-bs-toggle="collapse" href="#CustCareGen_Div" aria-expanded="true"></i>
        </div>
        <div class="icon-hover mx-1"
             data-bs-toggle="tooltip" data-bs-placement="top"
             data-bs-original-title="@Local["Tải lại"]">
            <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
               onclick="event.preventDefault(); return CustCareGen_LoadInit()"></i>
        </div>
        <div class="icon-hover mx-1"
             data-bs-toggle="tooltip" data-bs-placement="top"
             data-bs-original-title="@Local["Xuất excel"]">
            <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
               onclick="event.preventDefault(); return CustCareGen_Export()"></i>
        </div>
    </div> 
</div>
<div class="collapsesticky collapse show" id="CustCareGen_Div">
    <div class="card-body p-0 pt-0">
        <div class="row m-0 d-flex align-items-center">
            <div class="col-12 col-lg-6 pe-2 ms-auto">
                <div class="row d-flex justify-content-end">
                    <div class="col-12 col-lg-3 pb-1 px-0 pe-lg-2">
                        <div class="ui fluid search selection dropdown form-control" id="CustCareGen_CareEmpType">
                            <input type="hidden" />
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text"></div>
                            <div id="CustCareGen_CbbCareEmpType" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                    <div class="col col-lg-3 pb-1 px-0 pe-2" id="CustCareGen_CareTypeCol">
                        <div class="ui fluid search selection dropdown form-control" id="CustCareGen_CareType">
                            <input type="hidden" />
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text"></div>
                            <div id="CustCareGen_CbbCareType" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                    <div class="col-auto px-0">
                        <div class="bg-gradient-primary btn d-flex justify-content-center m-0" onclick="CustCareGen_LoadInit()">@Local["OK"]</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row px-2">
            <div class="col-12 col-sm-12 col-md-12 col-xl-12 p-1 mb-5">
                <div class="fw-bold text-center text-dark text-sm">
                    @Local["Số lượng xử lý"]:
                    <span id="CustCareGen_PieTotal" class="fw-bolder"></span>
                </div>
                <div class="position-relative mt-0 mt-md-4 my-2" style="min-height: 150px;">
                    <div class="chart position-absolute mt-4 top-50 start-50 translate-middle">
                        <canvas id="CustCareGen_pienumber" class="chart-canvas" height="230"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-12 col-md-12 col-xl-12 p-1 mt-3">
                <div class="mt-2 table-responsive max-height-500">
                    <table class="table vt-table mb-0" id="CustCareGen_Grid">
                        <thead>
                            <tr>
                                <th style="width: 45px;">#</th>
                                <th class="ps-6">@Local["Nhân viên"]</th>
                                <th>@Local["Tổng xử lý"]</th>
                                <th>@Local["Cần gọi lại"]</th>
                                <th>@Local["Xử lý"] (%)</th>
                            </tr>
                        </thead>
                        <tbody id="CustCareGen_GridBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

</div>
<div id="CustCareGen_GeneralDetail" class="mt-3">
    <div class="vtcardheader card-header p-0">
        <div class="left">
            <p id="CustCareGen_DetailEmp" class="text-md text-dark font-weight-bold mb-1">@Local["Tất cả nhân viên"]</p>
        </div>
        <div class="right">
            <div class="wrap">
                <div class="wrapblock">
                    <div class="text-primary fw-bold d-inline mx-2 text-nowrap mt-1">
                        <span id="CustCareGen_currentdetaildata">0</span>
                        <span class="mx-2">/</span>
                        <span id="CustCareGen_totaldetaildata">0</span>
                    </div>
                    <div class="icon-hover mx-1 mt-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["Thu gọn"]">
                        <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                           data-bs-toggle="collapse" href="#CustCareGen_DivDetail" aria-expanded="true"></i>
                    </div>
                    <div class="icon-hover mx-1 mt-1"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["In báo cáo"]">
                        <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                           onclick="event.preventDefault(); CustCareGen_DetailPrintReport()"></i>
                    </div>
                    <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel">
                        <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Xuất excel"]">
                            <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                        </div>
                        <div class="input-group-text icon-hover w-auto vttech-input-item">
                            <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return CustCareGen_ExportDetail(0)">@Local["Tất cả"]</i>
                        </div>
                        <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                            <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return CustCareGen_ExportDetail(1)">@Local["Tùy chọn"]</i>
                        </div>
                    </div>
                     <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                        @Local["Xem thêm"]
                    </button>
                </div> 
            </div>
        </div>
        <div class="toggle">
            <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                <ul class="card card-body text-dark text-capitalize opacity-10">
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="custcode" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Mã khách hàng"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="ticketcode" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Mã ticket"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="branch" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Chi nhánh"]</p>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="collapsesticky collapse show" id="CustCareGen_DivDetail">
        <div class="card-body p-0 pt-0">
            <div class="m-0 my-3 mobile-responsive vt-header-sticky">
                <div id="CustCareGen_LoaderList" class="waitingdiv text-center w-100 mt-n9 position-absolute top-100 start-50 translate-middle-x">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
                <table data-name="CustCareGen_GridDetail" class="table vt-table mb-0" id="CustCareGen_GridDetail">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th style="min-width:150px">@Local["Nhân viên chăm sóc"]</th>
                            <th style="min-width:250px">@Local["Chi tiết xử lý"]</th>
                            <th style="min-width:150px">@Local["Tình trạng"]</th>
                            <th style="min-width:150px">@Local["Khách hàng"]</th>
                            <th data-name="custcode" style="min-width: 130px">@Local["Mã khách hàng"]</th>
                            <th data-name="ticketcode" style="min-width: 130px">@Local["Mã ticket"]</th>
                            <th style="min-width:150px">@Local["Nhân viên phụ trách"]</th>
                            <th style="min-width:150px">@Local["Ngày thực hiện"]</th>
                            <th style="min-width:150px">@Local["Thời gian gọi lại"]</th>
                            <th style="min-width:150px">@Local["Loại chăm sóc"]</th>
                            <th data-name="branch" style="min-width:150px">@Local["Chi nhánh"]</th>
                        </tr>
                    </thead>
                    <tbody id="CustCareGen_GridDetailBody">
                    </tbody>
                </table>
            </div>
            <button class="btn btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return CustCareGen_RenderDetailMore();">
                @Local["Xem thêm"]
            </button>
        </div>

    </div>
</div>
<script type="text/javascript">

    let shtableDetail;
    let _branchID = "@Model._branchID";
    let _dateFrom = "@Model._dateFrom";
    let _dateTo = "@Model._dateTo";
    let IndexReportDetail = 0;
    let timeoutCountDetail;
    let CustCareGen_DataCompoType = [{ "ID": 0, "Name": "@Local["Tất cả loại"]" }, { "ID": 1, "Name": "@Local["Nhắc lịch hẹn"]" }, { "ID": 2, "Name": "@Local["Đến không phát sinh dịch vụ"]" }
        , { "ID": 3, "Name": "@Local["Chăm sóc sinh nhật"]" }, { "ID": 4, "Name": "@Local["Đặt lịch nhưng không đến"]" }, { "ID": 5, "Name": "@Local["Chăm sóc khách hàng sau điều trị"]" }
        , { "ID": 6, "Name": "@Local["Khách hàng phàn nàn"]" }, { "ID": 7, "Name": "@Local["Telesale follow"]" }, { "ID": 8, "Name": "@Local["Lịch sử khách hàng"]" }
        , { "ID": 9, "Name": "@Local["Chăm sóc"]" }, { "ID": 10, "Name": "@Local["Hủy lịch hẹn"]" }];;
    let CustCarGen_DataEmpType = [{ "ID": 1, "Name": "@Local["Nhân viên chăm sóc"]" }, { "ID": 2, "Name": "@Local["Nhân viên telesale"]" }]
    let DataReportMain = [];
    let DataReportDetail = [];
    let DataReportDetailSlice = [];
    $(document).ready(function () {
        ToolPopper();
        CustCareGen_Init();
        CustCareGen_LoadInit();
        shtableDetail = $("#CustCareGen_GridDetail").TableExpandColumn({
            shtoogle: $('.shtoogleDetail')
        });
        Checking_TabControl_Permission();
    });

    function CustCareGen_Init() {
        Load_Combo(CustCareGen_DataCompoType, 'CustCareGen_CbbCareType', true);
        $("#CustCareGen_CareType").dropdown('refresh');
        $("#CustCareGen_CareType").dropdown('set selected', CustCareGen_DataCompoType[0].ID.toString());
        Load_Combo(CustCarGen_DataEmpType, 'CustCareGen_CbbCareEmpType', true);
        $("#CustCareGen_CareEmpType").dropdown('refresh');
        $("#CustCareGen_CareEmpType").dropdown('set selected', CustCarGen_DataEmpType[0].ID.toString());
    }

    async function CustCareGen_LoadInit() {
        CustCareGen_LoadDataReport();
        CustCareGen_LoadDataDetail();
    }

    async function CustCareGen_LoadDataReport() {
        let Type = 0;
        let TypeEmp = Number($('#CustCareGen_CareEmpType').dropdown('get value') == '') ? 0 : Number($('#CustCareGen_CareEmpType').dropdown('get value'));
        TypeEmp == 2 ? Type = 7 : Type = Number($('#CustCareGen_CareType').dropdown('get value') == '') ? 0 : Number($('#CustCareGen_CareType').dropdown('get value'));

        AjaxLoad(url = "/Report/CustomerCare/General?handler=Loadata"
            , data = {
                'branchID': _branchID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
                'Type': Type
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    DataReportMain = JSON.parse(result);
                    let pietotal = 0;
                    for (let i = 0; i < DataReportMain.length; i++) {
                        DataReportMain[i].Name = CustCareGen_CheckUndefined(MTDataEmployee, DataReportMain[i].EmpID);
                        pietotal += Number(DataReportMain[i]['TotalExcute']);
                    }
                    $('#CustCareGen_PieTotal').html(formatNumber(Number(pietotal)));
                    CustCareGen_ReportPie_Description(DataReportMain, pietotal, 'CustCareGen_GridBody');
                    rp_pie("CustCareGen_pienumber", DataReportMain, 'Name', 'TotalExcute');
                    //CustCareGen_LoadDataDetail(EmpID = 0);
                    //$("#CustCareGen_GridDetailBody").html("");
                }
                else {
                    notiError_SW();
                }
            }
        );
        return false;

    }

    function CustCareGen_ReportPie_Description(data, total, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            let = 0;
            let totalProportion = 0;
            let percent = 0;
            let totalCallback = 0;
            if (data && data.length > 0) {
                for (let j = 0; j < data.length; j++) {
                    let item = data[j];
                    let _color = colorChart[j % colorChart.length];
                    percent = (j != data.length - 1) ? item['TotalExcute'] / total * 100 : 100 - totalProportion;
                    totalCallback += item['TotalCallback'];
                    totalProportion += Number(percent);
                    let tr = `<td class="vt-number-order"></td>
                            <td>
                                <div class="d-flex px-2 py-0">
                                    <span class="badge" style="background-color: ${_color}; width: 21px; height: 21px"> </span>
                                    <div class="d-flex flex-column justify-content-center ms-4 ps-1">
                                        <a href="#" class="border-1 border-primary border-bottom buttonViewClass mb-0 text-sm fw-bold" data-id="${item.UserID}" data-name="${item['Name']}">
                                        ${item['Name']}
                                    </a>
                                    </div>
                                </div>
                            </td>
                            <td class="align-middle text-end text-dark text-sm ">
                                <span class="pe-2 fw-bold me-2"> ${formatNumberToMilion(item['TotalExcute'])} </span>
                            </td>
                            <td class="align-middle text-end text-dark text-sm ">
                                <span class="pe-2 fw-bold me-2"> ${formatNumberToMilion(item['TotalCallback'])} </span>
                            </td>
                            <td class="align-middle text-end text-dark text-sm ">
                                <span class="fw-normal"> ${Number(percent).toFixed(2)}</span>
                            </td>`;

                    stringContent += `<tr class="vt-number"> ${tr} </tr>`;
                }
                stringContent += `<tr class="vt-number text-white bg-gradient bg-primary mt-2">
                            <td></td>
                            <td class="text-start">
                                <div class="d-flex px-2 py-0">
                                    <span class="badge bg-gradient bg-primary" style="width: 21px; height: 21px"> </span>
                                    <div class="d-flex flex-column justify-content-center ms-4 ps-1">
                                        <a href="#" class="text-white mb-0 text-sm fw-bold border-1 border-white border-bottom buttonViewClass" data-id="0">@Local["Tất cả"]</a>
                                    </div>
                                </div>
                            </td>
                            <td class="text-end">
                                <span class="fw-normal me-2 pe-2"> ${formatNumberToMilion(total)} </span>
                            </td>
                            <td class="text-end">
                                <span class="fw-normal me-2 pe-2"> ${formatNumberToMilion(totalCallback)} </span>
                            </td>
                            <td class="text-end">
                                <span class="fw-normal"> ${totalProportion}</span>
                            </td>
                        </tr>`;
            }
            myNode.innerHTML = stringContent;
            CustCareGen_GeneralEvent();
        }
    }

    //#region // LOAD DETAIL AND RENDER
    async function CustCareGen_LoadDataDetail(UserID = 0) {
        new Promise((resolve) => {
            setTimeout(() => {
                let Type = 0;
                let TypeEmp = Number($('#CustCareGen_CareEmpType').dropdown('get value') == '') ? 0 : Number($('#CustCareGen_CareEmpType').dropdown('get value'));
                TypeEmp == 2 ? Type = 7 : Type = Number($('#CustCareGen_CareType').dropdown('get value') == '') ? 0 : Number($('#CustCareGen_CareType').dropdown('get value'));
                AjaxLoad(url = "/Report/CustomerCare/General?handler=LoadataDetail"
                    , data = {
                        'branchID': _branchID,
                        'dateFrom': _dateFrom,
                        'dateTo': _dateTo,
                        'Type': Type,
                        'UserID': UserID
                    }
                    , async = true
                    , error = function () { notiError_SW(); }
                    , success = function (result) {
                        if (result != "0") {
                            DataReportDetail = JSON.parse(result);
                            $("#CustCareGen_totaldetaildata").html(formatNumber(DataReportDetail.length));
                            let data = DataReportDetail.reduce((newArray, element) => {
                                newArray.push(element);
                                return newArray;
                            }, []);

                            DataReportDetailSlice = sliceIntoChunks(data, 500);
                            if (DataReportDetailSlice && DataReportDetailSlice.length != 0) {
                                fnRenderBlock(DataReportDetailSlice[IndexReportDetail], "CustCareGen_GridDetailBody"
                                    , blocknum = 100
                                    , fnrender = CustCareGen_DetailRender
                                    , fnsuccess = null
                                );
                            }
                            else {
                                timeoutCountDetail = setTimeout(() => {
                                    let rowLength = $("#CustCareGen_GridDetailBody").children().length;
                                    Count_Up("CustCareGen_currentdetaildata", formatNumber(rowLength));
                                }, 300)
                            }
                        }
                        else {
                            notiError_SW();
                        }

                    }
                    , sender = null
                    , before = function (e) {
                        $("#CustCareGen_LoaderList").show();
                    }
                    , complete = function (e) {
                        $("#CustCareGen_LoaderList").hide();
                    }
                );
                return false;

            }, 100)
        });
    }
    function CustCareGen_RenderDetailMore() {
        IndexReportDetail += 1;
        if (DataReportDetailSlice && DataReportDetailSlice[IndexReportDetail]) {
            fnRenderBlock(DataReportDetailSlice[IndexReportDetail], "CustCareGen_GridDetailBody"
                , blocknum = 100
                , fnrender = CustCareGen_DetailRender
                , fnsuccess = null
            );
        }
    }
    async function CustCareGen_DetailRender(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        let tr = '';
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let StaffRepon = item.Type == 7 ? item.TeleStaff : item.CCStaff;
                            let CustName = item.TicketID != 0
                                ? `<a class="border-1 border-primary border-bottom mb-0 text-sm fw-bold" target="_blank" href="/Marketing/TicketAction?CustomerID=${item.CustID}&TicketID=${item.TicketID}&ver=${versionofWebApplication}">
                                                        ${item.TicketName}
                                                    </a>`
                                : `<a class="border-1 border-primary border-bottom mb-0 text-sm fw-bold" target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustID}&ver=${versionofWebApplication}">
                                                ${item.CustName}
                                            </a>`
                            let tr = `<tr class="vt-number" role="row">
                                                  <td class="vt-number-order"></td>
                                                  <td>${CustCareGen_CheckUndefined(MTDataEmployee, item.EmpID)}</td>
                                                  <td><span class="content_line_clamp">${item.Content}</span></td>
                                                  <td>
                                                    <span class="badge" style="background:${item.ColoStatus}2b;color:${item.ColoStatus}">${item.StatusParentName}</span>
                                                  </td>
                                                  <td>
                                                      ${CustName}
                                                  </td>
                                                  <td data-name="custcode">${item.CustCode == 0 ? "" : item.CustCode}</td>
                                                  <td data-name="ticketcode">${item.TicketID == 0 ? "" : item.TicketID}</td>
                                                  <td>${CustCareGen_CheckUndefined(MTDataEmployee, StaffRepon)}</td>
                                                  <td>${ConvertDateTimeUTC_DMYHM(ConvertToDateRemove1900(item.DateExcute))}</td>
                                                  <td>${ConvertDateTimeUTC_DMYHM(ConvertToDateRemove1900(item.TimeCallBack))}</td>
                                                  <td>${item.Type == 0 ? "" : CustCareGen_CheckUndefined(CustCareGen_DataCompoType, item.Type)}</td>
                                                  <td data-name="branch">${CustCareGen_CheckUndefined(RP_DataBranch, item.BranchID)}</td>
                                              </tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                shtableDetail.Refresh();
                clearTimeout(timeoutCountDetail);
                timeoutCountDetail = setTimeout(() => {
                    Count_Up("CustCareGen_currentdetaildata", $("#" + id).children().length);
                }, 300)
                resolve();
            }, 10)
        })
    }
    //#endregion

    //#region //Event
    function CustCareGen_GeneralEvent() {
        $("#CustCareGen_GridBody .buttonViewClass").unbind('click').on("click", function () {
            let id = $(this).attr('data-id');

            $("#CustCareGen_GridDetailBody").html("");
            CustCareGen_LoadDataDetail(id);

            let name = $(this).attr('data-name');
            $("#CustCareGen_GeneralDetail").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#CustCareGen_GeneralDetail").offset().top
            }, 300);
            if (id == "0") {
                $("#CustCareGen_DetailEmp").html('@Local["Tất cả nhân viên"]');
            }
            else {
                $("#CustCareGen_DetailEmp").html('@Local["Nhân viên"]: ' + name);
            }
        })
        $("#CustCareGen_Div #CustCareGen_CareEmpType").change(function () {
            let _E = Number($('#CustCareGen_CareEmpType').dropdown('get value') == '') ? 0 : Number($('#CustCareGen_CareEmpType').dropdown('get value'));
            if (_E == 2) {
                $("#CustCareGen_CareType").dropdown('refresh');
                $("#CustCareGen_CareType").dropdown('set selected', CustCareGen_DataCompoType[7].ID.toString());
            }
            else {
                $("#CustCareGen_CareType").dropdown('refresh');
                $("#CustCareGen_CareType").dropdown('set selected', CustCareGen_DataCompoType[0].ID.toString());
            }
        });
        $("#CustCareGen_Div #CustCareGen_CareType").change(function () {
            let _v = Number($('#CustCareGen_CareType').dropdown('get value') == '') ? 0 : Number($('#CustCareGen_CareType').dropdown('get value'));
            if (_v == 7) {
                $("#CustCareGen_CareEmpType").dropdown('refresh');
                $("#CustCareGen_CareEmpType").dropdown('set selected', CustCarGen_DataEmpType[1].ID.toString());
            }
            else {
                $("#CustCareGen_CareEmpType").dropdown('refresh');
                $("#CustCareGen_CareEmpType").dropdown('set selected', CustCarGen_DataEmpType[0].ID.toString());
            }
        });

    }
    function CustCareGen_Export() {
        syslog_ExpExcel('e', Outlang['Bao_cao_tong_quat_cham_soc_khach_hang']);
        exportToExcel("CustCareGen_Grid", Outlang['Bao_cao_tong_quat_cham_soc_khach_hang']);
    }
    async function CustCareGen_ExportDetail(isOption = 0) {
        try {
            if (DataReportDetail && DataReportDetail.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#CustCareGen_GeneralDetail');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }],
                    "EmpID": {
                        data: ["@Local["Nhân viên chăm sóc"]", (value, { EmpID }) => {
                            return (MTDataEmployee[EmpID] != undefined) ? MTDataEmployee[EmpID].Name : '';
                        }]
                    },
                    "Content": ["@Local["Chi tiết xử lí"]"],
                    "StatusParentName": ["@Local["Tình trạng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "CustCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='custcode']`)).is(":checked"),
                        data: ["@Local["Mã khách hàng"]", (value) => {
                            return value;
                        }],
                        "TicketID": {
                            isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='ticketcode']`)).is(":checked"),
                            data: ["@Local["Mã ticket"]"]
                        },
                    },
                    "TeleStaff": {
                        data: ["@Local["Tele phụ trách"]", (value, { TeleStaff }) => {
                            return (MTDataEmployee[TeleStaff] != undefined) ? MTDataEmployee[TeleStaff].Name : '';
                        }]
                    },
                    "CCStaff": {
                        data: ["@Local["Theo chăm sóc viên"]", (value, { CCStaff }) => {
                            return (MTDataEmployee[CCStaff] != undefined) ? MTDataEmployee[CCStaff].Name : '';
                        }]
                    },
                    "DateExcute": {
                        data: ["@Local["Ngày thực hiện"]", (value) => {
                            return ConvertDateTimeUTC_DMYHM(ConvertToDateRemove1900(value));
                        }]
                    },
                    "TimeCallback": {
                        data: ["@Local["Ngày gọi lại"]", (value) => {
                            return ConvertDateTimeUTC_DMYHM(ConvertToDateRemove1900(value));
                        }]
                    },
                    "Type": {
                        data: ["@Local["Loại chăm sóc"]", (value, { Type }) => {
                            return decodeHtml(CustCareGen_DataCompoType[Type]?.Name ?? "");
                        }]
                    },
                    "BranchID": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='branch']`)).is(":checked"),
                        data: ["@Local["Mã ticket"]", (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }]
                    },
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'CustCareGen_GridDetailBody', PermissionTable_TabControl);
                let fileName = xoa_dau($("#CustCareGen_DetailEmp").text()).replaceAll(' ', '-');
                syslog_ExpExcel('e', fileName);
                exportJsonToExcel(fileName, DataReportDetail, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }

    async function CustCareGen_DetailPrintReport() {
        try {
            if (DataReportDetail && DataReportDetail.length != 0) {
                let _branchID = "@Model._branchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }],
                    "EmpID": ["@Local["Nhân viên chăm sóc"]", {
                        callbackRenderValue: (value, { EmpID }) => {
                            return (MTDataEmployee[EmpID] != undefined) ? MTDataEmployee[EmpID].Name : '';
                        }
                    }],
                    "Content": ["@Local["Chi tiết xử lí"]"],
                    "StatusParentName": ["@Local["Tình trạng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "CustCode": ["@Local["Mã khách hàng"]", {
                        isShow: $(`.shtoogle[data-name='custcode']`).is(":checked")
                    }],
                    "TicketID": ["@Local["Mã ticket"]", {
                        isShow: $(`.shtoogle[data-name='custcode']`).is(":checked")
                    }],
                    "TeleStaff": ["@Local["Tele phụ trách"]", {
                        callbackRenderValue: (value, { TeleStaff }) => {
                            return (MTDataEmployee[TeleStaff] != undefined) ? MTDataEmployee[TeleStaff].Name : '';
                        }
                    }],
                    "CCStaff": ["@Local["Theo chăm sóc viên"]", {
                        callbackRenderValue: (value, { CCStaff }) => {
                            return (MTDataEmployee[CCStaff] != undefined) ? MTDataEmployee[CCStaff].Name : '';
                        }
                    }],
                    "DateExcute": ["@Local["Ngày thực hiện"]", {
                        callbackRenderValue: (value, { DateExcute }) => {
                            return ConvertDateTimeUTC_DMYHM(ConvertToDateRemove1900(DateExcute));
                        }
                    }],
                    "TimeCallback": ["@Local["Ngày gọi lại"]", {
                        callbackRenderValue: (value, { TimeCallback }) => {
                            return ConvertDateTimeUTC_DMYHM(ConvertToDateRemove1900(TimeCallback));
                        }
                    }],
                    "Type": ["@Local["Loại chăm sóc"]", {
                        callbackRenderValue: (value, { Type }) => {
                            return decodeHtml(CustCareGen_DataCompoType[Type]?.Name ?? "");
                        }
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        isShow: $(`.shtoogle[data-name='branch']`).is(":checked"),
                        callbackRenderValue: (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }
                    }]
                };
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = Outlang["Bao_cao_tong_quat_cham_soc_khach_hang"], DataReportDetail, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
    function CustCareGen_CheckUndefined(data, id) {
        if (data[id] == undefined) return "";
        else return data[id].Name;
    }
            //#endregion
</script>