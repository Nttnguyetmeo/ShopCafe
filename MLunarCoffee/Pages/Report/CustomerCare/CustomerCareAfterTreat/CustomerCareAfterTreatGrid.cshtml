@page
@model MLunarCoffee.Pages.Report.CustomerCare.CustomerCareAfterTreat.CustomerCareAfterTreatGridModel
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>

<div class="vtcardheader card-header pb-0 px-0">
    <div class="left">
        <h6 class="mb-0">@Local["Chăm sóc sau điều trị"]</h6>
        <p class="mb-0 text-sm">@Local["Danh sách khách hàng chăm sóc sau điều trị"]</p>
    </div>   
</div>
<div class="card-body p-0 pt-0" id="CCATG_Container">
    <div class="row px-0 mt-3 mb-2">
        <div class="col-12 col-sm-12 col-md-6 col-xl-2 p-1">
            <div class="fw-bold text-center text-dark text-sm">
                @Local["Trạng thái chăm sóc"]:
                <span id="TG_PieStatusTotal" class="fw-bolder"></span>
            </div>
            <div class="position-relative mt-3" style="min-height: 150px;">
                <div class="chart position-absolute top-50 start-50 translate-middle">
                    <canvas id="TG_PieStatus" class="chart-canvas" height="150"></canvas>
                </div>
            </div>
        </div>
        <div class="col-12 col-sm-12 col-md-6 col-xl-3 p-1">
            <div class="mt-3 ms-0 ms-lg-n2 table-responsive">
                <table class="table align-items-center mb-0">
                    <tbody id="TG_PieStatusList">
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-12 col-sm-12 col-md-6 col-xl-2 p-1  mt-2 mt-lg-0">
            <div class="fw-bold text-center text-dark text-sm">
                @Local["Trạng thái chi tiết"]:
                <span id="TG_PieDiscountTotal" class="fw-bolder"></span>
            </div>
            <div class="position-relative mt-3" style="min-height: 150px;">
                <div class="chart position-absolute top-50 start-50 translate-middle">
                    <canvas id="TG_PieDiscount" class="chart-canvas" height="150"></canvas>
                </div>
            </div>
        </div>
        <div class="col-12 col-sm-12 col-md-6 col-xl-5 p-1 mt-2 mt-lg-0">
            <div class="mt-3 ms-0 ms-lg-n2 table-responsive">
                <table class="table align-items-center mb-0">
                    <tbody id="TG_PieDiscountList">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="vtcardheader card-header pb-0 px-0">
    <div class="left d-flex">
        <div class="me-3">
            <div class="ui dropdown text-dark fw-bold text-sm border-0" id="TG_Status">
                <input type="hidden" />
                <div class="default text">eg .@Local["Trạng thái"]</div>
                <div id="TG_cbbStatus" class="menu" tabindex="-1">
                </div>
            </div>
        </div>
        <div>
            <div class="ui dropdown text-dark fw-bold text-sm border-0" id="TG_StatusCall">
                <input type="hidden" />
                <div class="default text">eg .@Local["Chi tiết trạng thái"]</div>
                <div id="TG_cbbStatusCall" class="menu" tabindex="-1">
                </div>
            </div>
        </div>
    </div>
    <div class="right">
        <div class="wrap">
            <div class="wrapblock">
                <div class="text-primary fw-bold d-inline mx-2 text-nowrap mt-1">
                    <span id="Reve_currentdata">0</span>
                    <span class="mx-2">/</span>
                    <span id="Reve_totaldata">0</span>
                </div>
                <div class="icon-hover mx-1 mt-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Thu gọn"]">
                    <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                       data-bs-toggle="collapse" href="#TG_GridArea" aria-expanded="true"></i>
                </div>
                <div class="icon-hover mx-1 mt-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Tải lại"]">
                    <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); return TG_LoadInit()"></i>
                </div>
                <div class="icon-hover mx-1 mt-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["In báo cáo"]">
                    <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); TG_PrintReport()"></i>
                </div>
                <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel">
                    <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["Xuất excel"]">
                        <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                    </div>
                    <div class="input-group-text icon-hover w-auto vttech-input-item">
                        <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return TG_Export(0)">@Local["Tất cả"]</i>
                    </div>
                    <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                        <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return TG_Export(1)">@Local["Tùy chọn"]</i>
                    </div>
                </div>
                <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                    @Local["Xem thêm"]
                </button>
            </div> 
        </div>
    </div>
    <div class="toggle">
        <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
            <ul class="card card-body text-dark text-capitalize opacity-10">
                <li class="d-flex">
                    <div class="form-check form-switch">
                        <input class="shtoogle form-check-input" data-name="TypeCustomerIn" type="checkbox">
                    </div>
                    <p class="text-sm">@Local["Loại khách đến"]</p>
                </li>
                <li class="d-flex">
                    <div class="form-check form-switch">
                        <input class="shtoogle form-check-input" data-name="Content" type="checkbox">
                    </div>
                    <p class="text-sm">@Local["Nội dung chăm sóc"]</p>
                </li>
                <li class="d-flex">
                    <div class="form-check form-switch">
                        <input class="shtoogle form-check-input" data-name="DateTreat" type="checkbox">
                    </div>
                    <p class="text-sm">@Local["Ngày điều trị"]</p>
                </li>
                <li class="d-flex">
                    <div class="form-check form-switch">
                        <input class="shtoogle form-check-input" data-name="DateCheckin" type="checkbox">
                    </div>
                    <p class="text-sm">@Local["Ngày tư vấn"]</p>
                </li>
                <li class="d-flex">
                    <div class="form-check form-switch">
                        <input class="shtoogle form-check-input" data-name="DataRepearCall" type="checkbox">
                    </div>
                    <p class="text-sm">@Local["Ngày gọi lại"]</p>
                </li>
                <li class="d-flex">
                    <div class="form-check form-switch">
                        <input class="shtoogle form-check-input" data-name="DateCare" type="checkbox">
                    </div>
                    <p class="text-sm">@Local["Ngày chăm sóc"]</p>
                </li>
                <li class="d-flex">
                    <div class="form-check form-switch">
                        <input class="shtoogle form-check-input" data-name="PerTreat" type="checkbox">
                    </div>
                    <p class="text-sm">@Local["Người chăm sóc"]</p>
                </li>
                <li class="d-flex">
                    <div class="form-check form-switch">
                        <input class="shtoogle form-check-input" data-name="EvaluateTreat" type="checkbox">
                    </div>
                    <p class="text-sm">@Local["Đánh giá sau điều trị"]</p>
                </li>
            </ul>
        </div>

    </div>
</div>

<div class="collapsesticky collapse show" id="TG_GridArea">
    <div class="card-body p-0 mt-3">
        <div class="m-0 my-0 mobile-responsive position-relative vt-header-sticky">
            <div id="TG_GridWaiting" class="position-absolute top-0 start-50 translate-middle-x waitingdiv text-center" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <table data-name="TG_Grid" class="table vt-table mb-0" id="TG_Grid">
                <thead>
                    <tr role="row">
                        <th rowspan="2">#</th>
                        <th rowspan="2">@Local["Mã khách hàng"]</th>
                        <th rowspan="2">@Local["Khách hàng"]</th>
                        <th rowspan="2">@Local["Tình trạng"]</th>
                        <th rowspan="2" data-name="TypeCustomerIn">@Local["Loại khách đến"]</th>
                        <th rowspan="2">@Local["Trạng thái"]</th>
                        <th rowspan="2">@Local["Chi tiết trạng thái"]</th>
                        <th rowspan="2" data-name="Content">@Local["Nội dung chăm sóc"]</th>
                        <th rowspan="2" data-name="DateTreat">@Local["Ngày điều trị"]</th>
                        <th rowspan="2" data-name="DateCheckin">@Local["Ngày tư vấn"]</th>
                        <th rowspan="2" data-name="DataRepearCall">@Local["Ngày gọi lại"]</th>
                        <th rowspan="2" data-name="DateCare">@Local["Ngày chăm sóc"]</th>
                        <th rowspan="2" data-name="PerTreat">@Local["Người chăm sóc"]</th>
                        <th colspan="3" data-name="EvaluateTreat">@Local["Đánh giá sau điều trị"]</th>
                    </tr>
                    <tr>
                        <th data-name="EvaluateTreat">@Local["Cơ sở vật chất"]</th>
                        <th data-name="EvaluateTreat">@Local["Thái độ nhân viên"]</th>
                        <th data-name="EvaluateTreat">@Local["Bác sĩ điều trị"]</th>
                    </tr>
                </thead>
                <tbody id="TG_GridBody">
                </tbody>
            </table>
        </div>
        <button class="btnsysmore btn btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return TG_RenderMore();">
            @Local["Xem thêm"]
        </button>
    </div>
</div>
<script type="text/javascript">

    let xhrLoadList, DataReportMainSlice, DataReportMain;
    let TG_rpStatus = {};
    let IndexReport = 0;
    let timeoutCount;
    let TG_Flaf = 0;
    let shtable;
    let TG_DTStatusCall, TG_DTStatus;
    let TG_DTFillStatus;

    $(document).ready(function () {
        shtable = $("#TG_Grid").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        TG_LoadInit();
        TG_Event();
        Checking_TabControl_Permission();
    })

    function TG_LoadInit() {
        AjaxLoad(url = "/Report/CustomerCare/CustomerCareAfterTreat/CustomerCareAfterTreatGrid/?handler=InitializeCombo"
            , data = {}
            , async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    let DT_Status = data["Status"];

                    TG_rpStatus = (data.Status).reduce((pre, arr) => {
                        if (arr.ID) pre[arr.ID] = arr;
                        return pre;
                    }, {})
                    let arr = [
                        {
                            "ID": -2,
                            "Type": 5,
                            "Name": "Chưa chăm sóc",
                            "ParentID": -1,
                            "ColorCode": "#ffffff"
                        },
                        {
                            "ID": -1,
                            "Type": 5,
                            "Name": "Không trạng thái",
                            "ParentID": -1,
                            "ColorCode": "#ffffff"
                        }
                    ]
                    DT_Status = DT_Status.concat(arr);
                    TG_DTStatus = DT_Status.filter(item => Number(item["Type"]) == 5 && (item["ParentID"] == 0 || item["ParentID"] == -1));
                    TG_DTStatusCall = DT_Status.filter(item => Number(item["Type"]) == 5 && (item["ParentID"] != 0 || item["ParentID"] == -1));



                    Load_Combo(TG_DTStatus, "TG_cbbStatus", true, "@Local["Trạng thái"]");
                    $("#TG_Status").dropdown("refresh");
                    $("#TG_Status").dropdown("set selected", "0");

                    Load_Combo(TG_DTStatusCall, "TG_cbbStatusCall", true, "@Local["Chi tiết trạng thái"]");
                    $("#TG_StatusCall").dropdown("refresh");
                    $("#TG_StatusCall").dropdown("set selected", "0");


                    TG_Load();
                }
            }
        );
    }

    function TG_Load() {
        TG_Flaf = 0;
        if (xhrLoadList && xhrLoadList.readyState != 4) xhrLoadList.abort();
        let _branchID = "@Model._BranchID";
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";

        IndexReport = 0;
        $("#TG_GridBody").empty();
        xhrLoadList = AjaxLoad(url = "/Report/CustomerCare/CustomerCareAfterTreat/CustomerCareAfterTreatGrid/?handler=Loadata"
            , data = {
                'BranchID': _branchID
                , 'dateFrom': _dateFrom
                , 'dateTo': _dateTo
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    $("#TG_GridWaiting").show();
                    TG_ExecutedRow(data);
                }
                else { notiError_SW() }
            }
        );
        TG_Flaf = 1;
    }

    function TG_ExecutedRow(data) {
        let dataPie = [], dataPieDetail = [];
        let Total = 0;
        if (data["Table1"] && data["Table1"].length > 0) {
            for (let i = 0; i < data["Table1"].length > 0; i++) {
                let item = data["Table1"][i];
                let e = {};
                if (item.statusID == 0) {
                    e.Name = decodeHtml("@Local["Không trạng thái"]");
                } else {
                    e.Name = TG_rpStatus[item.statusID]?.Name ?? decodeHtml("@Local["Chưa chăm sóc"]");
                }
                e.Total = item.TotalStatus;
                dataPie.push(e);
                Total += item.TotalStatus;
            }
        }
        if (data["Table2"] && data["Table2"].length > 0) {
            for (let i = 0; i < data["Table2"].length > 0; i++) {
                let item = data["Table2"][i];
                let e = {};
                if (item.statusCallID == 0) {
                    e.Name = decodeHtml("@Local["Không trạng thái"]");
                } else {
                    e.Name = TG_rpStatus[item.statusCallID]?.Name ?? decodeHtml("@Local["Chưa chăm sóc"]");
                }

                e.Total = item.TotalStatusCall;
                dataPieDetail.push(e);
            }

        }
        if (data["Table"] && data["Table"].length > 0) {
            DataReportMain = JSON.parse(JSON.stringify(data["Table"]));
            DataReportMainSlice = sliceIntoChunks(data["Table"], 500);
            fnRenderBlock(DataReportMainSlice[IndexReport], "TG_GridBody"
                , blocknum = 100
                , fnrender = TG_Render
                , fnsuccess = null
            );
            $('#Reve_totaldata').html(DataReportMain.length)
        }
        TG_RenderPie(dataPie, Total, dataPieDetail);
        $("#TG_GridWaiting").hide();
    }

    async function TG_Render(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let obj = Fun_GetObject_ByID(RP_DataEmployee, item.EmployeeID);
                            let tr = `
                                                <td class="vt-number-order"></td>
                                                <td>
                                                    <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CusID}&ver=${versionofWebApplication}">
                                                        ${item.CusCode}
                                                    </a>
                                                </td>
                                                <td>${item.CusName}</td>
                                                <td>${item.IsCare == 1
                                    ? `<span class="text-primary fw-bold">@Local["Đã chăm sóc"]</span>`
                                    : `<span class="text-secondary">@Local["Chưa chăm sóc"]</span>`
                                }
                                                </td>
                                                <td data-name="TypeCustomerIn">${(item.IsTreat == 1 ? '@Local["Điều trị"]' : '@Local["Tư vấn"]')}</td>
                                                <td>${TG_RenderName(item.statusID, item.IsCare)}</td>
                                                <td>${TG_RenderName(item.statusCallID, item.IsCare)}</td>
                                                <td data-name="Content">${(item.IsCare == 1 && item.Content == '') ? `@Local["Không có tin nhắn"]` : `${item.Content}`}</td>
                                                <td data-name="DateTreat">${(!String(item.NumDateTreat).includes(1900) && item.IsTreat == 1 ? ConvertYMDInt_ToDate(item.NumDateTreat) : '')}</td>
                                                <td data-name="DateCheckin">${(!String(item.NumDateTreat).includes(1900) && item.IsTreat == 0 ? ConvertYMDInt_ToDate(item.NumDateTreat) : '')}</td>
                                                <td data-name="DataRepearCall">${(!String(item.NumRepeatCall).includes(1900) ? ConvertYMDInt_ToDate(item.NumRepeatCall) : '')}</td>
                                                <td data-name="DateCare">${ConvertDateTimeUTC_DMY_Remove1900(item.created)}</td>
                                                <td data-name="PerTreat">${(obj.Name != 'unknown') ? obj.Name : ''}</td>
                                                    <td data-name="EvaluateTreat" style="color: ${TG_RenderEvaluate(item?.EPhysicalFacilities ?? 0).color}">${TG_RenderEvaluate(item?.EPhysicalFacilities ?? 0).text}</td>
                                                <td data-name="EvaluateTreat" style="color: ${TG_RenderEvaluate(item?.EEmpAttitudes ?? 0).color}">${TG_RenderEvaluate(item?.EEmpAttitudes ?? 0).text}</td>
                                                <td data-name="EvaluateTreat" style="color: ${TG_RenderEvaluate(item?.EDoctor ?? 0).color}">${TG_RenderEvaluate(item?.EDoctor ?? 0).text}</td>
                                            `
                            tr = `<tr class="vt-number" role="row">${tr}</tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                        shtable.Refresh();
                        clearTimeout(timeoutCount);
                        timeoutCount = setTimeout(() => {
                            $('#Reve_currentdata').html($("#" + id).children().length)
                        }, 300)
                    }
                }
            }, 100);
        })
    }

    function TG_RenderEvaluate(evaluate) {
        let result = {
            text: '',
            color: ''
        };
        switch (evaluate) {
            case 1:
                result.text = decodeHtml("@Local["Rất không hài lòng"]");
                result.color = "#f53939";
                break;
            case 2:
                result.text = decodeHtml("@Local["Không hài lòng"]");
                result.color = "#ff7f0e";
                break;
            case 3:
                result.text = decodeHtml("@Local["Bình thường"]");
                result.color = "#ffbb78";
                break;
            case 4:
                result.text = decodeHtml("@Local["Hài lòng"]");
                result.color = "#98df8a";
                break;
            case 5:
                result.text = decodeHtml("@Local["Rất hài lòng"]");
                result.color = "#2ca02c";
                break;
        }
        return result;
    }

    function TG_RenderName(id, Iscare) {
        try {
            let result = '';
            if (!jQuery.isEmptyObject(TG_rpStatus) && id != 0) {
                result = TG_rpStatus[id].Name;
            }
            if (id == 0 && Iscare == 1) {
                result = decodeHtml("@Local["Không trạng thái"]");
            }
            return result;
        } catch {
            return '';
        }

    }

    async function TG_RenderPie(dataPie, Total, dataPieDetail) {
        new Promise((resolve) => {
            setTimeout(() => {
                ReportPie_Description(dataPie, 'Name', 'Total', 'TG_PieStatusList');
                rp_pie("TG_PieStatus", dataPie, 'Name', 'Total');

                ReportPie_Description(dataPieDetail, 'Name', 'Total', 'TG_PieDiscountList');
                rp_pie("TG_PieDiscount", dataPieDetail, 'Name', 'Total');

                Count_Up("TG_PieStatusTotal", Total, 0);
                Count_Up("TG_PieDiscountTotal", Total, 0);
            }, 200);
        })
    }
    function TG_RenderMore() {
        IndexReport += 1;
        if (DataReportMainSlice && DataReportMainSlice[IndexReport]) {
            fnRenderBlock(DataReportMainSlice[IndexReport], "TG_GridBody"
                , blocknum = 100
                , fnrender = TG_Render
                , fnsuccess = null
            );
        }
    }

    function TG_Event() {
        $("#TG_Status").on("change", function () {
            if (TG_Flaf == 1) {
                let StatusID = Number($('#TG_Status').dropdown('get value')) ? Number($('#TG_Status').dropdown('get value')) : 0;
                TG_DTFillStatus = JSON.parse(JSON.stringify(DataReportMain));
                if (StatusID == -1) {
                    TG_DTFillStatus = TG_DTFillStatus.filter(item => item.statusID == 0 && item.IsCare == 1);
                } else if (StatusID == -2) {
                    TG_DTFillStatus = TG_DTFillStatus.filter(item => item.statusID == 0 && item.IsCare == 0);
                } else if (StatusID != 0) {
                    TG_DTFillStatus = TG_DTFillStatus.filter(item => item.statusID == StatusID);
                }
                let _d = JSON.parse(JSON.stringify(TG_DTFillStatus));
                DataReportMainSlice = sliceIntoChunks(_d, 500);
                IndexReport = 0;
                $("#TG_GridBody").empty();
                fnRenderBlock(DataReportMainSlice[IndexReport], "TG_GridBody"
                    , blocknum = 100
                    , fnrender = TG_Render
                    , fnsuccess = null
                );
            }
        })
        $("#TG_StatusCall").on("change", function () {
            if (TG_Flaf == 1) {
                let StatusCallID = Number($('#TG_StatusCall').dropdown('get value')) ? Number($('#TG_StatusCall').dropdown('get value')) : 0;
                TG_DTFillStatus = JSON.parse(JSON.stringify(DataReportMain));
                if (StatusCallID == -1) {
                    TG_DTFillStatus = TG_DTFillStatus.filter(item => item.statusCallID == 0 && item.IsCare == 1);
                } else if (StatusCallID == -2) {
                    TG_DTFillStatus = TG_DTFillStatus.filter(item => item.statusCallID == 0 && item.IsCare == 0);
                } else if (StatusCallID != 0) {
                    TG_DTFillStatus = TG_DTFillStatus.filter(item => item.statusCallID == StatusCallID);
                }
                let _d = JSON.parse(JSON.stringify(TG_DTFillStatus));
                DataReportMainSlice = sliceIntoChunks(_d, 500);
                IndexReport = 0;
                $("#TG_GridBody").empty();
                fnRenderBlock(DataReportMainSlice[IndexReport], "TG_GridBody"
                    , blocknum = 100
                    , fnrender = TG_Render
                    , fnsuccess = null
                );
            }
        })
    }


    function TG_Export(isOption = 0) {
        try {
            if (DataReportMain && DataReportMain.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#CCATG_Container');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }]
                    , "CusCode": ["@Local["Mã khách hàng"]"]
                    , "CusName": ["@Local["Khách hàng"]"]
                    , "IsCare": ["@Local["Tình trạng"]", (value) => { return value == 1 ? decodeHtml("@Local["Đã chăm sóc"]") : decodeHtml("@Local["Chưa chăm sóc"]") }]
                    , "IsTreat": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='TypeCustomerIn']`)).is(":checked"),
                        data: ["@Local["Loại khách đến"]", (value) => { return (value == 1 ? decodeHtml("@Local["Điều trị"]") : decodeHtml("@Local["Tư vấn"]")) }]
                    }
                    , "statusID": ["@Local["Trạng thái"]", (value, { IsCare }) => { return TG_RenderName(value, IsCare) }]
                    , "statusCallID": ["@Local["Chi tiết trạng thái"]", (value, { IsCare }) => { return TG_RenderName(value, IsCare) }]
                    , "Content": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='Content']`)).is(":checked"),
                        data: ["@Local["Nội dung chăm sóc"]", (value, { IsCare }) => { return (IsCare == 1 && value == "") ? decodeHtml("@Local["Không có tin nhắn"]") : value }]
                    }
                    , "NumDateTreat": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='DateTreat']`)).is(":checked"),
                        data: ["@Local["Ngày điều trị"]", (value, { IsTreat }) => { return (!String(value).includes(1900) && IsTreat == 1 ? ConvertYMDInt_ToDate(value) : '') }]
                    }
                    , "NumDateTreat": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='DateCheckin']`)).is(":checked"),
                        data: ["@Local["Ngày tư vấn"]", (value, { IsTreat }) => { return (!String(value).includes(1900) && IsTreat == 1 ? ConvertYMDInt_ToDate(value) : '') }]
                    }
                    , "NumRepeatCall": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='DataRepearCall']`)).is(":checked"),
                        data: ["@Local["Ngày gọi lại"]", (value) => { return (!String(value).includes(1900) ? ConvertYMDInt_ToDate(value) : '') }]
                    }
                    , "created": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='DateCare']`)).is(":checked"),
                        data: ["@Local["Ngày chăm sóc"]", (value) => { return ConvertDateTimeUTC_DMY_Remove1900(value) }]
                    }
                    , "EmployeeID": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='PerTreat']`)).is(":checked"),
                        data: ["@Local["Người chăm sóc"]", (value) => { return Fun_GetObject_ByID(RP_DataEmployee, value).Name != 'unknown' ? Fun_GetObject_ByID(RP_DataEmployee, value).Name : '' }]
                    }
                    , "EPhysicalFacilities": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='EvaluateTreat']`)).is(":checked"),
                        data: ["@Local["Đánh giá sau điều trị"] (@Local["Cơ sở vật chất"])", (value) => { return TG_RenderEvaluate(value ?? 0).text }]
                    }
                    , "EEmpAttitudes": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='EvaluateTreat']`)).is(":checked"),
                        data: ["@Local["Đánh giá sau điều trị"] (@Local["Thái độ nhân viên"])", (value) => { return TG_RenderEvaluate(value ?? 0).text }]
                    }
                    , "EDoctor": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='EvaluateTreat']`)).is(":checked"),
                        data: ["@Local["Đánh giá sau điều trị"] (@Local["Bác sĩ điều trị"])", (value) => { return TG_RenderEvaluate(value ?? 0).text }]
                    }
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'TG_GridBody', PermissionTable_TabControl);
                syslog_ExpExcel('e', Outlang["Cham_soc_sau_dieu_tri"]);
                exportJsonToExcel(Outlang["Cham_soc_sau_dieu_tri"], DataReportMain, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }

    async function TG_PrintReport() {
        {
            try {
                if (DataReportMain && DataReportMain.length != 0) {
                    let _branchID = "@Model._BranchID";
                    let _dateFrom = "@Model._dateFrom";
                    let _dateTo = "@Model._dateTo";
                    var dataHeader = {
                        "STT": ["@Local["STT"]", {
                            callbackRenderValue: (value, { }, index) => { return index + 1; }
                        }]
                        , "CusCode": ["@Local["Mã khách hàng"]"]
                        , "CusName": ["@Local["Khách hàng"]"]
                        , "IsCare": ["@Local["Tình trạng"]", {
                            callbackRenderValue: (value) => { return value = 1 ? decodeHtml("@Local["Đã chăm sóc"]") : decodeHtml("@Local["Chưa chăm sóc"]") }
                        }]
                        , "IsTreat": ["@Local["Loại khách đến"]", {
                            isShow: $(`.shtoogle[data-name='TypeCustomerIn']`).is(":checked")
                            , callbackRenderValue: (value) => { return value == 1 ? decodeHtml("@Local["Điều trị"]") : decodeHtml("@Local["Tư vấn"]") }
                        }]
                        , "statusID": ["@Local["Trạng thái"]", {
                            callbackRenderValue: (value) => { return TG_RenderName(value) }
                        }]
                        , "statusCallID": ["@Local["Chi tiết trạng thái"]", {
                            callbackRenderValue: (value) => { return TG_RenderName(value) }
                        }]
                        , "Content": ["@Local["Nội dung chăm sóc"]", {
                            isShow: $(`.shtoogle[data-name='Content']`).is(":checked")
                            , callbackRenderValue: (value, { IsCare }) => { return (IsCare == 1 && value == "") ? decodeHtml("@Local["Không có tin nhắn"]") : value }
                        }]
                        , "NumDateTreat": ["@Local["Ngày điều trị"]", {
                            isShow: $(`.shtoogle[data-name='DateTreat']`).is(":checked")
                            , callbackRenderValue: (value, { IsTreat }) => { return (!String(value).includes(1900) && IsTreat == 1 ? ConvertYMDInt_ToDate(value) : '') }
                        }]
                        , "NumDateTreat": ["@Local["Ngày tư vấn"]", {
                            isShow: $(`.shtoogle[data-name='DateCheckin']`).is(":checked")
                            , callbackRenderValue: (value, { IsTreat }) => { return (!String(value).includes(1900) && IsTreat == 0 ? ConvertYMDInt_ToDate(value) : '') }
                        }]
                        , "NumRepeatCall": ["@Local["Ngày gọi lại"]", {
                            isShow: $(`.shtoogle[data-name='DataRepearCall']`).is(":checked")
                            , callbackRenderValue: (value) => { return (!String(value).includes(1900) ? ConvertYMDInt_ToDate(value) : '') }
                        }]
                        , "created": ["@Local["Ngày chăm sóc"]", {
                            isShow: $(`.shtoogle[data-name='DateCare']`).is(":checked")
                            , callbackRenderValue: (value) => { return (!value.includes('1900') ? ConvertDateTimeToString_D_M_Y(value) : '') }
                        }]
                        , "EmployeeID": ["@Local["Người chăm sóc"]", {
                            isShow: $(`.shtoogle[data-name='PerTreat']`).is(":checked")
                            , callbackRenderValue: (value) => { return Fun_GetObject_ByID(RP_DataEmployee, value).Name != 'unknown' ? Fun_GetObject_ByID(RP_DataEmployee, value).Name : '' }
                        }]
                        , "EPhysicalFacilities": ["@Local["Đánh giá sau điều trị"] (@Local["Cơ sở vật chất"])", {
                            isShow: $(`.shtoogle[data-name='EvaluateTreat']`).is(":checked")
                            , callbackRenderValue: (value) => { return TG_RenderEvaluate(value ?? 0).text }
                        }]
                        , "EEmpAttitudes": ["@Local["Đánh giá sau điều trị"] (@Local["Thái độ nhân viên"])", {
                            isShow: $(`.shtoogle[data-name='EvaluateTreat']`).is(":checked")
                            , callbackRenderValue: (value) => { return TG_RenderEvaluate(value ?? 0).text }
                        }]
                        , "EDoctor": ["@Local["Đánh giá sau điều trị"] (@Local["Bác sĩ điều trị"])", {
                            isShow: $(`.shtoogle[data-name='EvaluateTreat']`).is(":checked")
                            , callbackRenderValue: (value) => { return TG_RenderEvaluate(value ?? 0).text }
                        }]
                    };
                    $("#MainSendMail_Content").empty();
                    $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                        , function (responseTxt, statusTxt, xhr) {
                            if (statusTxt == "success") {
                                $("#MainSendMail").addClass('active');
                                let options = {
                                    empName: sys_employeeName_Main
                                }
                                if (typeof PRF_CBPrintReport === 'function')
                                    PRF_CBPrintReport(namePrint = Outlang["Cham_soc_sau_dieu_tri"], DataReportMain, dataHeader, options);
                            }
                            if (statusTxt == "error") {
                                console.warn("error");
                            }
                        })
                }
                else {
                    notiWarning('@Local["Không có dữ liệu"]!');
                }
            }
            catch (ex) {
                notiWarning('@Local["Không in được file"]!');
            }
        }
    }
</script>