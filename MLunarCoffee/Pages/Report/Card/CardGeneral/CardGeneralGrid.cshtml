@page
@model MLunarCoffee.Pages.Report.Card.CardGeneral.CardGeneralGridModel
@{
    Layout = null;
}

<script>js_require('/js/comon/initialize_setting.js');</script>
<div class="collapsesticky collapse show" id="CG_General">
    <div class="vtcardheader card-header pb-0 px-0">
        <div class="left">
            <h6 class="mb-0">@Local["Tổng quát thẻ trả trước"]</h6>
            <p class="text-sm mb-0">@Local["Báo cáo tổng quát thẻ trả trước"]</p>
        </div>
        <div class="right">
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Thu gọn"]">
                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                   data-bs-toggle="collapse" href="#CG_GeneralDiv" aria-expanded="true"></i>
            </div>
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Tải lại"]">
                <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                   onclick="event.preventDefault(); return CG_LoadData()"></i>
            </div>
            <div class="icon-hover mx-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Xuất excel"]">
                <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                   onclick="event.preventDefault(); return CG_Export()"></i>
            </div>
        </div>
    </div>
    <div class="card-body p-0 pt-0 collapsesticky collapse show" id=CG_GeneralDiv>
        <div class="m-0 my-3 mobile-responsive">
            <table class="table vt-table mb-0" id="CG_Grid">
                <thead>
                    <tr>
                        <th style="width: 60px">#</th>
                        <th>@Local["Mã loại thẻ"]</th>
                        <th>@Local["Tên loại thẻ"]</th>
                        <th>@Local["Số thẻ phát hành"]</th>
                        <th>@Local["Giá bán"]</th>
                        <th>@Local["Giá trị sử dụng"]</th>
                        <th>@Local["Tiền đã sử dụng"]</th>
                        <th>@Local["Tiền chưa sử dụng"]</th>
                    </tr>
                </thead>
                <tbody id="CG_GridBody">
                </tbody>
            </table>
        </div>
    </div>
</div>
<div id="CG_GeneralDetail" class="mt-3" style="display:none;">
    <div class="vtcardheader card-header pb-0 px-0">
        <div class="left">
            <p id="CG_DetailCardGeneral" class="text-md text-dark font-weight-bold mb-1"></p>
        </div>
        <div class="right">
            <div class="text-primary fw-bold d-inline mx-2 text-nowrap mt-1">
                <span id="CG_currentdetaildata">0</span>
                <span class="mx-2">/</span>
                <span id="CG_totaldetaildata">0</span>
            </div>
            <div class="icon-hover mx-1 mt-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["Thu gọn"]">
                <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                   data-bs-toggle="collapse" href="#CG_GeneralDetailDiv" aria-expanded="true"></i>
            </div>
            <div class="icon-hover mx-1 mt-1"
                 data-bs-toggle="tooltip" data-bs-placement="top"
                 data-bs-original-title="@Local["In báo cáo"]">
                <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                   onclick="event.preventDefault(); CG_DetailPrintReport()"></i>
            </div>
            <div>
                <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel">
                    <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-original-title="@Local["Xuất excel"]">
                        <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                    </div>
                    <div class="input-group-text icon-hover w-auto vttech-input-item">
                        <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return CG_ExportDetail(0)">@Local["Tất cả"]</i>
                    </div>
                    <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                        <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return CG_ExportDetail(1)">@Local["Tùy chọn"]</i>
                    </div>
                </div>
            </div>
            <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                @Local["Xem thêm"]
            </button>
        </div>
        <div class="toggle">
            <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                <ul class="card card-body text-dark text-capitalize opacity-10">
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="namestatus" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Tình trạng thẻ"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="branch" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Chi nhánh"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="created" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Ngày tạo"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogleDetail form-check-input" data-name="createdby" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Người tạo"]</p>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="collapsesticky collapse show" id="CG_GeneralDetailDiv">
        <div class="card-body p-0">
            <div class="m-0 my-3 mobile-responsive vt-header-sticky">
                <table data-name="CG_GridDetail" class="table vt-table mb-0" id="CG_GridDetail">
                    <thead>
                        <tr>
                            <th style="width: 60px">#</th>
                            <th data-name="custcardcode">@Local["Mã thẻ khách hàng"]</th>
                            <th data-name="cardtype">@Local["Loại thẻ"]</th>
                            <th style="min-width: 140px">@Local["Mã khách hàng"]</th>
                            <th data-name="custname">@Local["Khách hàng"]</th>
                            <th>@Local["Giá trị sử dụng"]</th>
                            <th data-name="timeused">@Local["Số lần sử dụng"]</th>
                            <th data-name="amount">@Local["Tiền đã sử dụng"]</th>
                            <th>@Local["Tiền chưa sử dụng"]</th>
                            <th data-name="namestatus">@Local["Tình trạng thẻ"]</th>
                            <th data-name="branch">@Local["Chi nhánh"]</th>
                            <th data-name="created">@Local["Ngày tạo"]</th>
                            <th data-name="createdby">@Local["Người tạo"]</th>
                        </tr>
                    </thead>
                    <tbody id="CG_GridDetailBody">
                    </tbody>
                </table>
            </div>
            <button class="btn btnsysmore btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return CG_RenderDetailMore();">
                @Local["Xem thêm"]
            </button>
        </div>

    </div>
</div>
<script type="text/javascript">
    let _branchID = "@Model._branchID";
    let _dateFrom = "@Model._dateFrom";
    let _dateTo = "@Model._dateTo";
    let xhrLoadList, xhrLoadDetail;
    let shtableDetail;
    let DataEmp;
    let DataReportMainDetail, DataReportMainDetailSlice;
    let IndexReportDetail = 0;
    let timeoutCountDetail;
    $(document).ready(function () {
        shtableDetail = $("#CG_GridDetail").TableExpandColumn({
            shtoogle: $('.shtoogleDetail')
        });
        ToolPopper();
        CG_LoadEmployee();
        CG_LoadData();
        Checking_TabControl_Permission();
    });
    function CG_LoadData() {
        if (xhrLoadList && xhrLoadList.readyState != 4) xhrLoadList.abort();
        xhrLoadList = AjaxLoad(url = "/Report/Card/CardGeneral/CardGeneralGrid?handler=Loadata"
            , data = {
                'branchID': _branchID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    $("#CG_GridBody").empty();
                    CG_Render(data, "CG_GridBody");
                }
            }
        );
        return false;
    }

    async function CG_Render(data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            if (data && data.length != 0) {
                let tr = '';
                let totalNumberOfCard = 0; totalPriceSale = 0; totalPriceUse = 0; totalAmountUsed = 0; totalAmountExtant = 0;
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];

                    //calc total
                    totalNumberOfCard += item.NumberOfCard;
                    totalPriceSale += item.PriceSale;
                    totalPriceUse += item.PriceUse;
                    totalAmountUsed += item.AmountUsed;
                    totalAmountExtant += item.AmountExtant;
                    tr = `<tr class="vt-number" role="row">
                                                          <td class="vt-number-order"></td>
                                                          <td data-name="cardcode">
                                                              <a href="#" class="border-1 border-primary border-bottom buttonViewClass mb-0 text-sm fw-bold" data-cardid="${item.CardID}" data-name="${item.CardName} [${item.CardCode}]">
                                                                 ${item.CardCode}
                                                              </a>
                                                          </td>
                                                          <td data-name="cardname">${item.CardName}</td>
                                                          <td data-name="cardnum">${formatNumber(item.NumberOfCard)}</td>
                                                          <td data-name="pricesale">${formatNumber(item.PriceSale)}</td>
                                                          <td data-name="priceuse">${formatNumber(item.PriceUse)}</td>
                                                          <td data-name="amountused">${formatNumber(item.AmountUsed)}</td>
                                                          <td data-name="amountextant">${formatNumber(item.AmountExtant)}</td>
                                                      </tr>`;
                    myNode.insertAdjacentHTML('beforeend', tr);
                }
                tr = `<tr class="vt-number text-white bg-gradient bg-primary mt-2 CG_RowTotal" role="row">
                                                      <td></td>
                                                      <td class="text-start" colspan="2">
                                                          <a href="#" class="border-1 border-white border-bottom buttonViewClass text-white" data-cardid="0">@Local["Tất cả"]</a>
                                                      </td>
                                                      <td>${formatNumber(totalNumberOfCard)}</td>
                                                      <td>${formatNumber(totalPriceSale)}</td>
                                                      <td>${formatNumber(totalPriceUse)}</td>
                                                      <td>${formatNumber(totalAmountUsed)}</td>
                                                      <td>${formatNumber(totalAmountExtant)}</td>
                                                  </tr>`;
                myNode.insertAdjacentHTML('beforeend', tr);
                CG_GeneralEvent();
            }
        }
    }

    //#region // LOAD EMPLOYEE
    function CG_LoadEmployee() {
        Master_IndexDB_Reads(_Session_Data, [_Session_Employee]
            , function (data) {
                DataEmp = data[0];
            });
    }
    //#endregion
    //#region // LOAD DETAIL AND RENDER
    function CG_DetailLoad(cardid) {
        if (xhrLoadDetail && xhrLoadDetail.readyState != 4) xhrLoadDetail.abort();
        IndexReportDetail = 0;
        xhrLoadDetail = AjaxLoad(url = "/Report/Card/CardGeneral/CardGeneralGrid/?handler=LoadataDetail"
            , data = {
                'branchID': _branchID,
                'cardID': cardid,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    DataReportMainDetail = JSON.parse(JSON.stringify(data));
                    DataReportMainDetailSlice = sliceIntoChunks(data, 500);
                    $("#CG_GridDetailBody").empty();
                    if (DataReportMainDetailSlice && DataReportMainDetailSlice.length != 0) {
                        fnRenderBlock(DataReportMainDetailSlice[IndexReportDetail], "CG_GridDetailBody"
                            , blocknum = 100
                            , fnrender = CG_DetailRender
                            , fnsuccess = null
                        );
                    }
                    Count_Up("CG_totaldetaildata", DataReportMainDetail.length);
                }
                else {
                    notiError_SW();
                }
            }
        );
    }

    function CG_RenderDetailMore() {
        IndexReportDetail += 1;
        if (DataReportMainDetailSlice && DataReportMainDetailSlice[IndexReportDetail]) {
            fnRenderBlock(DataReportMainDetailSlice[IndexReportDetail], "CG_GridDetailBody"
                , blocknum = 100
                , fnrender = CG_DetailRender
                , fnsuccess = null
            );
        }
    }

    async function CG_DetailRender(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        let tr = '';
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let obj = Fun_GetObject_ByID(DataEmp, item.CreatedBy);
                            let createdName = (obj != null) ? obj.Name : 'unknown';


                            let tr = `<tr class="vt-number" role="row">
                                                                      <td class="vt-number-order"></td>

                                                                      <td data-name="cardcode">${item.CustCardCode}</td>
                                                                      <td data-name="cardcode">${item.CardType}</td>
                                                                      <td data-name="custcode">
                                                                          <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustID}&ver=${versionofWebApplication}">
                                                                             ${item.CustCode}
                                                                          </a>
                                                                      </td>
                                                                      <td data-name="custname">${item.CustName}</td>
                                                                      <td>${formatNumber(item.PriceUse)}</td>
                                                                      <td>${formatNumber(item.TimeUsed)}</td>
                                                                      <td>${formatNumber(item.AmountUsed)}</td>
                                                                      <td>${formatNumber(item.AmountExtant)}</td>
                                                                      <td data-name="namestatus">${CG_StatusCard(item.Card_ID_New, item.IsLock)}</td>
                                                                      <td data-name="branch">${(RP_DataBranch[item.BranchID] != undefined ? RP_DataBranch[item.BranchID].Name : '')}</td>
                                                                      <td data-name="created">${ConvertDateTimeUTC_DMYHM(item.Created)}</td>
                                                                      <td data-name="createdby">${createdName}</td>
                                                                  </tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                shtableDetail.Refresh();
                clearTimeout(timeoutCountDetail);
                timeoutCountDetail = setTimeout(() => {
                    Count_Up("CG_currentdetaildata", $("#" + id).children().length);
                }, 300)
                resolve();
            }, 10)
        })
    }

    function CG_StatusCard(CardNewID, IsLock) {
        try {
            let result = ``;

            if (CardNewID != 0) {
                result = decodeHtml('@Local["Đã chuyển thẻ"]');
            } else if (IsLock != 0) {
                result = decodeHtml('@Local["Đã khóa"]');
            } else {
                result = '';
            }

            return result;
        } catch (ex) {
            return '';
        }
    }

    //#endregion

    //#region // Event
    function CG_GeneralEvent() {
        $("#CG_GridBody .buttonViewClass").unbind('click').on("click", function () {
            let cardid = $(this).attr('data-cardid');
            let name = $(this).attr('data-name');
            $("#CG_GeneralDetail").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#CG_GeneralDetail").offset().top
            }, 300);
            if (cardid == "0") {
                $("#CG_DetailCardGeneral").html('@Local["Tất cả loại thẻ trả trước"]');
            }
            else {
                $("#CG_DetailCardGeneral").html(name);
            }
            CG_DetailLoad(cardid);
        })
    }

    function CG_Export() {
        syslog_ExpExcel('e', Outlang["Tong_quat_the_tra_truoc"]);
        exportToExcel("CG_Grid", Outlang["Tong_quat_the_tra_truoc"]);
    }

    async function CG_ExportDetail(isOption = 0) {
        try {
            if (DataReportMainDetail && DataReportMainDetail.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#CG_GeneralDetail');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }],
                    "CustCardCode": ["@Local["Mã thẻ khách hàng"]"],
                    "CardType": ["@Local["Loại thẻ"]"],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "PriceUse": ["@Local["Giá trị sử dụng"]"],
                    "TimeUsed": ["@Local["Số lần sử dụng"]"],
                    "AmountUsed": ["@Local["Tiền đã sử dụng"]"],
                    "AmountExtant": ["@Local["Tiền chưa sử dụng"]"],
                    "Card_ID_New": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='namestatus']`)).is(":checked"),
                        data: ["@Local["Tình trạng thẻ"]", (value, { IsLock }) => {
                            return (CG_StatusCard(value, IsLock));
                        }]
                    },
                    "BranchID": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='branch']`)).is(":checked"),
                        data: ["@Local["Chi nhánh"]", (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }]
                    },
                    "Created": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='created']`)).is(":checked"),
                        data: ["@Local["Ngày tạo"]", (value) => { return ConvertDateTimeUTC_DMYHM(value) }]
                    },
                    "CreatedBy": {
                        isShow: isAll || (eleContainer.find(`.shtoogleDetail[data-name='createdby']`)).is(":checked"),
                        data: ["@Local["Người tạo"]", (value, { CreatedBy }) => {
                            return (DataEmp[CreatedBy] != undefined) ? DataEmp[CreatedBy].Name : '';
                        }]
                    },
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'CG_GridDetailBody', PermissionTable_TabControl);
                let fileName = xoa_dau($("#CG_DetailCardGeneral").text()).replaceAll(' ', '-');
                syslog_ExpExcel('e', fileName);
                exportJsonToExcel(fileName, DataReportMainDetail, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }

    async function CG_DetailPrintReport() {
        try {
            if (DataReportMainDetail && DataReportMainDetail.length != 0) {
                let _branchID = "@Model._branchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }],
                    "CustCardCode": ["@Local["Mã thẻ khách hàng"]"],
                    "CardType": ["@Local["Loại thẻ"]"],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "PriceUse": ["@Local["Giá trị sử dụng"]"],
                    "TimeUsed": ["@Local["Số lần sử dụng"]"],
                    "AmountUsed": ["@Local["Tiền đã sử dụng"]"],
                    "AmountExtant": ["@Local["Tiền chưa sử dụng"]"],
                    "Card_ID_New": ["@Local["Tình trạng thẻ"]", {
                        isShow: $(`.shtoogleDetail[data-name='namestatus']`).is(":checked"),
                        callbackRenderValue: (value, { IsLock }) => {
                            return (CG_StatusCard(value, IsLock));
                        }
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        isShow: $(`.shtoogleDetail[data-name='branch']`).is(":checked"),
                        callbackRenderValue: (value, { BranchID }) => {
                            return (RP_DataBranch[BranchID] != undefined) ? RP_DataBranch[BranchID].Name : '';
                        }
                    }],
                    "Created": ["@Local["Ngày tạo"]", {
                        isShow: $(`.shtoogleDetail[data-name='created']`).is(":checked"),
                        callbackRenderValue: (value) => { return ConvertDateTimeUTC_DMYHM(value) }
                    }],
                    "CreatedBy": ["@Local["Người tạo"]", {
                        isShow: $(`.shtoogleDetail[data-name='createdby']`).is(":checked"),
                        callbackRenderValue: (value, { CreatedBy }) => {
                            return (DataEmp[CreatedBy] != undefined) ? DataEmp[CreatedBy].Name : '';
                        }
                    }],
                };
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = $("#CG_DetailCardGeneral").text(), DataReportMainDetail, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
                                    //#endregion

</script>