@page
@model MLunarCoffee.Pages.Report.Treatment.Effect.DocTreatmentGridModel
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<div class="collapsesticky collapse show" id="DocTreatGrid_General">
    <div class="card card-plain">
        <div class="vtcardheader card-header pb-0 px-0">
            <div class="right">
                <ul class="nav nav-pills nav-fill p-1" role="tablist">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link text-sm mb-0 px-2 py-1 active" data-bs-toggle="tab" role="tab" onclick="DocTreatGrid_Chart(0)" aria-selected="true">
                            @Local["Số ca"]
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link text-sm mb-0 px-2 py-1" data-bs-toggle="tab" role="tab" onclick="DocTreatGrid_Chart(1)" aria-selected="false" tabindex="-1">
                            @Local["Thời gian"]
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link text-sm mb-0 px-2 py-1" data-bs-toggle="tab" role="tab" onclick="DocTreatGrid_Chart(2)" aria-selected="false" tabindex="-1">
                            @Local["Tiền điều trị"]
                        </a>
                    </li>
                </ul>
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Thu gọn"]">
                    <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                       data-bs-toggle="collapse" href="#DocTreatGrid_GeneralDiv" aria-expanded="true"></i>
                </div>
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Tải lại"]">
                    <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); return DocTreatGrid_LoadData()"></i>
                </div>
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Xuất excel"]">
                    <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                       onclick="event.preventDefault(); return DocTreatGrid_Export()"></i>
                </div>
            </div>
        </div>
    
        <div class="card-body p-0 pt-0 collapsesticky collapse show" id=DocTreatGrid_GeneralDiv>
            <div class="m-0 mb-3 mobile-responsive">
                <div id="DocTreatGrid_LoaderList" class="waitingdiv text-center w-100 mt-2 position-absolute start-50 translate-middle-x" style="display:none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
                <div class="d-sm-flex mb-4">
                    <div class="col-w-250">
                        <div class="card-body border-radius-lg p-3 ps-0 mt-0 mt-lg-n3">
                            <h6 class="ms-2 fw-bold text-dark mb-0">@Local["Tổng thời gian điều trị"]</h6>
                            <p class="text-sm text-dark ms-2 ">@Local["Giá trị trung bình"]</p>
                            <div class="d-flex">
                                <div>
                                    <div class="icon icon-shape bg-danger-soft shadow text-center border-radius-md shadow-none">
                                        <i class="fas fa-clock text-lg text-primary text-gradient opacity-10" aria-hidden="true"></i>
                                    </div>
                                </div>
                                <div class="ms-3">
                                    <div class="numbers">
                                        <h6 class="mb-0 fw-bold text-dark text-sm">@Local["Thời gian(phút)"]</h6>
                                        <span class="text-sm text-primary fw-bold">
                                            <a class="fs-6" id="doctreat_difftol"></a>
                                            <a id="doctreat_diffave" class="text-dark fw-normal ps-2" title="@Local["Trung bình"]"></a>
                                        </span>

                                    </div>
                                </div>
                            </div>
                            <div class="d-flex mt-3">
                                <div>
                                    <div class="icon icon-shape bg-success-soft shadow text-center border-radius-md shadow-none">
                                        <i class="fas fa-stream text-lg text-primary text-gradient opacity-10" aria-hidden="true"></i>
                                    </div>
                                </div>
                                <div class="ms-3">
                                    <div class="numbers">
                                        <h6 class="mb-0 fw-bold text-dark text-sm">@Local["Số ca"]</h6>
                                        <span class="text-sm text-primary fw-bold">
                                            <a class="fs-6" id="doctreat_casetol"></a>
                                            <a id="doctreat_caseave" class="text-dark fw-normal ps-2" title="@Local["Trung bình"]"></a>
                                        </span>
                                    </div>
                                </div>

                            </div>
                            <div class="d-flex mt-3">
                                <div>
                                    <div class="icon icon-shape bg-warning-soft shadow text-center border-radius-md shadow-none">
                                        <i class="ni ni-money-coins text-lg text-primary text-gradient opacity-10" aria-hidden="true"></i>
                                    </div>
                                </div>
                                <div class="ms-3">
                                    <div class="numbers">
                                        <h6 class="mb-0 fw-bold text-dark text-sm">@Local["Tiền điều trị"] (@Local["Triệu"])</h6>
                                        <span class="text-sm text-primary fw-bold">
                                            <a class="fs-6" id="doctreat_amountetol"></a>
                                            <a id="doctreat_amountave" class="text-dark fw-normal ps-2" title="@Local["Trung bình"]"></a>
                                        </span>

                                    </div>
                                </div>

                            </div>
                            <div class="d-flex mt-3">
                                <div>
                                    <div class="icon icon-shape bg-warning-soft shadow text-center border-radius-md shadow-none">
                                        <i class="fas fa-user-md text-lg text-primary text-gradient opacity-10" aria-hidden="true"></i>
                                    </div>
                                </div>
                                <div class="ms-3">
                                    <div class="numbers">
                                        <h6 class="mb-0 fw-bold text-dark text-sm">@Local["Bác sĩ"]</h6>
                                        <span class="text-sm text-primary fw-bold">
                                            <a class="fs-5" id="doctreat_doctol"></a>

                                        </span>

                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="my-0 w-100" style="overflow-x: auto; overflow-y: hidden;">
                        <div class="chart" style="height:300px;">
                            <canvas id="DocTr_Chart" class="chart-canvas"></canvas>
                        </div>
                    </div>
                </div>
                <table class="table vt-table mb-0" id="DocTreatGrid_Grid">
                    <thead>
                        <tr>
                            <th style="width: 60px">#</th>
                            <th>@Local["Bác sĩ"]</th>
                            <th><i onclick="DocTreatGrid_Sort(this,2)" class="sort cursor-pointer text-lg text-dark fas fa-sort-alpha-down pe-2"></i>@Local["Thời gian(phút)"]</th>
                            <th><i onclick="DocTreatGrid_Sort(this,3)" class="sort cursor-pointer text-lg text-dark fas fa-sort-alpha-down pe-2 "></i>@Local["Số ca"]</th>
                            <th><i onclick="DocTreatGrid_Sort(this,4)"class="sort cursor-pointer text-lg text-dark fas fa-sort-alpha-down pe-2"></i>@Local["Tiền điều trị"]</th>
                        </tr>
                    </thead>
                    <tbody id="DocTreatGrid_GridBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div id="DocTreatGrid_GeneralDetail" class="mt-3" style="display:none;">

    <div class="card card-plain">
        <div class="vtcardheader card-header p-0">
            <div class="left">
                <p id="DocTreatGrid_DetailCardGeneral" class="text-md text-dark font-weight-bold mb-1"></p>
            </div>
            <div class="right">
                <div class="wrap">
                    <div class="wrapblock">
                        <div class="text-primary fw-bold d-inline mx-2 d-flex">
                            <span id="DocTreatGrid_currentdetaildata">0</span>
                            <span class="mx-2">/</span>
                            <span id="DocTreatGrid_totaldata">0</span>
                        </div>
                        <div class="icon-hover mx-1"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Thu gọn"]">
                            <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                               data-bs-toggle="collapse" href="#DocTreatGrid_GeneralDetailDiv" aria-expanded="true"></i>
                        </div>
                        <div class="icon-hover mx-1"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Tải lại"]">
                            <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                               onclick="event.preventDefault(); return DocTreatGrid_DetailLoad()"></i>
                        </div>
                        <div class="icon-hover mx-1"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Xuất excel"]">
                            <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                               onclick="event.preventDefault(); return DocTreatGrid_ExportDetail()"></i>
                        </div>
                        <div class="icon-hover mx-1"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["In báo cáo"]">
                            <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                               onclick="event.preventDefault(); DocTreatGrid_DetailPrintReport()"></i>
                        </div>
                        <button class="btn btn-dark btn-sm mt-1 mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#DocTreatGrid_colLists">
                            @Local["Xem thêm"]
                        </button>
                    </div> 
                </div>
            </div>
            <div class="toggle">
                <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="DocTreatGrid_colLists" style="min-width:250px;">
                    <ul class="card card-body text-dark text-capitalize opacity-10">
                        <li class="d-flex cosmetic">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="timetotreatment" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Lần điều trị"]</p>
                        </li>
                        <li class="d-flex dentist">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="percenttreat" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Phần trăm hoàn thành"]</p>
                        </li>
                        <li class="d-flex dentist">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="teeth" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Răng"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="contentfollow" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Nội dung điều trị"]</p>
                        </li>
                    </ul>
                </div>

            </div>
        </div>
        <div class="collapsesticky collapse show" id="DocTreatGrid_GeneralDetailDiv">
            <div class="card-body p-0 pt-0">
                <div class="m-0 my-3 mobile-responsive vt-header-sticky">
                    <div id="DocTreatGridDetail_LoaderList" class="waitingdiv text-center w-100 mt-2 position-absolute start-50 translate-middle-x" style="display:none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <table data-name="DocTreatGrid_GridDetail" class="table vt-table mb-0" id="DocTreatGrid_GridDetail">
                        <thead>
                            <tr>
                                <th style="width: 60px">#</th>
                                <th data-name="doctor">@Local["Bác sĩ"]</th>
                                <th style="min-width: 140px">@Local["Mã khách hàng"]</th>
                                <th data-name="custname">@Local["Khách hàng"]</th>
                                <th data-name="service">@Local["Dịch vụ"]</th>
                                <th data-name="treatday">@Local["Ngày điều trị"]</th>
                                <th data-name="amount">@Local["Tiền điều trị"]</th>
                                <th data-name="time">@Local["Thời gian(phút)"]</th>
                                <th class="cosmetic" data-name="timetotreatment">@Local["Lần điều trị"]</th>
                                <th class="dentist" data-name="percenttreat">@Local["Phần trăm hoàn thành"]</th>
                                <th class="dentist" data-name="teeth">@Local["Răng"]</th>
                                <th class="col-2" data-name="contentfollow">@Local["Nội dung điều trị"]</th>
                            </tr>
                        </thead>
                        <tbody id="DocTreatGrid_GridDetailBody">
                        </tbody>
                    </table>
                </div>
                <button class="btn btnsysmore btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return DocTreatGrid_RenderDetailMore();">
                    @Local["Xem thêm"]
                </button>
            </div>

        </div>
    </div>
</div>
<script type="text/javascript">
    let _branchID = "@Model._branchID";
    let _dateFrom = "@Model._dateFrom";
    let _dateTo = "@Model._dateTo";
    let xhrLoadList, xhrLoadDetail;
    let DataReportMainDetail, DataReportMainDetailSlice;
    let IndexReportDetail = 0;
    let timeoutCountDetail;
    let DocTreatGrid_docid = 0;
    let DocTreatChart = [];
    let DocTreat_ChartType = 0;
    let DocTreatGrid_shtable;
    $(document).ready(function ()
    {
        DocTreatGrid_shtable = $("#DocTreatGrid_GridDetail").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        ToolPopper();
        DocTreatGrid_LoadData();
        Checking_TabControl_Permission();
    });
    function DocTreatGrid_LoadData()
    {
        if (xhrLoadList && xhrLoadList.readyState != 4) xhrLoadList.abort();
        xhrLoadList = AjaxLoad(url = "/Report/Treatment/Effect/DocTreatmentGrid/?handler=Loadata"
            , data = {
                'branchID': _branchID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
                'docid': 0,
                'isgeneral': 1,
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result)
            {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    $("#DocTreatGrid_GridBody").empty();
                    DocTreatGrid_Render(data, "DocTreatGrid_GridBody");
                }
                else {
                    DocTreatGrid_Chart(1);
                }
            }
            , sender = null
            , before = function (e)
            {
                $("#DocTreatGrid_LoaderList").show();
            }
            , complete = function (e)
            {
                $("#DocTreatGrid_LoaderList").hide();
            }
        );
        return false;
    }
    async function DocTreatGrid_Render(data, id)
    {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            if (data && data.length != 0) {
                DocTreatChart = [];
                let tr = '';
                let totalTime = 0, totalCase = 0, totalAmount = 0;
                let aveTime = 0, aveCase = 0, aveAmount = 0;
                let maxTime = 0, maxCase = 0, maxAmount = 0;
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    totalTime += item.DiffTime;
                    totalCase += item.NumCase;
                    totalAmount += item.Amount;
                    maxTime = maxTime < item.DiffTime ? item.DiffTime : maxTime;
                    maxCase = maxCase < item.NumCase ? item.NumCase : maxCase;
                    maxAmount = maxAmount < item.Amount ? item.Amount : maxAmount;
                }
                if (data.length != 0) {
                    aveTime = totalTime / data.length;
                    aveCase = totalCase / data.length;
                    aveAmount = totalAmount / data.length;
                }
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    let docName = RP_DataEmployee[item.BS] != undefined ? RP_DataEmployee[item.BS].Name : 'unknown';
                    let echart = {};
                    echart.Name = docName;
                    echart.NumCase = item.NumCase;
                    echart.DiffTime = item.DiffTime;
                    echart.Amount = Number(Math.round(item.Amount / 1000000)) ;
                    DocTreatChart.push(echart);
                    let averdiff = item.DiffTime >= aveTime ? 'higheraver' : 'loweraver';
                    let avercase = item.NumCase >= aveCase ? 'higheraver' : 'loweraver';
                    let averamount = item.Amount >= aveAmount ? 'higheraver' : 'loweraver';
                    let perdiff = maxTime != 0 ? (item.DiffTime / maxTime) * 100 : '100';
                    let percase = maxCase != 0 ? (item.NumCase / maxCase) * 100 : '100';
                    let peramount = maxAmount != 0 ? (item.Amount / maxAmount) * 100 : '100';
                    tr = `<tr id="doctreat_${item.BS}" class="vt-number doc" role="row">
                              <td class="vt-number-order"></td>
                              <td data-name="cardcode">
                                  <a href="#" class="border-1 border-primary border-bottom buttonViewClass mb-0 text-sm fw-bold" data-id="${item.BS}" data-name="${docName}">
                                     ${docName}
                                  </a>
                              </td>
                              <td data-value="${Number(item.DiffTime)}" data-name="difftime">
                                <div class="progress">
                                    <div class="text-dark progress-bar align-items-start ps-2 text-sm fw-bold ${averdiff}" role="progressbar" style="width: ${perdiff}%;">
                                        <span class="position-absolute">${formatNumber(item.DiffTime)}</span>
                                    </div>
                                </div>
                               </td>
                              <td data-value="${Number(item.NumCase)}" data-name="numcase">
                                 <div class="progress">
                                    <div class="text-dark progress-bar align-items-start ps-2 text-sm fw-bold ${avercase}" role="progressbar" style="width: ${percase}%;">
                                    <span class="position-absolute">${formatNumber(item.NumCase)}</span>
                                    </div>
                                </div>
                               </td>
                              <td data-value="${Number(item.Amount)}" data-name="amount">
                                <div class="progress">
                                    <div class="text-dark progress-bar align-items-start ps-2 text-sm fw-bold ${averamount}" role="progressbar" style="width: ${peramount}%;">
                                    <span class="position-absolute">${formatNumber(item.Amount)}</span>
                                    </div>
                                </div>
                            </td>                            
                    </tr>`;
                    myNode.insertAdjacentHTML('beforeend', tr);

                }
                tr = `<tr class="vt-number text-white bg-gradient bg-primary mt-2 DocTreatGrid_RowTotal" role="row">
                          <td></td>
                          <td class="text-start">
                              <a href="#" class="border-1 border-white border-bottom buttonViewClass text-white" data-id="0">@Local["Tất cả"]</a>
                          </td>
                          <td>${formatNumber(totalTime)}</td>
                          <td>${formatNumber(totalCase)}</td>
                           <td>${formatNumber(totalAmount)}</td>
                          </tr>`;
                myNode.insertAdjacentHTML('beforeend', tr);
                DocTreatGrid_GeneralEvent();
                DocTreatGrid_Chart();

                $('#doctreat_doctol').html(formatNumber(data.length));
                $('#doctreat_difftol').html(formatNumber(totalTime));
                $('#doctreat_diffave').html(formatNumber(aveTime.toFixed(0)));
                $('#doctreat_casetol').html(formatNumber(totalCase));
                $('#doctreat_caseave').html(formatNumber(aveCase.toFixed(0)));
                $('#doctreat_amountetol').html(formatNumber(Math.round(totalAmount / 1000000)));
                $('#doctreat_amountave').html(formatNumber(Math.round(aveAmount / 1000000)));

            }
        }
    }
    function DocTreatGrid_Chart (_type) {
        if (_type != undefined) DocTreat_ChartType = _type;
        switch (DocTreat_ChartType) {
            case 1: {
                let cols = [];
                cols.push({'label': '', 'value': 'DiffTime'});
                rp_barcols('DocTr_Chart', DocTreatChart, 'Name', cols, notitle = false);
                break;
            }
            case 0: {
                 let cols = [];
                cols.push({'label': '', 'value': 'NumCase'});
                rp_barcols('DocTr_Chart', DocTreatChart, 'Name', cols, notitle = false);
                break;
            }
            case 2: {
                 let cols = [];
                cols.push({'label': '', 'value': 'Amount'});
                rp_barcols('DocTr_Chart', DocTreatChart, 'Name', cols, notitle = false);
                break;
            }
        }
    }
    function DocTreatGrid_Sort (element, _type) {
        $('#DocTreatGrid_Grid .sort').removeClass('text-danger').addClass('text-dark');
        $(element).removeClass('text-dark').addClass('text-danger');
        var asc = true;
        if ($(element).hasClass('fa-sort-alpha-down')) {
            $(element).removeClass('fa-sort-alpha-down').addClass('fa-sort-alpha-up');
            asc = true;
        }
        else {
            $(element).removeClass('fa-sort-alpha-up').addClass('fa-sort-alpha-down');
            asc = false;
        }
        ReportGeneral_SortNum(tableid = 'DocTreatGrid_Grid'
            , n = _type
            , valuename = 'data-value'
            , isasc = asc
        );

    }


    //#region // LOAD DETAIL AND RENDER
    function DocTreatGrid_DetailLoad()
    {
        if (xhrLoadDetail && xhrLoadDetail.readyState != 4) xhrLoadDetail.abort();
        IndexReportDetail = 0;
        xhrLoadDetail = AjaxLoad(url = "/Report/Treatment/Effect/DocTreatmentGrid/?handler=Loadata"
            , data = {
                'branchID': _branchID,
                'dateFrom': _dateFrom,
                'dateTo': _dateTo,
                'docid': DocTreatGrid_docid,
                'isgeneral': 0
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result)
            {
                if (result != "[]") {
                    let data = JSON.parse(result);
                    DataReportMainDetail = JSON.parse(JSON.stringify(data));
                    DataReportMainDetailSlice = sliceIntoChunks(data, 500);
                    $("#DocTreatGrid_GridDetailBody").empty();
                    if (DataReportMainDetailSlice && DataReportMainDetailSlice.length != 0) {
                        fnRenderBlock(DataReportMainDetailSlice[IndexReportDetail], "DocTreatGrid_GridDetailBody"
                            , blocknum = 100
                            , fnrender = DocTreatGrid_DetailRender
                            , fnsuccess = null
                        );
                    }
                    Count_Up("DocTreatGrid_totaldata", DataReportMainDetail.length);
                }
                else {
                    notiError_SW();
                }
            }
            , sender = null
            , before = function (e)
            {
                $("#DocTreatGridDetail_LoaderList").show();
            }
            , complete = function (e)
            {
                $("#DocTreatGridDetail_LoaderList").hide();
            }
        );
    }

    function DocTreatGrid_RenderDetailMore()
    {
        IndexReportDetail += 1;
        if (DataReportMainDetailSlice && DataReportMainDetailSlice[IndexReportDetail]) {
            fnRenderBlock(DataReportMainDetailSlice[IndexReportDetail], "DocTreatGrid_GridDetailBody"
                , blocknum = 100
                , fnrender = DocTreatGrid_DetailRender
                , fnsuccess = null
            );
        }
    }

    async function DocTreatGrid_DetailRender(data, id)
    {
        new Promise((resolve) =>
        {
            setTimeout(() =>
            {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length != 0) {
                        let tr = '';
                        for (let i = 0; i < data.length; i++) {                            
                            let item = data[i];
                            data[i].PerComlete = DocTreatGrid_RenderPerComplete(sys_dencos_Main, item.TimeToTreatment
                                    , item.Treat_Index, item.PercentNew, item.PercentTab
                                    , item.StageNew, item.StageCurrent, item.HavingStage,item.Qty);
                            //DataReportMainDetail[i].PerComlete = data[i].PerComlete;
                            //DataReportMainDetail[i].TimeTreat = data[i].PerComlete;                            
                            let docName = RP_DataEmployee[item.BS] != undefined ? RP_DataEmployee[item.BS].Name : 'unknown';
                            let serName = (RP_DataService[item.ServiceID] != undefined) ? RP_DataService[item.ServiceID].Name : '';                                                        
                            
                            let tr = `<tr class="vt-number" role="row">
                                        <td class="vt-number-order"></td>
                                        <td data-name="doctor">${docName}</td>
                                        <td data-name="custcode">
                                            <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustID}&ver=${versionofWebApplication}">
                                               ${item.CustCode}
                                            </a>
                                        </td>
                                        <td data-name="custname">${item.CustName}</td>
                                        <td data-name="cardcode">${serName}</td>
                                        <td>${ConvertDateTimeUTC_DMY(INTYMDToDate(item.NumCreated))}</td>
                                        <td data-name="amount">${formatNumber(item.Amount)}</td>
                                        <td data-name="endtime">${formatNumber(item.DiffTime)}</td>
                                        <td class="cosmetic" data-name="timetotreatment">
                                            ${item.PerComlete}
                                        </td>
                                        <td class="dentist" data-name="percenttreat">
                                            ${item.PerComlete}
                                        </td>
                                        <td class="dentist" data-name="teeth">
                                            ${item.TeethTreat}
                                        </td>
                                        <td data-name="contentfollow">
                                            <span class="content_line_clamp">
                                                ${item.Content_Follow}
                                            </span>                                            
                                        </td>
                            </tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                }
                DocTreatGrid_shtable.Refresh();
                clearTimeout(timeoutCountDetail);
                timeoutCountDetail = setTimeout(() =>
                {
                    Count_Up("DocTreatGrid_currentdetaildata", $("#" + id).children().length);
                }, 300)
                resolve();
                if(sys_dencos_Main == 1) $(".cosmetic").addClass('d-none');
                else $(".dentist").addClass('d-none');
            }, 10)
        })
    }
    function DocTreatGrid_RenderPerComplete(dencosID, TimeToTreatment, Treat_Index, PercentNew, PercentTab, StageNew, StageCurrent, HavingStage,Qty) {
        let result = '';
        StageNew = Qty == 0 ? 0 : (StageNew / Qty).toFixed(0);;
        StageCurrent = Qty == 0 ? 0 : (StageCurrent / Qty).toFixed(0);
        if (dencosID == 1) {
            result = HavingStage == 1
                ? StageNew.toString() + '/' + StageCurrent.toString()
                : PercentNew.toString() + '/' + PercentTab.toString() ;
        }
        else{
            result = HavingStage == 1
                ? Treat_Index.toString() + '/' + TimeToTreatment.toString()
                : PercentNew.toString() + '/' + PercentTab.toString() ;
        }
        return result;
    }
    function DocTreatGrid_Remove1900(x)
    {
        var d = new Date(x);
        if (d.getFullYear() === 1900) return '';
        return x;
    }
    //#endregion

    //#region // Event
    function DocTreatGrid_GeneralEvent()
    {
        $("#DocTreatGrid_GridBody .buttonViewClass").unbind('click').on("click", function ()
        {
            DocTreatGrid_docid = $(this).attr('data-id');
            $('#DocTreatGrid_GridBody .doc').removeClass('active');
            $('#doctreat_' + DocTreatGrid_docid).addClass('active');
            let name = $(this).attr('data-name');
            $("#DocTreatGrid_GeneralDetail").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#DocTreatGrid_GeneralDetail").offset().top
            }, 300);
            if (DocTreatGrid_docid == "0") {
                $("#DocTreatGrid_DetailCardGeneral").html('@Local["Tất cả bác sĩ"]');
            }
            else {
                $("#DocTreatGrid_DetailCardGeneral").html(name);
            }
            $("#DocTreatGrid_GridDetailBody").empty();
            DocTreatGrid_DetailLoad();
        })
    }

    function DocTreatGrid_Export()
    {
        syslog_ExpExcel('e', Outlang["Bao_cao_hieu_qua_bac_si_dieu_tri"]);
        exportToExcel("DocTreatGrid_Grid", Outlang["Bao_cao_hieu_qua_bac_si_dieu_tri"]);
    }

    async function DocTreatGrid_ExportDetail()
    {
        try {
            if (DataReportMainDetail && DataReportMainDetail.length != 0) {
                let isCos = (sys_dencos_Main == 0);
                let isDen = (sys_dencos_Main == 1);
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }],
                    "BS": ["@Local["Bác sĩ"]", (value) =>
                    {
                        return RP_DataEmployee[value] != undefined ? RP_DataEmployee[value].Name : 'unknown';
                    }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "ServiceID": ["@Local["Dịch vụ"]", (value) =>
                    {
                        return (RP_DataService[value] != undefined) ? RP_DataService[value].Name : '';
                    }],
                    "NumCreated": ["@Local["Ngày điều trị"]", (value) => {return ConvertDateTimeUTC_DMY(INTYMDToDate(value))}],
                    "Amount": ["@Local["Tiền điều trị"]", (value) => {return formatNumber(value) }],
                    @*"BeginTime": ["@Local["Thời gian bắt đầu"]", (value) => { return GetDateTime_String_DMYHMSS(value) }],
                    "EndTime": ["@Local["Thời gian kết thúc"]", (value) =>
                    {
                        return DocTreatGrid_Remove1900(value) != '' ? GetDateTime_String_DMYHMSS(value) : DocTreatGrid_Remove1900(value);
                    }],*@
                    "DiffTime": ["@Local["Thời gian(phút)"]", (value) => { return formatNumber(value) }],                                        
                    "Content_Follow": ["@Local["Nội dung điều trị"]"],                    
                    "TeethTreat": {
                        isShow: isDen,
                        data: ["@Local["Răng"]", (value) => { return value }]
                    },
                    "PercentTab": {
                        isShow: isDen,
                        data: ["@Local["Phần trăm hoàn thành"]"
                            , (value, { TimeToTreatment
                                , Treat_Index, PercentNew
                                , StageNew, StageCurrent, HavingStage, Qty
                            }) => {
                            return DocTreatGrid_RenderPerComplete(sys_dencos_Main, TimeToTreatment
                                , Treat_Index, PercentNew, value
                                , StageNew, StageCurrent, HavingStage, Qty);
                        }]
                    },
                    "TimeToTreatment": {
                            isShow: isCos,                       
                            data: ["@Local["Lần điều trị"]"
                            , (value, { Treat_Index, PercentNew, PercentTab
                                , StageNew, StageCurrent, HavingStage, Qty
                            }) => {
                                return DocTreatGrid_RenderPerComplete(sys_dencos_Main, value
                                    , Treat_Index, PercentNew, PercentTab
                                    , StageNew, StageCurrent, HavingStage, Qty);
                            }]
                        },                    
                    }                
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'DocTreatGrid_GridDetailBody', PermissionTable_TabControl);
                let fileName = Outlang["Bao_cao_hieu_qua_bac_si_dieu_tri"] + '-' + xoa_dau($("#DocTreatGrid_DetailCardGeneral").text()).replaceAll(' ', '-');
                syslog_ExpExcel('e', fileName);
                exportJsonToExcel(fileName, DataReportMainDetail, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }
    async function DocTreatGrid_DetailPrintReport()
    {
        try {
            if (DataReportMainDetail && DataReportMainDetail.length != 0) {
                let _branchID = "@Model._branchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";                
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }],
                    "BS": ["@Local["Bác sĩ"]", {
                        callbackRenderValue: (value) =>
                        {
                            return RP_DataEmployee[value] != undefined ? RP_DataEmployee[value].Name : 'unknown';
                        }
                    }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "ServiceID": ["@Local["Dịch vụ"]", {
                        callbackRenderValue: (value) =>
                        {
                            return (RP_DataService[value] != undefined) ? RP_DataService[value].Name : '';
                        }
                    }],
                    "NumCreated": ["@Local["Ngày điều trị"]", {
                        callbackRenderValue: (value) => { return ConvertDateTimeUTC_DMY(INTYMDToDate(value)) }
                    }],                    
                    "TimeToTreatment": ["@Local["Lần điều trị"]", {
                        isShow: sys_dencos_Main == 0,
                        callbackRenderValue: (value, { Treat_Index, PercentNew, PercentTab
                                                    , StageNew, StageCurrent, HavingStage, Qty
                                                }) => {
                                                    return DocTreatGrid_RenderPerComplete(sys_dencos_Main, value
                                                        , Treat_Index, PercentNew, PercentTab
                                                        , StageNew, StageCurrent, HavingStage, Qty);
                                                }
                    }],                    
                    "PercentTab": ["@Local["Phần trăm điều trị"]", {
                        isShow: sys_dencos_Main == 1,
                        callbackRenderValue: (value, { TimeToTreatment
                                , Treat_Index, PercentNew
                                , StageNew, StageCurrent, HavingStage, Qty
                            }) => {
                            return DocTreatGrid_RenderPerComplete(sys_dencos_Main, TimeToTreatment
                                , Treat_Index, PercentNew, value
                                , StageNew, StageCurrent, HavingStage, Qty);
                        }
                    }],                   
                    "TeethTreat": ["@Local["Răng"]", {
                        isShow: sys_dencos_Main == 1,
                        callbackRenderValue: (value) => { return (value) }
                    }],
                    "Content_Follow": ["@Local["Nội dung điều trị"]", {                        
                        callbackRenderValue: (value) => { return value }
                    }],
                };                
                if(sys_dencos_Main == 1){                    
                    delete dataHeader['TimeToTreatment'];
                }else{                    
                    delete dataHeader['PercentTab'];
                    delete dataHeader['TeethTreat'];
                }
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr)
                    {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                            PRF_CBPrintReport(namePrint = Outlang["Bao_cao_hieu_qua_bac_si_dieu_tri"], DataReportMainDetail, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
//#endregion

</script>
<style>
    .higheraver {
        background: #82d61652;
    }

    .loweraver {
        background: #ff888826;
    }

    #DocTreatGrid_GridBody .progress {
        width: 100%;
        height: 20px;
        background: #e9ecef00 !important
    }

    #DocTreatGrid_GridBody .progress-bar {
        height: 24px;
    }

</style>