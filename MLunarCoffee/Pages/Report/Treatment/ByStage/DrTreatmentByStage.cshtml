@page
@model MLunarCoffee.Pages.Report.Treatment.ByStage.DrTreatmentByStageModel
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<div>
    <div class="card card-plain">
        <div class="vtcardheader card-header pb-0 px-0">
            <div class="right">
                <div class="input-group flex-nowrap" id="DTSerch_Area">
                    <div class="input-group-text input-group-text px-2">
                        <i class="fas fa-search" aria-hidden="true"></i>
                        <div class="spinner-border spinner-border-sm d-none"></div>
                    </div>
                    <input id="DTSerch_Input" type="text" class="form-control" placeholder="eg .@Local["Tìm kiếm"]">
                    <div class="input-group-text"><i class="btn_clear fas fa-minus-circle opacity-1"></i></div>
                </div>
                <div class="icon-hover mx-1  my-auto"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Thu gọn"]">
                    <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                       data-bs-toggle="collapse" href="#DT_GridArea" aria-expanded="true"></i>
                </div>
                <div class="icon-hover mx-1 my-auto"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Tải lại"]">
                    <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); return DT_Load()"></i>
                </div>
                <div class="icon-hover mx-1 my-auto"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Xuất excel"]">
                    <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel"
                       onclick="event.preventDefault(); return DT_Export()"></i>
                </div>
            </div>
        </div>
        <div class="collapsesticky collapse show" id="DT_GridArea">
            <div class="card-body p-0 col-12">
                <div class="m-0 my-3 mobile-responsive">
                    <div id="DT_LoaderList" class="waitingdiv text-center w-100 mt-2 position-absolute start-50 translate-middle-x" style="display:none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div class="mobile-responsive vt-header-sticky">
                        <table class="table vt-table mb-0" id="DT_Grid">
                            <thead>
                                <tr>
                                    <th>@Local["#"]</th>
                                    <th>@Local["Dịch vụ"]</th>
                                    <th>@Local["Số lượng"]</th>

                                </tr>
                            </thead>
                            <tbody id="DT_GridBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="DT_Detail" class="mt-3" style="display: none;">
    <div class="card card-plain">
        <div class="vtcardheader card-header px-0 pb-3">
            <div class="left">
                <p id="DT_ServiceDetail" class="text-md text-dark font-weight-bold mb-1"></p>
            </div>
            <div class="right">
                <div class="icon-hover mx-1 my-auto"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Thu gọn"]">
                    <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                       data-bs-toggle="collapse" href="#DT_DetailArea" aria-expanded="true"></i>
                </div>
                <div class="icon-hover mx-1 my-auto"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["In báo cáo"]">
                    <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); DT_DetailPrintReport()"></i>
                </div>
                <div class="icon-hover mx-1 my-auto" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="Xuất excel">
                    <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer _tab_control_" data-tab="export_excel" onclick="event.preventDefault(); return DT_DetailExport()"></i>
                </div>
            </div>
        </div>

        <div class="collapsesticky collapse show" id="DT_DetailArea">
            <div class="card-body p-0 pt-0">
                <div id="DTDetail_Loader" class="waitingdiv text-center w-100 mt-2 position-absolute start-50 translate-middle-x" style="display:none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
                <div class="mobile-responsive vt-header-sticky">
                    <table class="table vt-table mb-4">
                        <thead>
                            <tr>
                                <th>@Local["#"]</th>
                                <th>@Local["Bước điều trị"]</th>
                                <th>@Local["Số lượng"]</th>
                            </tr>
                        </thead>
                        <tbody id="DT_GridStageBody">
                        </tbody>
                    </table>
                </div>
                <div class="mobile-responsive vt-header-sticky">
                    <table data-name="DT_DetaildtContent" class="table vt-table mb-0" id="DT_DetaildtContent">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th style="min-width: 150px">@Local["Mã khách hàng"]</th>
                                <th style="min-width: 150px">@Local["Tên khách hàng"]</th>
                                <th style="min-width: 150px">@Local["Ngày điều trị"]</th>
                                <th style="min-width: 150px">@Local["Bác sĩ"]</th>
                                <th style="min-width: 150px">@Local["Bước điều trị"]</th>
                                <th style="min-width: 150px">@Local["Chi tiết"]</th>
                                <th style="min-width: 150px">@Local["Số lượng"]</th>
                                <th style="min-width: 150px">@Local["Đơn giá"]</th>
                                <th style="min-width: 150px">@Local["Thành tiền"]</th>
                                <th>@Local["Nội dung"]</th>
                            </tr>
                        </thead>
                        <tbody id="DT_GridDetailBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    var DTSerch_Timer;
    var DT_ListData = [];
    var DT_DataExport = [];
    let DT_BranchID, DT_DateFrom, DT_DateTo;
    let xhrLoadList, xhrLoadDetailCust;

    $(document).ready(function () {
        DT_BranchID = "@Model._branchID";
        DT_DateFrom = "@Model._dateFrom";
        DT_DateTo = "@Model._dateTo";
        DT_Load();
        DT_IniEvent();
    })

    //#region //Master
    function DT_IniEvent() {
        $('#DTSerch_Input').keyup(function () {
            if ($(this).val().length > 0) $("#DTSerch_Area .btn_clear").removeClass('opacity-1');
            else $("#DTSerch_Area .btn_clear").addClass('opacity-1');
            $("#DTSerch_Area .fa-search").hide();
            $("#DTSerch_Area .spinner-border").removeClass('d-none');
            clearTimeout(DTSerch_Timer);
            DTSerch_Timer = setTimeout(function (e) {
                DT_Filter("DT_GridBody");
            }, 500);
        });
        $("#DTSerch_Area").on('click', '.btn_clear', function (e) {
            $('#DTSerch_Input').val('');
            $("#DTSerch_Area .btn_clear").addClass('opacity-1');
            DT_Filter("DT_GridBody");
        });
    }
    async function DT_Filter(id) {
        await new Promise((resolve, reject) => {
            setTimeout(
                () => {

                    let textsearch = $('#DTSerch_Input').val().trim();
                    if (textsearch == "") {
                        DT_Render(DT_ListData, id);
                    }
                    else {
                        let search = xoa_dau(textsearch.toLowerCase());
                        if (search == "") {
                            DT_Render(DT_ListData, id);
                        }
                        else {

                            let data = DT_ListData.filter(word => {
                                return (xoa_dau(word.Name.toLowerCase()).includes(search));
                            });
                            DT_Render(data, id);
                        }
                    }
                    $("#DTSerch_Area .fa-search").show();
                    $("#DTSerch_Area .spinner-border").addClass('d-none');
                    resolve()
                }
            )
        })
    }
    function DT_Load() {
        if (xhrLoadList && xhrLoadList.readyState != 0) xhrLoadList.abort();
        xhrLoadList = AjaxLoad(url = "/Report/Treatment/ByStage/DrTreatmentByStage/?handler=Loadata"
            , data = {
                'branchID': DT_BranchID
                , 'dateFrom': DT_DateFrom
                , 'dateTo': DT_DateTo
            }
            , async = true
            , error = function () { notiError_SW() }
            , success = function (result) {
                if (result != "0") {
                    DT_ListData = JSON.parse(result)["Table"];
                    DT_Render(DT_ListData, "DT_GridBody");
                } else {
                    notiError_SW();
                }
            }
            , sender = null
            , before = function (e) {
                $(`#DT_LoaderList`).show();
            }
            , complete = function (e) {
                $(`#DT_LoaderList`).hide();
            }
        );
        return false;
    }
    async function DT_Render(data, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringcontent = '';
                if (data && data.length > 0) {
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        let tr = `
                                    <td class="vt-number-order"></td>
                                    <td><a class="border-1 border-primary cursor-pointer border-bottom text-primary btnClick" data-serName="${item.Name}" data-serID="${item.ServiceID}">${item.Name}</a></td>
                                    <td>${formatNumber(item.TotalTeeth)}</td>

                                `
                        stringcontent = stringcontent + '<tr class="vt-number" role="row">' + tr + '</tr>';
                    }
                }
                document.getElementById(id).innerHTML = stringcontent;
            }
            DT_Event();
        })
    }
    function DT_Event() {
        $("#DT_GridBody .btnClick").unbind("click").click(function () {
            let serID = Number($(this).attr("data-serID"));
            let serName = $(this).attr("data-serName");
            $("#DT_Detail").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#DT_Detail").offset().top
            }, 300);
            $("#DT_ServiceDetail").html(serName);
            DTDetail_Load(serID);
        })
    }

    //#endregion

    //#region // Detail
    function DTDetail_Load(ID) {
        if (xhrLoadDetailCust && xhrLoadDetailCust.readyState != 0) xhrLoadDetailCust.abort();
        if (ID != 0) {
            xhr = AjaxLoad(url = `/Report/Treatment/ByStage/DrTreatmentByStage/?handler=LoadataDetail`
                , data = {
                    "ServiceID": ID
                    , "branchID": DT_BranchID
                    , 'dateFrom': DT_DateFrom
                    , 'dateTo': DT_DateTo
                }
                , async = true
                , error = function () { notiError_SW() }
                , success = function (result) {
                    if (result != "0") {
                        let dataStage = JSON.parse(result)["Table"];
                        DT_DataExport = JSON.parse(result)["Table1"];
                        DTStage_Render(dataStage, "DT_GridStageBody");
                        DTDetail_Render(DT_DataExport, "DT_GridDetailBody");
                    }
                    else {
                        notiError_SW();
                    }
                }
                , sender = null
                , before = function (e) {
                    $(`#DTDetail_Loader`).show();
                }
                , complete = function (e) {
                    $(`#DTDetail_Loader`).hide();
                }
            );
        }
    }
    async function DTStage_Render(data, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let stringcontent = '';
                let total = 0;
                if (data && data.length > 0) {

                    for (let i = 0; i < data.length; i++) {

                        let item = data[i];
                        total = total + item.TotalTeeth;
                        let tr = `
                                    <td class="vt-number-order"></td>
                                    <td><a class="border-1 border-primary cursor-pointer border-bottom text-primary btnstage" data-stage="${item.StageID}">${item.Name}</a></td>
                                    <td>${formatNumber(item.TotalTeeth)}</td>
                                `
                        stringcontent = stringcontent + '<tr class="vt-number" role="row">' + tr + '</tr>';
                    }
                }
                stringcontent = stringcontent + `<tr class="text-white cursor-pointer bg-gradient bg-primary btnstage" data-stage="0" role="row">
                            <td></td><td>@Local["Tổng"]</td><td>${formatNumber(total)}</td>
                            </tr>`;
                document.getElementById(id).innerHTML = stringcontent;
            }
            DTStage_Event();
        })
    }
    function DTStage_Event() {
        $("#DT_GridStageBody .btnstage").unbind("click").click(function () {
            let stageid = Number($(this).attr("data-stage"));
            if (stageid != "0") {
                let data = DT_DataExport.filter(word => {
                    return (word.StageID == stageid);
                });
                DTDetail_Render(data, "DT_GridDetailBody");
            }
            else {
                DTDetail_Render(DT_DataExport, "DT_GridDetailBody");
            }

        })
    }

    async function DTDetail_Render(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                myNode.innerHTML = "";
                if (myNode != null) {
                    if (data && data.length != 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let TeethName = Fun_GetTeeth_ByToken(DataTeeth, item.TeethID + ',', item.TeethType);
                            let tr = `<tr class="vt-number">
                                            <td class="vt-number-order"></td>
                                            <td><a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CusID}">${item.CusCode}</a></td>
                                            <td>${item.CusName}</td>
                                            <td>${ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(item.TreatDate))}</td>
                                            <td>${item.DocName1}</td>
                                            <td>${item.StageName}</td>
                                            <td>${TeethName}</td>
                                            <td>${item.Quantity}</td>
                                            <td>${formatNumber(item.UniPrice)}</td>
                                            <td>${formatNumber(item.PriceDiscounted)}</td>
                                            <td><span class="content_line_clamp">${item.Content_Follow}</span></td>
                                        </tr>
                                        `;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                    resolve();
                }

            }, 10)
        })
    }
    //#endregion

    //#region Export && Print
    function DT_Export() {
        syslog_ExpExcel('e', Outlang["Sys_buoc_dieu_tri"]);
        exportToExcel("DT_Grid", Outlang["Sys_buoc_dieu_tri"]);
    }

    async function DT_DetailExport() {
        try {

            if (DT_DataExport && DT_DataExport.length != 0) {
                var dataHeader = {}, fileName = '';
                dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, index) => { return index + 1; }]
                    , "CusCode": ["@Local["Mã khách hàng"]"]
                    , "CusName": ["@Local["Tên khách hàng"]"]
                    , "TreatDate": ["@Local["Ngày điều trị"]", (value) => { return ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(value)) }]
                    , "DocName1": ["@Local["Bác sĩ"] 1"]
                    , "StageName": ["@Local["Bước điều trị"]"]
                    , "TeethID": ["@Local["Chi tiết"]", (v, { TeethType }) => { return Fun_GetTeeth_ByToken(DataTeeth, v + ',', TeethType) }]
                    , "Quantity": ["@Local["Số lượng"]"]
                    , "UniPrice": ["@Local["Đơn giá"]"]
                    , "PriceDiscounted": ["@Local["Thành tiền"]"]
                    , "Content_Follow": ["@Local["Nội dung"]"]

                }
                fileName = Outlang["Sys_buoc_dieu_tri"];
                syslog_ExpExcel('e', fileName);
                exportJsonToExcel(fileName, DT_DataExport, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!');
        }
    }
    async function DT_DetailPrintReport() {
        try {
            if (DT_DataExport && DT_DataExport.length != 0) {
                let _branchID = "@Model._branchID";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                let dataHeader = {}, fileName = '';

                dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, index) => { return index + 1; }
                    }]
                    , "CusCode": ["@Local["Mã khách hàng"]"]
                    , "CusName": ["@Local["Tên khách hàng"]"]
                    , "TreatDate": ["@Local["Ngày điều trị"]", {
                        callbackRenderValue: (value) => { return ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(value)) }
                    }]
                    , "DocName1": ["@Local["Bác sĩ"] 1"]

                    , "StageName": ["@Local["Bước điều trị"]"]
                    , "TeethID": ["@Local["Chi tiết"]", {
                        callbackRenderValue: (v, { TeethType }) => { return Fun_GetTeeth_ByToken(DataTeeth, v + ',', TeethType) }
                    }]
                    , "Quantity": ["@Local["Số lượng"]"]
                    , "UniPrice": ["@Local["Đơn giá"]"]
                    , "PriceDiscounted": ["@Local["Thành tiền"]"]
                    , "Content_Follow": ["@Local["Nội dung"]"]
                }
                fileName = Outlang["Bao_cao_buoc_dieu_tri"];
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = fileName, DT_DataExport, dataHeader, options);
                        }
                        if (statusTxt == "error") {

                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
        //#endregion
</script>
