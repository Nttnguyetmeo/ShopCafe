@page
@model MLunarCoffee.Pages.Report.Account.DebtByArisingGridModel
@{
    Layout = null;
}

<script>js_require('/js/comon/initialize_setting.js');</script>
<div id="DBAG_Container">
    <div class="card card-plain">
        <div class="vtcardheader card-header p-0 pt-2 d-block d-lg-flex">
            <div class="left w-lg-40">
                <div class="col-auto my-auto d-lg-flex">
                    <div class="col-12 col-lg-auto ps-0 pt-2 pe-lg-2">
                        <div class="border-radius-md mt-1 d-flex">
                            <div class="field d-flex align-items-center mt-1">
                                <div class="form-check">
                                    <input id="rp_all" onchange="event.preventDefault();return DBAG_Filter();" class="form-check-input pr-2 checkType" data-type="all" type="radio" checked="checked" name="debtarising">
                                    <label for="rp_all" class="custom-control-label text-nowrap">@Local["Tất cả"]</label>
                                </div>
                            </div>
                            <div class="field d-flex align-items-center mt-1">
                                <div class="form-check ms-3">
                                    <input id="rp_service" onchange="event.preventDefault();return DBAG_Filter();" class="form-check-input pr-2 checkType" data-type="ser" type="radio" name="debtarising">
                                    <label for="rp_service" class="custom-control-label text-nowrap">@Local["Dịch vụ"]</label>
                                </div>
                            </div>
                            <div class="align-items-center d-flex field mt-1">
                                <div class="form-check ms-3">
                                    <input id="rp_other" onchange="event.preventDefault();return DBAG_Filter();" class="form-check-input pr-2 checkType" data-type="other" type="radio" name="debtarising">
                                    <label for="rp_other" class="custom-control-label text-nowrap">@Local["Khác"]</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg pt-2" id="BC_SerSourceDiv">
                        <div class="ui fluid search selection dropdown form-control" id="BC_SourceService"  onchange="event.preventDefault();return DBAG_Filter();">
                            <input type="hidden" class="_validation_option_" data-validation="cbbass_tabmulti" />
                            <i class="dropdown icon"></i>
                            <i class="remove icon"></i>
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text">eg .@Local["Nguồn dịch vụ"]</div>
                            <div id="BC_cbbSourceService" class="menu" tabindex="-1"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="right mt-1 w-lg-60">
                <div class="wrap">
                    <div class="wrapblock">
                        <div class="text-primary fw-bold d-inline me-2 text-nowrap mt-1">
                            <span id="DBAG_currentdata">0</span>
                            <span class="mx-2">/</span>
                            <span id="DBAG_totaldata">0</span>
                        </div>
                        <div class="icon-hover mx-1 mt-1"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Thu gọn"]">
                            <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                               data-bs-toggle="collapse" href="#DBAG_GridArea" aria-expanded="true"></i>
                        </div>
                        <div class="icon-hover mx-1 mt-1"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Tải lại"]">
                            <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                               onclick="event.preventDefault(); return DBAG_Load()"></i>
                        </div>
                        <div class="icon-hover mx-1 mt-1"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["In báo cáo"]">
                            <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                               onclick="event.preventDefault(); DBAG_PrintReport()"></i>
                        </div>
                        <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel">
                            <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                                 data-bs-toggle="tooltip" data-bs-placement="top"
                                 data-bs-original-title="@Local["Xuất excel"]">
                                <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                            </div>
                            <div class="input-group-text icon-hover w-auto vttech-input-item">
                                <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return DBAG_Export(0)">@Local["Tất cả"]</i>
                            </div>
                            <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                                <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return DBAG_Export(1)">@Local["Tùy chọn"]</i>
                            </div>
                        </div>
                        <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                            @Local["Xem thêm"]
                        </button>
                    </div> 
                </div>
            </div>
            <div class="toggle">
                <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                    <ul class="card card-body text-dark text-capitalize opacity-10">
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="doccode" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Mã hồ sơ"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="custcodeold" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Mã khách hàng cũ"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="phone" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Điện thoại"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="staff" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Chăm sóc khách hàng"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="method" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Hình thức thanh toán"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="type" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Loại DV/SP"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogle form-check-input" data-name="sersource" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Nguồn dịch vụ"]</p>
                        </li>
                    </ul>
                </div>

            </div>
        </div>
        <div class="card-body p-0 mt-2">
            <div class="row" id="BC_TotalDiv">
                <div class="col-12 col-lg-4 col-md-12">
                    <div class="MS_CheckHR bg-gray-100 border-5 border-primary border-radius-bottom-start-0 border-radius-lg border-radius-top-start-0 border-start card-body mt-2 p-2 py-3">
                        <div class="ms-2">
                            <span class="text-sm fw-bold text-secondary">@Local["Tổng tiền phát sinh"]</span>
                        </div>
                        <div class="ms-2 d-flex text-dark">
                            <span id="lbTotalAmount" class="text-lg fw-bold text-primary">0</span>
                        </div>
                    </div>
                </div>

                <div class="col-12 col-lg-4 col-md-12">
                    <div class="MS_CheckHR bg-gray-100 border-5 border-primary border-radius-bottom-start-0 border-radius-lg border-radius-top-start-0 border-start card-body mt-2 p-2 py-3">
                        <div class="ms-2">
                            <span class="text-sm fw-bold text-secondary">@Local["Tổng tiền thanh toán"]</span>
                        </div>
                        <div class="ms-2 d-flex text-dark">
                            <span id="lbTotalAmount" class="text-lg fw-bold text-primary">0</span>
                        </div>
                    </div>
                </div><div class="col-12 col-lg-4 col-md-12">
                    <div class="MS_CheckHR bg-gray-100 border-5 border-danger border-radius-bottom-start-0 border-radius-lg border-radius-top-start-0 border-start card-body mt-2 p-2 py-3">
                        <div class="ms-2">
                            <span class="text-sm fw-bold text-secondary">@Local["Tổng tiền công nợ"]</span>
                        </div>
                        <div class="ms-2 d-flex text-dark">
                            <span id="lbTotalAmountBalance" class="text-lg  text-danger fw-bold">0</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="collapsesticky collapse show mt-3" id="DBAG_GridArea">
                <div class="m-0 my-0 mobile-responsive vt-header-sticky">
                    <table class="table vt-table mb-0" id="DBAG_Grid">
                        <thead>
                            <tr role="row">
                                <th rowspan="2">#</th>
                                <th rowspan="2" style="min-width: 150px;">@Local["Mã khách hàng"]</th>
                                <th rowspan="2" style="min-width: 200px;">@Local["Khách hàng"]</th>
                                <th rowspan="2" data-name="custcodeold" style="min-width: 150px;">@Local["Mã khách hàng cũ"]</th>
                                <th rowspan="2" data-name="doccode" style="min-width: 150px;">@Local["Mã hồ sơ"]</th>
                                <th rowspan="2" data-name="phone" style="min-width: 150px;">@Local["Điện thoại"]</th>
                                <th rowspan="2" data-name="staff" style="min-width: 150px;">@Local["Chăm sóc khách hàng"]</th>
                                <th rowspan="2" data-name="method" style="min-width: 150px;">@Local["Hình thức thanh toán"]</th>
                                <th rowspan="2" data-name="type" style="min-width: 150px;">@Local["Loại DV/SP"]</th>
                                <th rowspan="2" style="min-width: 150px;">@Local["Tên DV/SP"]</th>
                                <th rowspan="2" style="min-width: 150px;" data-name="sersource">@Local["Nguồn dịch vụ"]</th>
                                <th rowspan="1" colspan="3" style="min-width: 150px;">@Local["Dịch vụ"]</th>
                                <th rowspan="1" colspan="3" style="min-width: 150px;">@Local["Khác"]</th>
                            </tr>
                            <tr>
                                <th style="min-width: 150px;">@Local["Phát sinh"]</th>
                                <th style="min-width: 150px;">@Local["Thanh toán"]</th>
                                <th style="min-width: 150px;">@Local["Công nợ"]</th>
                                <th style="min-width: 150px;">@Local["Phát sinh"]</th>
                                <th style="min-width: 150px;">@Local["Thanh toán"]</th>
                                <th style="min-width: 150px;">@Local["Công nợ"]</th>
                            </tr>
                        </thead>
                        <tbody id="DBAG_GridBody">
                        </tbody>
                    </table>
                </div>
                <button class="btn btnsysmore btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return DBAG_RenderMore();">
                    @Local["Xem thêm"]
                </button>

            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    //#region // DECLARE & INIT LOAD LIST

    let xhrLoadList;
    let DataReportMain, DataReportMainSlice;
    let IndexReport = 0;
    let shtable;
    let timeoutCount;

    $(document).ready(function () {
        shtable = $("#DBAG_Grid").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        ToolPopper();
        if (Object.keys(RP_DataServiceSource).length > 0) {
            $('#BC_SerSourceDiv').show();
            Load_Combo(Object.values(RP_DataServiceSource), "BC_cbbSourceService", false, '@Local["Nguồn dịch vụ"]');
            $("#BC_SourceService").dropdown("refresh");
            $("#BC_SourceService").dropdown("set selected", "0");

        }
        else {
            $('#BC_SerSourceDiv').hide();
        }
        DBAG_Load();
        Checking_TabControl_Permission();
    });

    function DBAG_Load() {
        if (xhrLoadList && xhrLoadList.readyState != 4) xhrLoadList.abort();
        let _branchID = "@Model._branch";
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";
        IndexReport = 0;
        $("#DBAG_GridBody, #DBAG_GridFoot").empty();
        xhrLoadList = AjaxLoad(url = "/Report/Account/DebtByArisingGrid/?handler=Loadata"
            , data = { 'branchID': _branchID, 'dateFrom': _dateFrom, 'dateTo': _dateTo }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    DBAG_CalculatorTotal(data);
                    DataReportMain = JSON.parse(JSON.stringify(data));
                    DataReportMainSlice = sliceIntoChunks(data, 500);
                    if (DataReportMainSlice && DataReportMainSlice.length != 0) {
                        fnRenderBlock(DataReportMainSlice[IndexReport], "DBAG_GridBody"
                            , blocknum = 100
                            , fnrender = DBAG_Render
                            , fnsuccess = null
                        );
                    }

                    Count_Up("DBAG_totaldata", DataReportMain.length);
                }
                else {
                    notiError_SW();
                }
            }
        );
        return false;
    }

    function DBAG_RenderMore() {
        IndexReport += 1;
        if (DataReportMainSlice && DataReportMainSlice[IndexReport]) {
            fnRenderBlock(DataReportMainSlice[IndexReport], "DBAG_GridBody"
                , blocknum = 100
                , fnrender = DBAG_Render
                , fnsuccess = null
            );
        }
    }

    //#endregion


    //#region // RENDER

    async function DBAG_Render(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = `
                                          <td class="vt-number-order" ></td>
                                          <td >
                                              <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustID}&ver=${versionofWebApplication}">
                                                  ${item.CustCode}
                                              </a>
                                          </td>
                                          <td >${item.CustName}</td>
                                                  <td data-name='custcodeold'>${item.CustOldCode}</td>
                                          <td data-name='doccode'>${item.DocCode}</td>
                                          <td data-name="phone"><span class="_tab_control_" data-tab="phone_customer">${item.Phone}</span></td>
                                          <td data-name="staff">${DBAG_Render_GetName(RP_DataEmployee, item.StaffID)}</td>
                                          <td data-name="method">${item.Method}</td>
                                          <td data-name="type">${DBAG_Render_GetType(item.Type, item.IsSer)}</td>
                                          <td>${DBAG_Render_GetServiceName(item.Type, item.ServiceID, item.CardID, item.MedicineID)}</td>
                                          <td data-name="sersource">${DBAG_Render_GetName(RP_DataServiceSource, item.SerSourceID) }</td>
                                          <td >${item.IsSer == 1 ? formatNumber(item.Amount) : ''}</td>
                                          <td >${item.IsSer == 1 ? formatNumber(item.Paid) : ''}</td>
                                          <td >${item.IsSer == 1 ? formatNumber((item.Amount - item.Paid)) : ''}</td>
                                          <td >${item.IsSer == 0 ? formatNumber(item.Amount) : ''}</td>
                                          <td >${item.IsSer == 0 ? formatNumber(item.Paid) : ''}</td>
                                          <td >${item.IsSer == 0 ? formatNumber((item.Amount - item.Paid)) : ''}</td>
                                          `
                            tr = `<tr class="vt-number" role="row">${tr}</tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                        shtable.Refresh();
                        Checking_TabControl_Permission();
                        clearTimeout(timeoutCount);
                        timeoutCount = setTimeout(() => {
                            Count_Up("DBAG_currentdata", $("#" + id).children().length);
                        }, 300)
                    }
                }
            }, 100);
        })
    }


    function DBAG_CalculatorTotal(data) {
        let totalAmount = 0;
        let totalAmountPaid = 0;
        let custid = 0;
        if (data && data.length != 0) {
            for (let i = 0; i < data.length; i++) {
                let item = data[i];
                totalAmount += item.Amount;
                totalAmountPaid += item.Paid;
            }
        }
        Count_Up("lbTotalAmount", totalAmount, 1);
        Count_Up("lbTotalAmountPaid", totalAmountPaid, 1);
        Count_Up("lbTotalAmountBalance", totalAmount - totalAmountPaid, 1);
    }

    function DBAG_Render_GetName(data, id) {
        try {
            let result = '';
            if (data && data[id] != undefined) {
                result = data[id].Name;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    function DBAG_Render_GetServiceName(type, serid, medid, cardid) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = (RP_DataService[serid] != undefined) ? RP_DataService[serid].Name : ''
                    break;
                case 2:
                    result = (RP_DataCard[cardid] != undefined) ? RP_DataCard[cardid].Name : ''
                    break;
                case 3:
                    result = (RP_DataMedicine[medid] != undefined) ? RP_DataMedicine[medid].Name : ''
                    break;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }
    function DBAG_Render_GetType(type, isser) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = isser == 1 ? decodeHtml('@Local["Dịch vụ"]') : decodeHtml('@Local["Sản phẩm"]')
                    break;
                case 2:
                    result = decodeHtml('@Local["Thẻ trả trước"]')
                    break;
                case 3:
                    result = decodeHtml('@Local["Đơn thuốc"]')
                    break;

            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    function DBAG_Refresh() {
        IndexReport = 0;
        $("#DBAG_GridBody").empty();
        $("#lbTotalAmount").html(0);
        $("#lbTotalAmountPaid").html(0);
        $("#lbTotalAmountBalance").html(0);
    }

    function DBAG_Filter(created, createdBy) {
        try {
            DBAG_Refresh();
            let dataFilter = JSON.parse(JSON.stringify(DataReportMain));
            let checkList = $('.checkType[name="debtarising"]:checked')
            let sersource = $('#BC_SourceService').dropdown("get value") ? Number($('#BC_SourceService').dropdown("get value")) : 0;
            if (checkList.length == 0) return;
            let dataType = checkList.attr('data-type');
            if (dataType != 'all') {
                if (dataType == 'ser') dataFilter = dataFilter.filter((word) => { return word['IsSer'] == 1 })
                if (dataType == 'other') dataFilter = dataFilter.filter((word) => { return word['IsSer'] == 0 })
            }
            dataFilter = dataFilter.filter((word) => { return (sersource == 0 || word['SerSourceID'] == sersource) });
            Count_Up("DBAG_totaldata", dataFilter.length);
            DBAG_CalculatorTotal(dataFilter);
            DataReportMainSlice = sliceIntoChunks(dataFilter, 500);
            fnRenderBlock(DataReportMainSlice[IndexReport], "DBAG_GridBody"
                , blocknum = 100
                , fnrender = DBAG_Render
                , fnsuccess = null
            );
        }
        catch (ex) {

        }
    }

    //#endregion

    //#region // EXPORT - PRINT

    function DBAG_Export(isOption = 0) {
        try {
            if (DataReportMain && DataReportMain.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#DBAG_Container');
                var dataHeader = {
                    "STT": ["@Local["STT"]", (value, { }, idx) => { return idx + 1 }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "CustOldCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='custcodeold']`)).is(":checked"),
                        data: ["@Local["Mã khách hàng cũ"]"]
                    },
                    "DocCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='doccode']`)).is(":checked"),
                        data: ["@Local["Mã hồ sơ"]"]
                    },
                    "Phone": {
                        dataNamePer: 'phone',
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='phone']`)).is(":checked"),
                        data: ["@Local["Số điện thoại"]"]
                    },
                    "StaffID": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='staff']`)).is(":checked"),
                        data: ["@Local["Chăm sóc khách hàng"]", (v) => {
                            return DBAG_Render_GetName(RP_DataEmployee, v)
                        }]
                    },
                    "Method": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='method']`)).is(":checked"),
                        data: ["@Local["Hình thức thanh toán"]"]
                    },
                    "Type": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='type']`)).is(":checked"),
                        data: ["@Local["Loại DV/SP"]", (v, { Type, IsSer }) => {
                            return DBAG_Render_GetType(Type, IsSer)
                        }]
                    },
                    "SerSourceID": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='sersource']`)).is(":checked"),
                        data: ["@Local["Nguồn dịch vụ"]", (v) => {
                            return DBAG_Render_GetName(RP_DataServiceSource, v)
                        }]
                    },
                    "IsSer": ["@Local["Tên DV/SP"]", (v, { Type, ServiceID, CardID, MedicineID }) => {
                        return DBAG_Render_GetServiceName(Type, ServiceID, CardID, MedicineID)
                    }],
                    "AmountSer": ["@Local["Phát sinh dịch vụ"]", (v, { IsSer, Amount }) => {
                        return IsSer == 1 ? Amount : '';
                    }],
                    "PaidSer": ["@Local["Thanh toán dịch vụ"]", (v, { IsSer, Paid }) => {
                        return IsSer == 1 ? Paid : '';
                    }],
                    "DebtSer": ["@Local["Công nợ dịch vụ"]", (v, { IsSer, Amount, Paid }) => {
                        return IsSer == 1 ? Amount - Paid : '';
                    }],
                    "AmountOther": ["@Local["Phát sinh khác"]", (v, { IsSer, Amount }) => {
                        return IsSer == 0 ? Amount : '';
                    }],
                    "PaidOther": ["@Local["Thanh toán khác"]", (v, { IsSer, Paid }) => {
                        return IsSer == 0 ? Paid : '';
                    }],
                    "DebtOther": ["@Local["Công nợ khác"]", (v, { IsSer, Amount, Paid }) => {
                        return IsSer == 0 ? Amount - Paid : '';
                    }]
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'DBAG_GridBody', PermissionTable_TabControl);
                syslog_ExpExcel('e', Outlang["Sys_bao_cao_cong_no_phat_sinh_dich_vu"]);
                exportJsonToExcel(Outlang["Sys_bao_cao_cong_no_phat_sinh_dich_vu"], DataReportMain, dataHeader);
            }
            else {
                notiWarning('@Local["Không có dữ liệu để xuất"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]!' + ex.message);
        }
    }

    async function DBAG_PrintReport() {
        try {
            if (DataReportMain && DataReportMain.length != 0) {
                let _branchID = "@Model._branch";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["@Local["STT"]", {
                        callbackRenderValue: (value, { }, idx) => { return idx + 1 }
                    }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "CustOldCode": ["@Local["Mã khách hàng cũ"]", {
                        isShow: $(`.shtoogle[data-name='custcodeold']`).is(":checked")
                    }],
                    "DocCode": ["@Local["Mã hồ sơ"]", {
                        isShow: $(`.shtoogle[data-name='doccode']`).is(":checked")
                    }],
                    "Phone": {
                        dataNamePer: 'phone',
                        data: ["@Local["Số điện thoại"]", { isShow: $(`.shtoogle[data-name='phone']`).is(":checked") }]
                    },
                    "StaffID": ["@Local["Chăm sóc khách hàng"]", {
                        isShow: $(`.shtoogle[data-name='staff']`).is(":checked"),
                        callbackRenderValue: (v) => {
                            return DBAG_Render_GetName(RP_DataEmployee, v)
                        }
                    }],
                    "Method": ["@Local["Hình thức thanh toán"]", {
                        isShow: $(`.shtoogle[data-name='method']`).is(":checked")
                    }],
                    "Type": ["@Local["Loại DV/SP"]", {
                        isShow: $(`.shtoogle[data-name='type']`).is(":checked"),
                        callbackRenderValue: (v, { Type, IsSer }) => {
                            return DBAG_Render_GetType(Type, IsSer)
                        }
                    }],
                    "SerSourceID": ["@Local["Nguồn dịch vụ"]", {
                        isShow: $(`.shtoogle[data-name='sersource']`).is(":checked"),
                        callbackRenderValue: (v) => {
                            return DBAG_Render_GetName(RP_DataServiceSource, v)
                        }
                    }],
                    "IsSer": ["@Local["Tên DV/SP"]", {
                        callbackRenderValue: (v, { Type, ServiceID, CardID, MedicineID }) => {
                            return DBAG_Render_GetServiceName(Type, ServiceID, CardID, MedicineID)
                        }
                    }],
                    "AmountSer": ["@Local["Phát sinh dịch vụ"]", {
                        callbackRenderValue: (v, { IsSer, Amount }) => {
                            return IsSer == 1 ? Amount : '';
                        }
                    }],
                    "PaidSer": ["@Local["Thanh toán dịch vụ"]", {
                        callbackRenderValue: (v, { IsSer, Paid }) => {
                            return IsSer == 1 ? Paid : '';
                        }
                    }],
                    "DebtSer": ["@Local["Công nợ dịch vụ"]", {
                        callbackRenderValue: (v, { IsSer, Amount, Paid }) => {
                            return IsSer == 1 ? Amount - Paid : '';
                        }
                    }],
                    "AmountOther": ["@Local["Phát sinh khác"]", {
                        callbackRenderValue: (v, { IsSer, Amount }) => {
                            return IsSer == 0 ? Amount : '';
                        }
                    }],
                    "PaidOther": ["@Local["Thanh toán khác"]", {
                        callbackRenderValue: (v, { IsSer, Paid }) => {
                            return IsSer == 0 ? Paid : '';
                        }
                    }],
                    "DebtOther": ["@Local["Công nợ khác"]", {
                        callbackRenderValue: (v, { IsSer, Amount, Paid }) => {
                            return IsSer == 0 ? Amount - Paid : '';
                        }
                    }]
                };
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'DBAG_GridBody', PermissionTable_TabControl);
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = Outlang["Sys_bao_cao_cong_no_phat_sinh_dich_vu"], DataReportMain, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]!');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]!');
        }
    }
                                                //#endregion

</script>



