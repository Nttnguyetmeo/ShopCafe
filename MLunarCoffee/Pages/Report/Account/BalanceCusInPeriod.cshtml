@page
@model MLunarCoffee.Pages.Report.Account.BalanceCusInPeriodModel
@{
    Layout = null;
}

<script>js_require('/js/comon/initialize_setting.js');</script>
<div id="CP_MasterContainer">
    <div class="vtcardheader card-header d-block d-lg-flex p-3 px-0 pb-0">
        <div class="left w-lg-50">
            <div class="col-auto my-auto d-lg-flex">
                <div class="col-12 col-lg-6 px-0 pt-2 pe-lg-2">
                    <div class="input-group mb-0 flex-nowrap">
                        <div class="ui fluid search selection dropdown" id="CP_TypeCus" style="width:30%;">
                            <input type="hidden" />
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text"></div>
                            <div id="CP_CbbTypeCus" class="menu" tabindex="-1">
                            </div>
                        </div>
                        <input id="CP_SearchCus" class="form-control" type="text" placeholder="eg .@Local["Nhập tối thiểu 3 ký tự"]" />
                        <div class="input-group-text" id="CP_AreaBtnSearch">
                            <i class="btn_clear fas fa-minus-circle opacity-1"></i>
                            <div class="spinner-border spinner-border-sm d-none"></div>
                        </div>
                    </div>
                </div>

                <div class="col-12 col-lg-6 pt-2 px-0" id="CP_SerSourceDiv" style="display: none">
                    <div class="ui fluid search selection dropdown form-control" id="CP_SourceService">
                        <input type="hidden" class="_validation_option_" data-validation="cbbass_tabmulti" />
                        <i class="dropdown icon"></i>
                        <i class="remove icon"></i>
                        <input class="search" autocomplete="off" tabindex="0" />
                        <div class="default text">eg .@Local["Nguồn dịch vụ"]</div>
                        <div id="CP_cbbSourceService" class="menu" tabindex="-1"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="right w-lg-50 mt-lg-0 mt-2">
            <div class="wrap">
                <div class="wrapblock">
                    <div class="ms-auto my-auto d-flex align-items-center">
                        <div class="text-primary fw-bold d-inline me-2 text-nowrap my-auto">
                            <span id="Reve_currentdata">0</span>
                            <span class="mx-2">/</span>
                            <span id="Reve_totaldata">0</span>
                        </div>
                        <div class="icon-hover mx-1 my-auto"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Thu gọn"]">
                            <i class="vtt-icon vttech-icon-all text-lg text-primary"
                               data-bs-toggle="collapse" href="#CP_GridArea" aria-expanded="true"></i>
                        </div>
                        <div class="icon-hover mx-1 my-auto"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Tải lại"]">
                            <i class="vtt-icon  vttech-icon-refesh text-lg text-primary "
                               onclick="event.preventDefault(); return CP_Load()"></i>
                        </div>
                        <div class="icon-hover mx-1 my-auto"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["In báo cáo"]">
                            <i class="vtt-icon vttech-icon-print text-lg text-primary"
                               onclick="CP_PrintReport()"></i>
                        </div>
                        <div class="flex-nowrap input-group rounded-0 vttech-input-group my-auto _tab_control_" data-tab="export_excel">
                            <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                                 data-bs-toggle="tooltip" data-bs-placement="top"
                                 data-bs-original-title="@Local["Xuất excel"]">
                                <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                            </div>
                            <div class="input-group-text icon-hover w-auto vttech-input-item">
                                <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return CP_Export(0)">@Local["Tất cả"]</i>
                            </div>
                            <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                                <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return CP_Export(1)">@Local["Tùy chọn"]</i>
                            </div>
                        </div>
                        <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colLists">
                            @Local["Xem thêm"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="toggle">
            <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                <ul class="card card-body text-dark text-capitalize opacity-10">
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="phone" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Số điện thoại"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="custcodeold" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Mã khách hàng cũ"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="custnew" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Khách mới"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="source" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Nguồn"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="age" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Độ tuổi"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="birth" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Ngày sinh"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="gender" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Giới tính"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="branch" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Chi nhánh"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="district" type="checkbox">
                        </div>
                        <p class="text-sm">@Local["Quận/Huyện"]</p>
                    </li>
                    <li class="d-flex">
                        <div class="form-check form-switch">
                            <input class="shtoogle form-check-input" data-name="city" type="checkbox">
                        </div>
                        <p class="text-sm mb-0">@Local["Tỉnh/Thành phố"]</p>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="card-body p-0 mt-2">
        <div class="collapsesticky collapse show" id="CP_GridArea">
            <div class="row mb-3" id="CP_TotalDiv">
                <div class="col-12 col-lg-4 col-md-12">
                    <div class="MS_CheckHR bg-gray-100 border-5 border-primary border-radius-bottom-start-0 border-radius-lg border-radius-top-start-0 border-start card-body mt-2 p-2 py-3">
                        <div class="ms-2">
                            <span class="text-sm fw-bold text-secondary">@Local["Tổng tiền phát sinh"]</span>
                        </div>
                        <div class="ms-2 d-flex text-dark">
                            <span id="lbTotalAmount" class="text-lg fw-bold text-primary">0</span>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-lg-4 col-md-12">
                    <div class="MS_CheckHR bg-gray-100 border-5 border-primary border-radius-bottom-start-0 border-radius-lg border-radius-top-start-0 border-start card-body mt-2 p-2 py-3">
                        <div class="ms-2">
                            <span class="text-sm fw-bold text-secondary">@Local["Tổng tiền thanh toán"]</span>
                        </div>
                        <div class="ms-2 d-flex text-dark">
                            <span id="lbTotalAmountPaid" class="text-lg fw-bold text-primary">0</span>
                        </div>
                    </div>
                </div><div class="col-12 col-lg-4 col-md-12">
                    <div class="MS_CheckHR bg-gray-100 border-5 border-danger border-radius-bottom-start-0 border-radius-lg border-radius-top-start-0 border-start card-body mt-2 p-2 py-3">
                        <div class="ms-2">
                            <span class="text-sm fw-bold text-secondary">@Local["Tổng tiền công nợ"]</span>
                        </div>
                        <div class="ms-2 d-flex text-dark">
                            <span id="lbTotalAmountBalance" class="text-lg  text-danger fw-bold">0</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="m-0 my-0 mobile-responsive mt-2 vt-header-sticky">
                <table class="table vt-table mb-0" id="CP_Grid">
                    <thead>
                        <tr role="row">
                            <th rowspan="2">@Local["#"]</th>
                            <th rowspan="2" style="min-width:150px;">@Local["Mã khách hàng"]</th>
                            <th rowspan="2" style="min-width:200px;">@Local["Khách hàng"]</th>
                            <th rowspan="2" style="min-width:150px;" data-name="custcodeold">@Local["Mã khách hàng cũ"]</th>
                            <th rowspan="2" style="min-width:150px;">@Local["Mã hồ sơ"]</th>
                            <th rowspan="2" data-name="phone">@Local["Số điện thoại"]</th>
                            <th rowspan="2" style="min-width:120px;">@Local["Phát sinh"]</th>
                            <th rowspan="4" style="min-width:120px;">@Local["Thanh toán"]</th>
                            <th rowspan="2" style="min-width:120px;">@Local["Công nợ"]</th>
                            <th rowspan="2" data-name="custnew" style="min-width:120px;">@Local["Khách mới"]</th>
                            <th rowspan="2" data-name="source" style="min-width:150px;">@Local["Nguồn"]</th>
                            <th rowspan="2" data-name="age" style="min-width:100px;">@Local["Độ tuổi"]</th>
                            <th rowspan="2" data-name="birth" style="min-width:100px;">@Local["Ngày sinh"]</th>
                            <th rowspan="2" data-name="gender" style="min-width: 80px;">@Local["Giới tính"]</th>
                            <th rowspan="2" data-name="district" style="min-width: 120px;">@Local["Quận/Huyện"]</th>
                            <th rowspan="2" data-name="city" style="min-width: 150px;">@Local["Tỉnh/Thành phố"]</th>
                            <th rowspan="2" data-name="branch" style="min-width: 120px;">@Local["Chi nhánh"]</th>
                        </tr>
                    </thead>
                    <tbody id="CP_GridBody">
                    </tbody>
                    <tfoot>
                        <tr class="text-white bg-gradient bg-primary buttonViewClass cursor-pointer" data-id="0">
                            <td></td>
                            <td>@Local["Tổng"]</td>
                            <td></td>
                            <td class="toogleitem" data-name="custcodeold"></td>
                            <td></td>
                            <td class="toogleitem" data-name="phone"></td>
                            <td id="CP_TotalAmount"></td>
                            <td id="CP_TotalAmountPay"></td>
                            <td id="CP_TotalBalance"></td>
                            <td class="toogleitem" data-name="custnew"></td>
                            <td class="toogleitem" data-name="source"></td>
                            <td class="toogleitem" data-name="age"></td>
                            <td class="toogleitem" data-name="birth"></td>
                            <td class="toogleitem" data-name="gender"></td>
                            <td class="toogleitem" data-name="district"></td>
                            <td class="toogleitem" data-name="city"></td>
                            <td class="toogleitem" data-name="branch"></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <button class="btnsysmore btn btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return CP_RenderMore();">
                Load More
            </button>
        </div>

    </div>
</div>
<div id="CP_DetailContainer" style="display:none;">
    <div class="card card-plain">
        <div class="vtcardheader card-header pb-0 px-0">
            <div class="left">
                <p id="CP_DetailHeader" class="text-md text-dark font-weight-bold mb-1"></p>
            </div>
            <div class="right">
                <div class="text-primary fw-bold d-inline mx-2 text-nowrap mt-1">
                    <span id="CP_DetailCurrentData">0</span>
                    <span class="mx-2">/</span>
                    <span id="CP_DetailTotalData">0</span>
                </div>
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Thu gọn"]">
                    <i class="vtt-icon vttech-icon-all text-lg text-primary cursor-pointer"
                       data-bs-toggle="collapse" href="#CP_DetailGridArea" aria-expanded="true"></i>
                </div>
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["Tải lại"]">
                    <i class="vtt-icon  vttech-icon-refesh text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); return CP_DetailLoadData()"></i>
                </div>
                <div class="icon-hover mx-1"
                     data-bs-toggle="tooltip" data-bs-placement="top"
                     data-bs-original-title="@Local["In báo cáo"]">
                    <i class="vtt-icon vttech-icon-print text-lg text-primary cursor-pointer"
                       onclick="event.preventDefault(); CP_DetailPrintReport()"></i>
                </div>
                <div>
                    <div class="flex-nowrap input-group rounded-0 vttech-input-group mt-1 _tab_control_" data-tab="export_excel">
                        <div class="icon-hover mx-1 me-0 input-group-text vttech-input-item vttech-input-item-first"
                             data-bs-toggle="tooltip" data-bs-placement="top"
                             data-bs-original-title="@Local["Xuất excel"]">
                            <i class="vtt-icon  vttech-icon-export-ex text-lg text-primary cursor-pointer"></i>
                        </div>
                        <div class="input-group-text icon-hover w-auto vttech-input-item">
                            <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return CP_ExportDetail(0)">@Local["Tất cả"]</i>
                        </div>
                        <div class="icon-hover input-group-text w-auto vttech-input-item vttech-input-item-last">
                            <i class="text-xs text-primary fw-bold" onclick="event.preventDefault(); return CP_ExportDetail(1)">@Local["Tùy chọn"]</i>
                        </div>
                    </div>
                </div>
                <button class="btn btn-dark btn-sm mb-0 position-relative dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#colListsDetail">
                    @Local["Xem thêm"]
                </button>
            </div>
            <div class="toggle">
                <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colListsDetail" style="min-width:250px;">
                    <ul class="card card-body text-dark text-capitalize opacity-10">
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogledetail form-check-input" data-name="doccode" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Mã hồ sơ"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogledetail form-check-input" data-name="sersource" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Nguồn dịch vụ"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogledetail form-check-input" data-name="created" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Ngày tạo"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogledetail form-check-input" data-name="branch" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Chi nhánh"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogledetail form-check-input" data-name="insuname" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Tiền bảo hiểm"]</p>
                        </li>
                        <li class="d-flex">
                            <div class="form-check form-switch">
                                <input class="shtoogledetail form-check-input" data-name="insuamount" type="checkbox">
                            </div>
                            <p class="text-sm">@Local["Tiền bảo hiểm"]</p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="collapsesticky collapse show" id="CP_DetailGridArea">
        <div class="card-body p-0 mt-3">
            <div class="m-0 my-0 mobile-responsive vt-header-sticky">
                <table class="table vt-table mb-0" id="CP_DetailGrid">
                    <thead>
                        <tr role="row">
                            <th>@Local["#"]</th>
                            <th style="min-width:150px;">@Local["Mã khách hàng"]</th>
                            <th style="min-width:200px;">@Local["Khách hàng"]</th>
                            <th data-name="doccode" style="min-width:150px;">@Local["Mã hồ sơ"]</th>
                            <th style="min-width:150px;">@Local["Loại"]</th>
                            <th style="min-width:150px;">@Local["Dịch vụ"]</th>
                            <th style="min-width:150px;" data-name="sersource">@Local["Nguồn dịch vụ"]</th>
                            <th style="min-width:150px;" data-name="created">@Local["Ngày tạo"]</th>
                            <th style="min-width:120px;">@Local["Phát sinh"]</th>
                            <th style="min-width:120px;">@Local["Thanh toán"]</th>
                            <th style="min-width:120px;">@Local["Công nợ"]</th>
                            <th data-name="branch" style="min-width:150px;">@Local["Chi nhánh"]</th>
                            <th data-name="insuname" style="min-width:150px;">@Local["Bảo hiểm"]</th>
                            <th data-name="insuamount" style="min-width:150px;">@Local["Tiền bảo hiểm"]</th>
                        </tr>
                    </thead>
                    <tbody id="CP_DetailGridBody">
                    </tbody>
                </table>
            </div>
            <button class="btnsysmore btn btn-secondary w-100 p-1 mt-1 mb-0 position-relative" onclick="event.preventDefault(); return CP_DetailRenderMore();">
                Load More
            </button>
        </div>
    </div>
</div>

<script type="text/javascript">

    //#region // DECLARE & INIT LOAD LIST

    let xhrLoadList, xhrLoadDetail;
    var DataReportMain, DataReportMainSlice;
    let DataReportDetail, DataReportDetailSlice;
    let IndexReport = 0, IndexReportDetail = 0;
    let shtable, shtableDetail;
    let timeoutCount, timeoutCountDetail;
    let CP_DetailCustID = 0;
    let CP_DataRaw = [];
    let CP_Timer;
    let CP_SourceServiceID;
    let CP_DataTypeCus = [
        {"ID": 1, "Name": "@Local["Khách mới"]"}
        , {"ID": 2, "Name" : "@Local["Khách cũ"]"}
    ];

    $(document).ready(function () {
        CP_Init()
        Checking_TabControl_Permission();
    });

    function CP_Init() {
        shtable = $("#CP_Grid").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        shtableDetail = $("#CP_DetailGrid").TableExpandColumn({
            shtoogle: $('.shtoogledetail')
        });
        ToolPopper();
        Load_Combo(CP_DataTypeCus, "CP_CbbTypeCus", false, '@Local["Tất cả"]');
        $("#CP_TypeCus").dropdown("refresh");
        $("#CP_TypeCus").dropdown("set selected", "0");
        if (Object.keys(RP_DataServiceSource).length > 0) {
            $('#CP_SerSourceDiv').show();
            Load_Combo(Object.values(RP_DataServiceSource), "CP_cbbSourceService", false, '@Local["Nguồn dịch vụ"]');
            $("#CP_SourceService").dropdown("refresh");
            $("#CP_SourceService").dropdown("set selected", "0");

        }
        else {
            $('#CP_SerSourceDiv').hide();
        }
        CP_Load();
        CP_Event();
    }

    function CP_Load() {
        if (xhrLoadList && xhrLoadList.readyState != 4) xhrLoadList.abort();
        let _branchID = "@Model._branch";
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";
        IndexReport = 0;
        $("#CP_GridBody").empty();
        $("#Reve_totaldata").html(0);
        $("#Reve_currentdata").html(0);
        xhrLoadList = AjaxLoad(url = "/Report/Account/BalanceCusInPeriod/?handler=Loadata"
            , data = {
                'branchID': _branchID
                , 'dateFrom': _dateFrom
                , 'dateTo': _dateTo
                , 'sersourceID': CP_SourceServiceID
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    DataReportMain = JSON.parse(result);
                    CP_DataRaw = JSON.parse(result);

                    CP_CalculatorTotal(data);
                    DataReportMainSlice = sliceIntoChunks(JSON.parse(result), 500);
                    CP_BeforeRend();
                    Count_Up("Reve_totaldata", data.length);
                }
                else {
                    notiError_SW();
                }
            }
        );
        return false;
    }

    function CP_RenderMore() {
        IndexReport += 1;
        CP_BeforeRend();
    }

    //#endregion


    //#region // RENDER

    function CP_BeforeRend () {
        if (DataReportMainSlice && DataReportMainSlice[IndexReport]) {
            fnRenderBlock(DataReportMainSlice[IndexReport], "CP_GridBody"
                , blocknum = 100
                , fnrender = CP_Render
                , fnsuccess = null
            );
        }
    }

    async function CP_Render(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = `
                                <td class="vt-number-order"></td>
                                <td>
                                    <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustID}&ver=${versionofWebApplication}">
                                        ${item.CustCode}
                                    </a>
                                </td>
                                <td data-name="cardcode">
                                    <a href="#" class="border-1 border-primary border-bottom buttonViewClass mb-0 text-sm fw-bold" data-id="${item.CustID}" data-name="${item.CustName}">
                                        ${item.CustName}
                                    </a>
                                </td>
                                <td data-name="custcodeold">${item.CustOldCode}</td>
                                <td>${item.DocCode}</td>
                                <td data-name="phone"> <span class="_tab_control_" data-tab="phone_customer">${item.Phone}</span></td>
                                <td >${formatNumber(item.PriceDiscounted)}</td>
                                <td >${formatNumber(item.Paid)}</td>
                                <td >${formatNumber(item.Debt)}</td>
                                <td data-name="custnew" class="text-center">${(item.IsCustNew == 1) ? `<i class="fas fa-check text-success"></i>` : ``}</td>
                                <td data-name="source" class="source">${CP_Render_GetName(RP_DataCustomerSource, item.SourceID)}</td>
                                <td data-name="age" >${CP_Render_TypeAge(item.Birthday)}</td>
                                <td data-name="birth" >${ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(item.Birthday))}</td>
                                <td data-name="gender" >${CP_Render_Gender(item.Gender)}</td>
                                <td data-name="district" >${item.District}</td>
                                <td data-name="city" >${item.City}</td>
                                <td data-name="branch" >${CP_Render_GetName(RP_DataBranch, item.BranchID)}</td>
                                `;
                            tr = `<tr class="vt-number" role="row">${tr}</tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                        CP_GeneralEvent();
                        shtable.Refresh();
                        Checking_TabControl_Permission();
                        clearTimeout(timeoutCount);
                        timeoutCount = setTimeout(() => {
                            Count_Up("Reve_currentdata", $("#" + id).children().length);
                        }, 300)
                    }
                }
            }, 100);
        })
    }

    async function CP_CalculatorTotal(data) {
        new Promise((resolve) => {
            let totalAmount = 0;
            let totalAmountPaid = 0;
            let totalDebt = 0;
            if (data && data.length != 0) {
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    totalAmount += item.PriceDiscounted;
                    totalAmountPaid += item.Paid;
                }
            }
            totalDebt = totalAmount - totalAmountPaid;
            Count_Up("lbTotalAmount", totalAmount, 1);
            Count_Up("lbTotalAmountPaid", totalAmountPaid, 1);
            Count_Up("lbTotalAmountBalance", totalAmount - totalAmountPaid, 1);

            $("#CP_TotalAmount").html(formatNumber(totalAmount));
            $("#CP_TotalAmountPay").html(formatNumber(totalAmountPaid));
            $("#CP_TotalBalance").html(formatNumber(totalAmount - totalAmountPaid));
            resolve();
        })
    }


    function CP_Render_GetName(data, id) {
        try {
            let result = '';
            if (data && data[id] != undefined) {
                result = data[id].Name;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    function CP_Render_Gender(id) {
        try {
            let result = decodeHtml('@Local["Nam"]');
            if (id == 61) result = decodeHtml('@Local["Nữ"]');
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    function CP_Render_TypeAge(date) {
        try {
            let age = 0;
            let result = '';
            if (!date.includes('1900'))
                age = CP_Render_GetAge(date);
            if (age > 0) {
                if (age < 16) result = '< 16'
                else if (age > 16 && age < 31) result = '17 - 30'
                else if (age > 16 && age <= 30) result = '17 - 30'
                else if (age > 30 && age <= 40) result = '31 - 40'
                else if (age > 40 && age <= 50) result = '41 - 50'
                else if (age > 50) result = '> 51'
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    function CP_Render_GetAge(dateString) {
        try {
            var today = new Date();
            var birthDate = new Date(dateString);
            var age = today.getFullYear() - birthDate.getFullYear();
            var m = today.getMonth() - birthDate.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            return age;
        }
        catch (ex) {
            return 0;
        }
    }

    function CP_Event () {
        $("#CP_TypeCus").on("change", function () {
            CP_FilterData();
        })

        $("#CP_SourceService").unbind('change').change(function () {
            CP_SourceServiceID = $(this).dropdown("get value") ? Number($(this).dropdown("get value")) : 0;
            CP_Load();
        })

        $("#CP_SearchCus").on("keyup", function () {
            clearTimeout(CP_Timer);
            $("#CP_AreaBtnSearch .btn_clear").addClass('d-none');
            $("#CP_AreaBtnSearch .spinner-border").removeClass('d-none');
            CP_Timer = setTimeout(() => {
                CP_FilterData();
            }, 500);
        })

        $("#CP_AreaBtnSearch .btn_clear").on("click", function () {
            $("#CP_SearchCus").val("");
            CP_FilterData();
        })
    }

    //#endregion

    //#region //Handle

    function CP_FilterData () {
        if (CP_DataRaw && CP_DataRaw.length > 0) {
            let _Dt = CP_DataRaw;
            let TypeCus = $("#CP_TypeCus").dropdown("get value") ? Number($("#CP_TypeCus").dropdown("get value")) : 0;
            let SearchText = $("#CP_SearchCus").val() ? xoa_dau($("#CP_SearchCus").val()).toLowerCase().trim() : '';

            if (TypeCus != 0) {
                _Dt = _Dt.filter((item) => {return ((TypeCus == 1 && item["IsCustNew"] == 1) || (TypeCus == 2 && item["IsCustNew"] == 0))});
            }
            if (SearchText != '' && SearchText.length > 3) {
                _Dt = _Dt.filter((item) => {
                    return ((xoa_dau(item["CustCode"])).toLowerCase().trim().includes(SearchText)
                        || (xoa_dau(item["CustName"])).toLowerCase().trim().includes(SearchText)
                        || (xoa_dau(item["Phone"])).toLowerCase().trim().includes(SearchText)
                    )
                })
            }
            $("#CP_AreaBtnSearch .btn_clear").removeClass('d-none');
            $("#CP_AreaBtnSearch .spinner-border").addClass('d-none');
            if (SearchText == '' || SearchText.length > 3) {
                IndexReport = 0;
                $("#CP_GridBody").empty();
                CP_CalculatorTotal(_Dt);
                Count_Up("Reve_totaldata", _Dt.length);
                DataReportMainSlice = sliceIntoChunks(JSON.parse(JSON.stringify(_Dt)), 500);
                CP_BeforeRend();

            }
        }
    }

    //#endregion

    //#region //LOAD DETAIL
    function CP_DetailLoadData() {
        if (xhrLoadDetail && xhrLoadDetail.readyState != 4) xhrLoadDetail.abort();
        let _branchID = "@Model._branch";
        let _dateFrom = "@Model._dateFrom";
        let _dateTo = "@Model._dateTo";
        IndexReportDetail = 0;
        $("#CP_DetailGridBody").empty();
        xhrLoadList = AjaxLoad(url = "/Report/Account/BalanceCusInPeriod/?handler=LoadDataDetail"
            , data = {
                'branchID': _branchID
                , 'dateFrom': _dateFrom
                , 'dateTo': _dateTo
                , 'custID': CP_DetailCustID
                , 'sersourceID': CP_SourceServiceID
            }
            , async = true
            , error = function () { notiError_SW(); }
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    DataReportDetail = JSON.parse(result);
                    DataReportDetailSlice = sliceIntoChunks(JSON.parse(result), 500);
                    if (DataReportDetailSlice && DataReportDetailSlice.length != 0) {
                        fnRenderBlock(DataReportDetailSlice[IndexReportDetail], "CP_DetailGridBody"
                            , blocknum = 100
                            , fnrender = CP_DetailRender
                            , fnsuccess = null
                        );
                    }

                    Count_Up("CP_DetailTotalData", data.length);
                }
                else {
                    notiError_SW();
                }
            }
        );
        return false;
    }

    function CP_DetailRenderMore() {
        IndexReportDetail += 1;
        if (DataReportDetailSlice && DataReportDetailSlice[IndexReportDetail]) {
            fnRenderBlock(DataReportDetailSlice[IndexReportDetail], "CP_DetailGridBody"
                , blocknum = 100
                , fnrender = CP_DetailRender
                , fnsuccess = null
            );
        }
    }
    //#endregion

    //#region //RENDER DETAIL
    async function CP_DetailRender(data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                var myNode = document.getElementById(id);
                if (myNode != null) {
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = `
                                <td class="vt-number-order"></td>
                                <td>
                                    <a target="_blank" href="/Customer/MainCustomer?CustomerID=${item.CustID}&ver=${versionofWebApplication}">
                                        ${item.CustCode}
                                    </a>
                                </td>
                                <td >${item.CustName}</td>
                                <td data-name="doccode">${item.DocCode}</td>
                                <td>${CP_Render_GetType(item.Type)}</td>
                                <td>${CP_Render_GetTypeName(item.Type, item.ServiceID, item.MedID, item.CardID)}</td>
                                <td data-name="sersource" >${CP_Render_GetName(RP_DataServiceSource, item.SerSourceID)}</td>
                                <td data-name="created">${ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(item.Created))}</td>
                                <td >${item.Type == 4 ? '-' : formatNumber(item.Target)}</td>
                                <td >${formatNumber(item.Revenue)}</td>
                                <td >${item.Type == 4 ? '-' + formatNumber(item.Revenue) : formatNumber(item.Debt)}</td>
                                <td data-name="branch" >${CP_Render_GetName(RP_DataBranch, item.BranchID)}</td>
                                <td data-name="insuname">${item.InsuranceName}</td>
                                <td data-name="insuamount">${formatNumber(item.InsurAmount)}</td>
                                `
                            tr = `<tr class="vt-number" role="row">${tr}</tr>`;
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                        shtableDetail.Refresh();
                        Checking_TabControl_Permission();
                        clearTimeout(timeoutCountDetail);
                        timeoutCountDetail = setTimeout(() => {
                            Count_Up("CP_DetailCurrentData", $("#" + id).children().length);
                        }, 300)
                    }
                }
            }, 100);
        })
    }
    //#endregion

    //#region //EVENT
    function CP_Render_GetTypeName(type, serid, medid, cardid) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = (RP_DataService[serid] != undefined) ? RP_DataService[serid].Name : ''
                    break;
                case 2:
                    result = (RP_DataCard[cardid] != undefined) ? RP_DataCard[cardid].Name : ''
                    break;
                case 3:
                    result = (RP_DataMedicine[medid] != undefined) ? RP_DataMedicine[medid].Name : ''
                    break;
                case 4:
                    result = decodeHtml('@Local["Tiền cọc còn lại"]')
                    break;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    function CP_Render_GetType(type) {
        try {
            let result = '';
            switch (type) {
                case 1:
                    result = decodeHtml('@Local["Dịch vụ/sản phẩm"]')
                    break;
                case 2:
                    result = decodeHtml('@Local["Thẻ trả trước"]')
                    break;
                case 3:
                    result = decodeHtml('@Local["Đơn thuốc"]')
                    break;
                case 4:
                    result = decodeHtml('@Local["Tiền cọc"]')
                    break;
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    function CP_GeneralEvent() {
        $("#CP_Grid .buttonViewClass").unbind('click').on("click", function () {
            CP_DetailCustID = $(this).attr('data-id');
            let name = $(this).attr('data-name');
            $("#CP_DetailContainer").fadeIn('slow');
            $('html, body').animate({
                scrollTop: $("#CP_DetailContainer").offset().top
            }, 300);
            if (CP_DetailCustID == "0") {
                $("#CP_DetailHeader").html('@Local["Tất cả khách hàng"]');
            }
            else {
                $("#CP_DetailHeader").html(name);
            }
            CP_DetailLoadData();
        })
    }
    //#endregion

    //#region // EXPORT - PRINT

    function CP_Export(isOption = 0) {
        try {
            if (DataReportMain && DataReportMain.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#CP_MasterContainer');
                var dataHeader = {
                    "STT": ["STT", (value, { }, idx) => { return idx + 1 }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "DocCode": ["@Local["Mã hồ sơ"]"],
                    "CustOldCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='custcodeold']`)).is(":checked"),
                        data: ["@Local["Mã khách hàng cũ"]"]
                    },
                    "Phone": {
                        dataNamePer: 'phone',
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='phone']`)).is(":checked"),
                        data: ["@Local["Số điện thoại"]"]
                    },
                    "PriceDiscounted": ["@Local["Phát sinh"]"],
                    "Paid": ["@Local["Thanh toán"]"],
                    "Debt": ["@Local["Công nợ"]"],
                    "SourceID": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='source']`)).is(":checked"),
                        data: ["@Local["Nguồn"]", (value) => { return CP_Render_GetName(RP_DataCustomerSource, value) }]
                    },
                    "Age": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='age']`)).is(":checked"),
                        data: ["@Local["Độ tuổi"]", (value, { Birthday }) => { return CP_Render_TypeAge(Birthday) }]
                    },
                    "Birthday": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='birth']`)).is(":checked"),
                        data: ["@Local["Ngày sinh"]", (value) => { return ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(value)) }]
                    },
                    "IsCustNew": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='custnew']`)).is(":checked"),
                        data: ["@Local["Khách mới"]", (value) => { return (value == "1" ? 'x' : '') }]
                    },
                    "Gender": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='gender']`)).is(":checked"),
                        data: ["@Local["Giới tính"]", (value) => { return CP_Render_Gender(value) }]
                    },
                    "District": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='district']`)).is(":checked"),
                        data: ["@Local["Quận/Huyện"]"]
                    },
                    "City": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='city']`)).is(":checked"),
                        data: ["@Local["Tỉnh/Thành phố"]"]
                    },
                    "BranchID": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='branch']`)).is(":checked"),
                        data: ["@Local["Chi nhánh"]", (value) => { return CP_Render_GetName(RP_DataBranch, value) }]
                    },
                    "IsCheck": {
                        isShow: isAll || (eleContainer.find(`.shtoogle[data-name='timetocheck']`)).is(":checked"),
                        data: ["@Local["Thời gian kiểm tra"]", (v, { Checked }) => { return (v == 1) ? ConvertDateTimeUTC_DMYHM(Checked) : ('') }]
                    }
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'CP_DetailGrid', PermissionTable_TabControl);
                syslog_ExpExcel('e', Outlang['Cong_no_khach_hang']);
                exportJsonToExcel(Outlang['Cong_no_khach_hang'], DataReportMain, dataHeader);
            }
            else {
                notiWarning('@Local["Không xuất được file"]');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]');
        }
    }
    function CP_PrintReport() {
        try {
            if (DataReportMain && DataReportMain.length != 0) {
                let _branchID = "@Model._branch";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["STT", { callbackRenderValue: (value, { }, idx) => { return idx + 1 } }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "DocCode": ["@Local["Mã hồ sơ"]"],
                    "CustOldCode": ["@Local["Mã khách hàng cũ"]", {
                        isShow: $(`.shtoogle[data-name='custcodeold']`).is(":checked"),
                    }],
                    "Phone": {
                        dataNamePer: 'phone',
                        data: ["@Local["Số điện thoại"]", { isShow: $(`.shtoogle[data-name='phone']`).is(":checked") }]
                    },
                    "PriceDiscounted": ["@Local["Phát sinh"]"],
                    "Paid": ["@Local["Thanh toán"]"],
                    "IsCustNew": ["@Local["Khách mới"]", {
                        isShow: $(`.shtoogle[data-name='custnew']`).is(":checked"),
                        callbackRenderValue: (value) => { return (value == "1" ? 'x' : '') }
                    }],
                    "Debt": ["@Local["Công nợ"]"],
                    "SourceID": ["@Local["Nguồn"]", {
                        isShow: $(`.shtoogle[data-name='source']`).is(":checked"),
                        callbackRenderValue: (value) => { return CP_Render_GetName(RP_DataCustomerSource, value) }
                    }],
                    "Age": ["@Local["Độ tuổi"]", {
                        isShow: $(`.shtoogle[data-name='age']`).is(":checked"),
                        callbackRenderValue: (value, { Birthday }) => { return CP_Render_TypeAge(Birthday) }
                    }],
                    "Birthday": ["@Local["Độ tuổi"]", {
                        isShow: $(`.shtoogle[data-name='birth']`).is(":checked"),
                        callbackRenderValue: (value) => { return ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(value)) }
                    }],
                    "Gender":
                        ["@Local["Giới tính"]", {
                            isShow: $(`.shtoogle[data-name='gender']`).is(":checked"),
                            callbackRenderValue: (value) => { return CP_Render_Gender(value) }
                        }],
                    "District": ["@Local["Quận/Huyện"]", {
                        isShow: $(`.shtoogle[data-name='district']`).is(":checked"),
                    }],
                    "City": ["@Local["Tỉnh/Thành phố"]", {
                        isShow: $(`.shtoogle[data-name='city']`).is(":checked")
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        isShow: $(`.shtoogle[data-name='branch']`).is(":checked"),
                        callbackRenderValue: (value) => { return CP_Render_GetName(RP_DataBranch, value) }
                    }]
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'CP_GridBody', PermissionTable_TabControl);
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = Outlang['Cong_no_khach_hang'], DataReportMain, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]');
        }
    }
    async function CP_ExportDetail(isOption = 0) {
        try {
            if (DataReportDetail && DataReportDetail.length != 0) {
                let isAll = (isOption == 0);
                let eleContainer = $('#CP_DetailContainer');
                var dataHeader = {
                    "STT": ["STT", (value, { }, idx) => { return idx + 1 }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "DocCode": {
                        isShow: isAll || (eleContainer.find(`.shtoogledetail[data-name='doccode']`)).is(":checked"),
                        data: ["@Local["Mã hồ sơ"]"]
                    },
                    "Type": ["@Local["Loại"]", (value, { Type }) => {
                        return CP_Render_GetType(Type);
                    }],
                    "ServiceID": ["@Local["Dịch vụ"]", (value, { Type, ServiceID, MedID, CardID }) => {
                        return CP_Render_GetTypeName(Type, ServiceID, MedID, CardID);
                    }],
                    "SerSourceID": {
                        isShow: isAll || (eleContainer.find(`.shtoogledetail[data-name='sersource']`)).is(":checked"),
                        data: ["@Local["Nguồn dịch vụ"]", (value) => { return CP_Render_GetName(RP_DataSerSource, value) }]
                    },
                    "Created": {
                        isShow: isAll || (eleContainer.find(`.shtoogledetail[data-name='created']`)).is(":checked"),
                        data: ["@Local["Ngày tạo"]", (value) => {
                            return ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(value))
                        }]
                    },
                    "Target": ["@Local["Phát sinh"]", (value, { Type }) => { return Type == 4 ? '-' : value }],
                    "Revenue": ["@Local["Thanh toán"]"],
                    "Debt": ["@Local["Công nợ"]", (value, { Type, Revenue }) => { return Type == 4 ? Revenue * -1 : value }],
                    "BranchID": {
                        isShow: isAll || (eleContainer.find(`.shtoogledetail[data-name='branch']`)).is(":checked"),
                        data: ["@Local["Chi nhánh"]", (value) => { return CP_Render_GetName(RP_DataBranch, value) }]
                    },
                    "InsuranceName": {
                        isShow: isAll || (eleContainer.find(`.shtoogledetail[data-name='insuname']`)).is(":checked"),
                        data: ["@Local["Bảo hiểm"]"]
                    },
                    "InsurAmount": {
                        isShow: isAll || (eleContainer.find(`.shtoogledetail[data-name='insuamount']`)).is(":checked"),
                        data: ["@Local["Tiền bảo hiểm"]"]
                    }
                }
                dataHeader = Checking_TabControl_System_RebuildHeader(dataHeader, tableBodyId = 'CP_DetailGrid', PermissionTable_TabControl);
                syslog_ExpExcel('e', Outlang['Chi_tiet_cong_no_khach_hang']);
                exportJsonToExcel(Outlang['Chi_tiet_cong_no_khach_hang'], DataReportDetail, dataHeader);
            }
            else {
                notiWarning('@Local["Không xuất được file"]');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không xuất được file"]');
        }
    }

    function CP_DetailPrintReport() {
        try {
            if (DataReportDetail && DataReportDetail.length != 0) {
                let _branchID = "@Model._branch";
                let _dateFrom = "@Model._dateFrom";
                let _dateTo = "@Model._dateTo";
                var dataHeader = {
                    "STT": ["STT", {
                        callbackRenderValue: (value, { }, idx) => { return idx + 1 }
                    }],
                    "CustCode": ["@Local["Mã khách hàng"]"],
                    "CustName": ["@Local["Khách hàng"]"],
                    "DocCode": ["@Local["Mã hồ sơ"]", {
                        isShow: $(`.shtoogledetail[data-name='doccode']`).is(":checked")
                    }],
                    "Type": ["@Local["Loại"]", {
                        callbackRenderValue: (value, { Type }) => {
                            return CP_Render_GetType(Type);
                        }
                    }],
                    "ServiceID": ["@Local["Dịch vụ"]", {
                        callbackRenderValue: (value, { Type, ServiceID, MedID, CardID }) => {
                            return CP_Render_GetTypeName(Type, ServiceID, MedID, CardID);
                        }
                    }],
                    "SerSourceID": ["@Local["Nguồn dịch vụ"]", {
                        isShow: $(`.shtoogledetail[data-name='sersource']`).is(":checked"),
                        callbackRenderValue: (value) => { return CP_Render_GetName(RP_DataServiceSource, value) }
                    }],
                    "Created": ["@Local["Ngày tạo"]", {
                        isShow: $(`.shtoogledetail[data-name='created']`).is(":checked"),
                        callbackRenderValue: (value) => {
                            return ConvertDateTimeUTC_DMY(ConvertToDateRemove1900(value))
                        }
                    }],
                    "Target": ["@Local["Phát sinh"]", {
                        callbackRenderValue: (value, { Type }) => { return Type == 4 ? '-' : value }
                        ,isTotalFooter:true
                    }],
                    "Revenue": ["@Local["Thanh toán"]", {
                        isTotalFooter: true
                    }],
                    "Debt": ["@Local["Công nợ"]", {
                        callbackRenderValue: (value, { Type, Revenue }) => { return Type == 4 ? '-' + Revenue * -1 : value }
                        , isTotalFooter: true
                    }],
                    "BranchID": ["@Local["Chi nhánh"]", {
                        isShow: $(`.shtoogledetail[data-name='branch']`).is(":checked"),
                        callbackRenderValue: (value) => { return CP_Render_GetName(RP_DataBranch, value) }
                    }],
                    "InsuranceName": ["@Local["Bảo hiểm"]", {
                        isShow: $(`.shtoogledetail[data-name='insuname']`).is(":checked")
                    }],
                    "InsurAmount": ["@Local["Tiền bảo hiểm"]", {
                        isShow: $(`.shtoogledetail[data-name='insuamount']`).is(":checked")
                    }]
                }
                $("#MainSendMail_Content").empty();
                $("#MainSendMail_Content").load('/Print/Reports/reportform?&dateFrom=' + _dateFrom + '&dateTo=' + _dateTo + '&branch=' + _branchID + '&ver=' + versionofWebApplication
                    , function (responseTxt, statusTxt, xhr) {
                        if (statusTxt == "success") {
                            $("#MainSendMail").addClass('active');
                            let options = {
                                empName: sys_employeeName_Main
                            }
                            if (typeof PRF_CBPrintReport === 'function')
                                PRF_CBPrintReport(namePrint = Outlang['Chi_tiet_cong_no_khach_hang'], DataReportDetail, dataHeader, options);
                        }
                        if (statusTxt == "error") {
                            console.warn("error");
                        }
                    })
            }
            else {
                notiWarning('@Local["Không có dữ liệu"]');
            }
        }
        catch (ex) {
            notiWarning('@Local["Không in được file"]');
        }
    }
//#endregion

</script>
