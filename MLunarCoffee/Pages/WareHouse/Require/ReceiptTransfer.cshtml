@page
@model MLunarCoffee.Pages.WareHouse.Require.ReceiptTransfer
@{
    Layout = null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>
<div class="row m-0 viewcontent border-dashed border-1 border-secondary border-radius-md p-0">
    <div class="col-12">
        <div id="retranwait" class="waitingdiv text-center" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div id="retranmaster" class="mb-3">
            <div class="card-header p-3 pb-0">
                <div class="text-md  font-weight-bold text-center position-relative">
                    <span class="text-md text-primary text-uppercase">@Local["Phiếu nhận hàng"]</span>
                    <div id="retranh_input" style="display:none;">
                        <span class="pt-2 text-xs text-muted">@Local["Đã phát sinh chứng từ nhập kho"]</span>
                        <span id="retranh_inputnum" class="text-xs ps-2 text-primary "></span>
                    </div>
                    <i class="position-absolute text-gradient text-primary fas fa-redo end-1 top-0" onclick="RetranReload()"></i>
                </div>
                <div class="row px-1">
                    <div class="field col-12 col-md-12 col-xl-8 px-1 mt-2">
                        <div class="text-md text-dark mt-3">
                            <span class="text-sm text-secondary">@Local["Kho xuất"]</span>
                            <span id="retranh_fromname" class="text-sm text-dark font-weight-bold ms-2"></span>
                            <span class="text-sm text-secondary">@Local["Chứng từ kho xuất"]</span>
                            <span id="retranh_fromnum" class="text-sm text-dark font-weight-bold ms-2"></span>
                        </div>
                        <div class="text-md text-dark">
                            <span class="text-sm text-secondary">@Local["Người tạo"]</span>
                            <span id="retranh_createname" class="text-sm text-dark font-weight-bold ms-2"></span>
                            <span id="retranh_createdate" class="text-sm text-dark ms-2"></span>
                        </div>
                    </div>
                    <div class="field col-12 col-md-12 col-xl-4 px-1 mt-2">
                        <label>@Local["Ngày nhận hàng"]</label>
                        <input id="retran_dateimport" class="flatpickr form-control" type="text" placeholder="eg .@Local["Ngày nhận hàng"]" />
                    </div>
                </div>
            </div>
            <div class="card-body p-3 pt-2 my-3">
                <table class="table vt-table mb-0">
                    <thead>
                        <tr>
                            <th style="width: 40px;">@Local["#"]</th>
                            <th id="retranpackage">@Local["Số lô"]</th>
                            <th>@Local["Tên"]</th>
                            <th>@Local["Đvị"]</th>
                            <th>@Local["Đơn giá"]</th>
                            <th>@Local["SL"]</th>
                            <th>@Local["Thành tiền"]</th>
                        </tr>
                    </thead>
                    <tbody id="retranContent">
                    </tbody>
                </table>

                <div class="d-flex  mt-3">
                    <div class="d-flex ms-auto my-auto mt-1">
                        <div id="retranh_foexport" class="text-center text-md text-dark" style="min-width: 250px; display: none;">
                            <span class="text-sm text-dark font-weight-bold my-2 d-block">@Local["Duyệt chuyển kho"]</span>
                            <div style="height: 100px;">
                                <img id="retranh_foexportimg" style="height: 100px;" src="/default.png" />
                            </div>
                            <span id="retranh_foexportname" class="text-sm text-dark font-weight-bold"></span>
                            <div id="retranh_foexportdate" class="text-center text-sm text-dark"> </div>
                        </div>
                        <div id="retranh_foimport" class="text-center text-md text-dark" style="min-width: 250px;display:none;">
                            <span class="text-sm text-dark font-weight-bold my-2 d-block">@Local["Duyệt nhập kho"]</span>
                            <div style="height: 100px;">
                                <img id="retranh_foimportimg" class="cursor-pointer border-dashed border-1 border-secondary border-radius-md" style="height: 100px;" src="/default.png" />
                            </div>
                            <span id="retranh_foimportname" class="text-sm text-dark font-weight-bold"></span>
                            <div id="retranh_foimportdate" class="text-center text-sm text-dark"> </div>
                        </div>
                    </div>
                </div>

                <div class="action_Save mt-3">
                    <div class="action_Save-Content">
                        <button id="btnretran_delete" style="display:none" form="form3" type="button" class="btn bg-gradient-danger mt-2 me-2" onclick="return Retran_Delete()">@Local["Xóa"]</button>
                        <button id="btnretran_unimport" style="display:none" form="form3" type="button" class="btn bg-gradient-success mt-2 me-2" onclick="return ReTran_UnImport()">@Local["Hủy nhập kho"]</button>
                        <button class="btn btn-success btn-viewform-item" form="form3" onclick="event.preventDefault();return ReTran_Print()">@Local["In"]</button>
                        <button id="btnretran_cancel" class="btn btn-secondary" form="form3" onclick="event.preventDefault();ReTran_Cancel()">@Local["Đóng"]</button>
                        <button id="btnretran_import" style="display:none" form="form3" type="button" class="btn bg-gradient-primary mt-2 me-2" onclick="return ReTran_Import()">@Local["Nhập kho"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    var data_retran = {};
    let IsPackageNumber = 0;
    let retran_DetailID = "@Model._Detail";
    let datasignimport = '';
    let retrainedit = 0;
    let retrainWareID = 0;

    //#region // LOAD

    $(document).ready(function () {
        Retran_GetData(retran_DetailID);
    });

    function RetranReload () {
        Retran_GetData(retran_DetailID);
    }

    function Retran_GetData (id) {
        data_retran = {};
        IsPackageNumber = 0;
        $("#retranContent").html('');
        $("#retranh_foimport").hide();
        $("#retranh_foexport").hide();
        retrainedit = 0;
        datasignimport = '';
        AjaxLoad(url = "/WareHouse/Require/ReceiptTransfer/?handler=Initialize"
            , data = {'DetailID': id}, async = true, error = null
            , success = function (result) {
                if (result != "") {
                    let data = JSON.parse(result).Table;
                    let datadetail = JSON.parse(result).Table1;
                    if (data != undefined && data.length == 1) {
                        let item = data[0];

                        IsPackageNumber = item.IsPackageNumber;
                        retrainWareID = Number(item.WareID);
                        let lastestLock = new Date(item.LastetLock);
                        if (item.State == 1) {
                            $("#retranh_input").show();
                            $("#retranh_inputnum").html(item.Code);
                            if (item.Isedit == 1) {
                                retrainedit = 1;
                                $("#btnretran_unimport").show();
                                $("#btnretran_import, #btnretran_delete").hide();
                            }
                            else {
                                $("#btnretran_unimport").hide();
                                $("#btnretran_import, #btnretran_delete").hide();
                            }

                            $("#retranh_foimport").show();
                            if (item.ImportSignName != "") {
                                $("#retranh_foimportdate").html(ConvertDateTimeUTC_Time_DOWFULLDAY(item.ImportSignDate));
                                $("#retranh_foimportname").html(item.ImportSignName);
                                $("#retranh_foimportimg").attr("src", item.ImportSignData);
                                datasignimport = item.ImportSignData;
                            }
                            else {
                                $("#retranh_foimportimg").attr("src", "data:image/png;base64," + preload_circleAvatar);
                            }

                            $("#retran_dateimport").flatpickr({
                                dateFormat: 'd-m-Y H:i:s',
                                enableTime: true,
                                time_24hr: true,
                                maxDate: new Date(),
                                minDate: lastestLock,
                                defaultDate: new Date(item.ImportDate),
                            });

                        }
                        else {
                            $("#retranh_input").hide();
                            $("#btnretran_unimport").hide();
                            $("#btnretran_import, #btnretran_delete").show();
                            $("#retran_dateimport").flatpickr({
                                dateFormat: 'd-m-Y H:i:s',
                                enableTime: true,
                                time_24hr: true,
                                maxDate: new Date(),
                                minDate: lastestLock,
                                defaultDate: new Date()
                            });
                        }
                        if (item.ExportSignName != "") {
                            $("#retranh_foexport").show();
                            $("#retranh_foexportdate").html(ConvertDateTimeUTC_Time_DOWFULLDAY(item.ExportSignDate));
                            $("#retranh_foexportname").html(item.ExportSignName);
                            $("#retranh_foexportimg").attr("src", item.ExportSignData);
                        }
                        if (IsPackageNumber == 1) {
                            $("#retranpackage").show();
                        }
                        else {
                            $("#retranpackage").hide();
                        }
                        $("#retranh_fromname").html(item.WareSend);
                        $("#retranh_fromnum").html(item.CodeExport);
                        $("#retranh_createname").html(item.CreatedName);
                        $("#retranh_createdate").html(ConvertDateTimeUTC_Time_DOWFULLDAY(item.CreatedDate)  );
                    }

                    if (datadetail != undefined && datadetail.length!=0)
                        for (let i = 0; i < datadetail.length; i++) {
                            let element = {};
                            element.current = datadetail[i].ID;
                            element.productID = datadetail[i].ProductID;
                            element.productName = datadetail[i].ProductName;
                            element.unitName = datadetail[i].UnitName;
                            element.number = datadetail[i].Number;
                            element.package = datadetail[i].PackageNumber;
                            element.price = datadetail[i].Price;
                            element.amount = datadetail[i].Amount;
                            data_retran[datadetail[i].ID] = element;
                            ReTran_RenderRow(datadetail[i].ID, element, 'retranContent');

                        }
                    Retran_Sign();
                }
            }
            , sender = null
            , before = function (e) {
                $("#retranmaster").hide();
                $("#retranwait").show();
            }
            , complete = function (e) {
                $("#retranwait").hide();
                $("#retranmaster").show();
            }
        );
    }

    //#endregion

    //#region // RENDER

    function ReTran_RenderRow (key, value, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            let ex = formatNumber(Math.round(Number(value.number) * 100) / 100);
            let tr = '<td class="vt-number-order"></td>'
                + ((IsPackageNumber == 1) ? ('<td>' + AddCell_Package(key, value.package) + '</td>') : '')
                + '<td>' + value.productName + '</td>'
                + '<td>' + value.unitName + '</td>'
                + '<td>' + formatNumber(value.price) + '</td>'
                + '<td>' + ex + '</td>'
                + '<td>' + formatNumber(value.amount) + '</td>'
            tr = '<tr id="ReProduct_' + value.productID +'" role="row" class="vt-number" >' + tr + '</tr>';
            myNode.innerHTML += tr;
        }
        ReTran_EventRow();
    }

    function AddCell_Package(randomNumber, value) {
        let resulf = '<input class=" packageNumber form-control" placeholder="eg . @Local["Số lô"]" '
            + ((IsPackageNumber == 0) ? "disabled" : "")
            + ' id="packageNumber_' + randomNumber + '" value="' + value + '" type="text" />';
        resulf = resulf;
        return resulf;
    }

    function ReTran_EventRow() {

        $(".packageNumber").unbind('change').change(function () {
            let id = this.id.replace("packageNumber_", "")
            data_retran[id].package = this.value + "-" + data_retran[id].productID;
        });

    }

    //#endregion



    //#region // Main Event

    function ReTran_Import() {
        const promise = notiConfirm('@Local["Nhận hàng vào kho"]');
        promise.then(function () {
            let DateExecute = $('#retran_dateimport').val() ? $('#retran_dateimport').val() : "";
            AjaxLoad(url = "/WareHouse/Require/ReceiptTransfer/?handler=ExcuteData"
                , data = {
                    'data': JSON.stringify(Object.values(data_retran))
                    , 'DateExecute': DateExecute
                    , 'IsPackageNumber': IsPackageNumber
                    , 'CurrentID': retran_DetailID
                }
                , async = true
                , error = null
                , success = function (result) {
                    if (result != "0") {
                        notiSuccessMess("@Local["Chứng từ nhập kho"] " + result);
                        RequireList_Load(ismore = 0, curid = retran_DetailID,0);
                        Retran_GetData(retran_DetailID);
                        syslog_whr( 'i', result)
                    }
                    else {
                        notiWarning('@Local["Ngày nhập hàng không hợp lệ hoặc đơn hàng đã được nhập"]');
                    }
                }
            );
        }, function () {

        });
    }

    async function ReTran_UnImport() {
        let isNextUnImport = await ReTran_CheckQuanProduct();
        if (isNextUnImport == 0) return false;
        let retrancode = $("#retranh_inputnum").html();
        const promise = notiConfirm('@Local["Chứng từ nhập kho"] ' + retrancode + ' @Local["Sẽ bị xóa"]');
        promise.then(function () {
            AjaxLoad(url = "/WareHouse/Require/ReceiptTransfer/?handler=UnImport"
                , data = {
                    'DetailID': retran_DetailID
                }
                , async = true, error = null
                , success = function (result) {
                    if (result != "0") {
                        notiSuccess();
                        RequireList_Load(ismore = 0, curid = retran_DetailID, 0);
                        Retran_GetData(retran_DetailID);
                        syslog_whr('d', result)
                    }
                    else {
                        notiError('@Local["Không thể hủy chứng từ"] ' + $("#retranh_inputnum").html());
                    }
                }
            );
        }, function () { });

    }

    function ReTran_Cancel () {
        $('#re_view').empty()
    }

    function Retran_Sign () {
        $("#retranh_foimportimg").unbind("click").bind('click', function () {
            if (retrainedit == 1) {
                Retran_SignExe(retran_DetailID, datasignimport);
            }
        });
    }

    async function Retran_SignExe (id, signdata) {
        await Signature_Action(signdata, 1);
        if (Signature_ResultSignation != "") {
            AjaxLoad(url = "/WareHouse/Require/ReceiptTransfer/?handler=UpdateSign"
                , data = {
                    'id': id,
                    'sign': Signature_ResultSignation
                }
                , async = true
                , error = null
                , success = function (result) {
                    if (result != "0") {
                        RequireList_Load(ismore = 0, curid = id, 0);
                        Retran_GetData(retran_DetailID);
                        syslog_whr('s', result);
                    }
                    else {
                        notiError("@Local["Phiếu chưa được nhập kho"]");
                    }
                }
            );
        }
    }

    function Retran_Delete() {
        const promise = notiConfirm();
        promise.then(function () {
            Retran_DeleteExecute(retran_DetailID, retrainWareID);
        }, function () { });
    }

    function Retran_DeleteExecute(id, ware) {
        AjaxLoad(url = "/WareHouse/Require/ReceiptTransfer/?handler=DeleteItem"
            , data = {
                'id': id,
                'ware': ware,
            }
            , async = true
            , error = null
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    RequireList_Load(ismore = 0, curid = retran_DetailID, 0);
                    ReTran_Cancel();
                    syslog_whr('d', '');
                }
                else {
                    notiError("@Local["kho dã chốt không thể xóa phiếu nhập kho"]")
                }
            }
        );
    }

     //#endregion


    //#region // Check Product Quantity

    async function ReTran_CheckQuanProduct() {
        return new Promise((resolve) => {
            let dateExecute = $("#retran_dateimport").val() ? $("#retran_dateimport").val() : "";
            let dataProductCheck = [];
            if (data_retran && Object.keys(data_retran).length != 0) {
                for ([key, value] of Object.entries(data_retran)) {
                    let e = {};
                    e.package = value.package;
                    e.productID = value.productID;
                    e.number = 0;
                    dataProductCheck.push(e);
                }
            }
            AjaxLoad(url = "/WareHouse/Require/ReceiptTransfer/?handler=CheckQuantityRealTime"
                , data = {
                    'data': JSON.stringify(dataProductCheck),
                    'ware': Number(retrainWareID),
                    'DateExecute': dateExecute,
                    'CurrentID': Number(retran_DetailID)
                }
                , async = true
                , error = null
                , success = function (result) {
                    if (result != "0") {
                        let dataResult = JSON.parse(result);
                        let dataNext = dataResult.Table;
                        let dataProductExist = dataResult.Table1;
                        if (dataNext && dataNext.length != 0 && dataNext[0].RESULT != 1) {
                            notiWarning('@Local["Ngày xử lý phải lớn hơn ngày chốt kho gần nhất"].');
                        }
                        else {
                            if (ReTran_StockQuantityError(dataProductExist) == 1) {
                                resolve(1);
                            }
                            else {
                                notiWarning('@Local["Không thể hủy phiếu nhập kho. Số lượng nhập kho phải lớn hơn số lượng đã xuất"].');
                                resolve(0);
                            }
                        }
                    }
                    else {
                        notiError_SW();
                        resolve(0);
                    }
                }
            );
        })
    }

    function ReTran_StockQuantityError(data) {
        let isNext = 1;
        if (data && data.length != 0) {
            for (let i = 0; i < data.length; i++) {
                let item = data[i];
                let _id = "ReProduct_" + item.ProductID;
                let _finalNum = Number(item.FinalNum) ? Number(item.FinalNum) : 0;
                if (_finalNum < 0) {
                    isNext = 0;
                    $("#" + _id).addClass("bg-gradient-danger text-white")
                }
                else {
                    $("#" + _id).removeClass("bg-gradient-danger text-white")
                }
            }
        }
        return isNext;
    }
    function ReTran_Print() {
        let code = $("#retranh_inputnum").html();
        let stringCodeType = code + ';' + '3';
        syslog_whr('p', code);
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load('/Print/print?Type=import_exportform&DetailID=' + stringCodeType);
        $('#DetailModal').modal('show');
    }
    

    //#endregion

</script>
