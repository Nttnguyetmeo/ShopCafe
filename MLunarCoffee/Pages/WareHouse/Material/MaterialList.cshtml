@page
@model MLunarCoffee.Pages.WareHouse.Material.MaterialListModel
@{
    if (@Model.layout == "none") Layout = null;
}
@Html.AntiForgeryToken()
<div class="card card-plain container-fluid px-0">
    <div class="row m-0" id="MaterialtList">
        <div class="col-12 px-0">
            <div class="row">
                <div class="col-12 col-sm-12 col-md-4 col-xl-3 p-1 position-relative">
                    <div class="card card-plain px-2">
                        <div class="vtcardheader card-header pb-0 px-1 pt-3">
                            <div class="left">
                                <h6 class="mb-0">@Local["Loại nguyên vật liệu"]</h6>
                                <p class="text-sm mb-0">
                                    @Local["Danh sách"]
                                </p>
                            </div>
                            <div class="right">
                                <button id="MaterialList_btnAddType" class="btn bg-gradient-primary  btn-sm mb-0" data-value="fade up" onclick="event.preventDefault(); return AddNewMaterialType();">@Local["Thêm mới"]</button>
                            </div>
                        </div>
                        <div class="py-0 px-1">
                            <div class="m-0  mobile-responsive position-relative">
                                <div id="waitingdiv_type" class="waitingdiv text-center position-absolute top-50 z-index-2 start-50 translate-middle" style="display: none;">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </div>
                                <div class="nav-wrapper mt-3" style="--max-height:calc( 100vh - 180px ); --overflow-y: auto">
                                    <ul class="nav nav-pills nav-menus nav-menus-vertical flex-column  bg-white border-radius-lg"
                                        id="dtContentMaterialTypeBody">
                                    </ul>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-12 col-md-8 col-xl-9 p-1">
                    <div class="card card-plain px-2">
                        <div class="card-header px-1 py-2">
                            <div class="vtcardheader mt-2">
                                <div class="left">
                                    <h6 class="mb-0">@Local["Nguyên vật liệu"]</h6>
                                    <p class="text-sm mb-0">
                                        @Local["Chi tiết nguyên vật liệu"]
                                    </p>
                                </div>
                                <div class="right">
                                    <button id="MaterialList_btnAdd" class="btn bg-gradient-primary btn-sm mb-0" onclick="event.preventDefault();return AddNewMaterial()">@Local["Thêm mới"]</button>
                                    <button class="btn btn-dark btn-sm mb-0" onclick="event.preventDefault();return exportData_materiallist();">@Local["Xuất"]</button>
                                    <button class="btn btn-dark btn-sm position-relative dropdown-toggle mb-0" data-bs-toggle="collapse" data-bs-target="#colLists">
                                        @Local["Xem thêm"]
                                    </button>
                                </div>
                                <div class="toggle">
                                    <div class="collapse position-absolute z-index-3 end-1 top-100 mt-2" id="colLists" style="min-width:250px;">
                                        <ul class="card card-body text-dark text-capitalize opacity-10">
                                            <li class="d-flex">
                                                <div class="form-check form-switch">
                                                    <input class="shtoogle form-check-input" data-name="type" type="checkbox">
                                                </div>
                                                <p class="text-sm">@Local["Loại"]</p>
                                            </li>
                                            <li class="d-flex">
                                                <div class="form-check form-switch">
                                                    <input class="shtoogle form-check-input" data-name="norm" type="checkbox">
                                                </div>
                                                <p class="text-sm">@Local["Định mức"]</p>
                                            </li>
                                            <li class="d-flex">
                                                <div class="form-check form-switch">
                                                    <input class="shtoogle form-check-input" data-name="ismedicine" type="checkbox">
                                                </div>
                                                <p class="text-sm">@Local["Thuốc"]</p>
                                            </li>
                                            <li class="d-flex">
                                                <div class="form-check form-switch">
                                                    <input class="shtoogle form-check-input" data-name="attribute" type="checkbox">
                                                </div>
                                                <p class="text-sm">@Local["Thuộc tính"]</p>
                                            </li>
                                            <li class="d-flex">
                                                <div class="form-check form-switch">
                                                    <input class="shtoogle form-check-input" data-name="SalePrice" type="checkbox">
                                                </div>
                                                <p class="text-sm">@Local["Giá bán"]</p>
                                            </li>
                                            <li class="d-flex">
                                                <div class="form-check form-switch">
                                                    <input id="checkedProducHide" class="shtoogle form-check-input" data-name="" type="checkbox" onchange="return MaterialList_FilterList();">
                                                </div>
                                                <p class="text-sm">@Local["Nguyên vật liệu ẩn"]</p>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="vtcondition ">
                                <a class="sign" data-open="@Local[" Hiển thị"]" data-close="@Local[" Thu gọn"]" data-bs-toggle="collapse" aria-expanded="true"></a>
                                <div class="fulllap collapse collapsesticky show">
                                    <div class="row p-0 m-0 mt-2">
                                        <div class="field col-12 col-md-12 col-xl-4 p-1">
                                            <div class="input-group flex-nowrap" id="divFilterMaterial">
                                                <div class="input-group-text input-group-text px-2">
                                                    <i class="fas fa-search" aria-hidden="true"></i>
                                                    <div class="spinner-border spinner-border-sm d-none"></div>
                                                </div>
                                                <input id="filterMaterial" type="text" class="form-control" placeholder="eg .@Local["Lọc dữ liệu"]">
                                                <div class="input-group-text"><i class="btn_clear fas fa-minus-circle opacity-1"></i></div>
                                            </div>
                                        </div>
                                        <div class="field col-12 col-md-6 col-xl-4 p-1">

                                        </div>
                                        <div class="field col-12 col-md-6 col-xl-4 p-1">

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-body px-1 py-1">
                            <div class="m-1 mobile-responsive my-0 vt-header-sticky pb-1" style="max-height: calc(100vh - 230px);">
                                <div id="loaderList" class="waitingdiv text-center w-100 mt-2 position-absolute top-0 start-50 translate-middle-x" style="display: none;">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </div>
                                <table id="dtContentMaterial" class="table vt-table my-0">
                                    <thead>
                                        <tr role="row">
                                            <th class="d-none">ID</th>
                                            <th style="width: 40px;">@Local["#"]</th>
                                            <th class="no-sort" style="min-width: 250px;">@Local["Tên"]</th>
                                            <th data-name="type" class="no-sort" style="min-width: 150px;">@Local["Loại"]</th>
                                            <th data-name="ismedicine" class="no-sort">@Local["Thuốc"]</th>
                                            <th class="no-sort" style="width: 50px;">@Local["Đơn vị"]</th>
                                            <th class="no-sort" style="min-width: 120px;">@Local["Hệ số quy đổi"]</th>
                                            <th class="no-sort" data-name="norm" style="min-width: 135px;">@Local["Định mức"] [1 - 2 - 3]</th>
                                            <th data-name="attribute" class="no-sort" id="tcol2" style="min-width: 200px;">@Local["Thuộc tính"]</th>
                                            <th data-name="SalePrice">@Local["Giá bán"]</th>
                                            <th class="no-sort MaterialList_thHandle" style="width: 40px;">@Local["#"]</th>
                                        </tr>
                                    </thead>
                                    <tbody id="dtContentMaterialBody">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <div id="MaterialDetail" class=" px-0" style="display: none;">
    </div>
</div>




<script type="text/javascript">

    var dataUnit;
    var dataUnitChange;
    var dataMaterial;
    var dataMaterialType;
    var CurrentServiceGroup = 0;
    var CurrentService = 0;
    var Timer_Search_Material;
    let shtable;

    $(document).ready(function () {
        shtable = $("#dtContentMaterial").TableExpandColumn({
            shtoogle: $('.shtoogle')
        });
        MaterialList_Init();
        MaterialList_Event();
    });

    function MaterialList_Init() {
        AjaxLoad(url = "/WareHouse/Material/MaterialList/?handler=LoadataInitialization"
            , data = {}
            , async = true
            , error = null
            , success = function (result) {
                dataUnit = JSON.parse(result);
                MaterialList_LoadType();
                MaterialList_Load();
            }
        )
    }

    //#region // EVENT

    function MaterialList_Event() {
        $('#filterMaterial').keyup(function () {
            if ($(this).val().length > 0) $(".btn_clear").removeClass('opacity-1');
            else $(".btn_clear").addClass('opacity-1');
            $("#divFilterMaterial .fa-search").hide();
            $("#divFilterMaterial .spinner-border").removeClass('d-none');
            clearTimeout(Timer_Search_Material);
            Timer_Search_Material = setTimeout(function (e) {
                MaterialList_FilterList();
            }, 500);
        });
        $("#divFilterMaterial .btn_clear").unbind().click(function (e) {
            $('#filterMaterial').val('');
            $(".btn_clear").addClass('opacity-1');
            MaterialList_FilterList();
        });
        $('#dtContentMaterial tbody').on('click', '.buttonEditClass', function () {
            let ID = Number($(this).attr('data-id'));
            EditMaterial(ID);
            CurrentService = ID;
        });
        $('#dtContentMaterial tbody').on('click', '.buttonDisabledClass', function () {
            let ID = Number($(this).attr('data-id'));
            let Material = dataMaterial.find((item) => { return item.ID == ID });
            let Content = Material.IsDisabled == 0 ? "@Local["Vô hiệu hóa"]" : "@Local["Bỏ vô hiệu"]"
            const promise = notiConfirm(` ${Content} </br> @Local["Nguyên vật liệu"] <span class="text-primary fw-bold"> ${Material.Code} - ${Material.MaterialName}</span> `);
            promise.then(function () {
                MaterialList_ExecuteDisabled(ID);
            }, function () { });
        });
        $('#dtContentMaterial tbody').on('click', '.buttonCloneClass', function () {
            let ID = Number($(this).attr('data-id'));
            $("#DetailModal_Content").html('');
            $("#DetailModal_Content").load("/WareHouse/Material/MaterialCloneDetail?CurrentID=" + ID + "&ver=" + versionofWebApplication);
            $('#DetailModal').modal('show');
            return false;
        });
        $('#dtContentMaterialTypeBody .buttonEditClass').on('shown.bs.tab', function (e) {
            let ID = Number($(this).attr('data-id'));
            EditMaterialType(ID);
            CurrentServiceGroup = ID;
        });
 
  
    }

    //#endregion



    async function MaterialList_Load(id = 0) {
        new Promise(() => {
            AjaxLoad(url = "/WareHouse/Material/MaterialList/?handler=LoaddataMaterial"
                , data = { 'id': id }
                , async = true
                , error = null
                , success = function (result) {
                    if (result != "") {
                        let data = JSON.parse(result);
                        if (id == 0) {
                            dataMaterial = data.Table;
                            dataUnitChange = data.Table1;
                            if (dataMaterial && dataMaterial.length != 0) {
                                MaterialList_FilterList();
                            }
                        }
                        else {
                            let dataMaterialItem = data.Table;
                            if (dataMaterialItem && dataMaterialItem.length != 0) {
                                dataMaterial = dataMaterial.reduce((pre, arr) => {
                                    if (arr.ID == id) arr = dataMaterialItem[0];
                                    pre.push(arr);
                                    return pre;
                                }, []);
                                let dataUnitChangeTemp = data.Table1;
                                dataUnitChange = dataUnitChange.filter((product) => {
                                    return product.ProductID != id;
                                });
                                if (dataUnitChangeTemp && dataUnitChangeTemp.length != 0) {
                                    for (let i = 0; i < dataUnitChangeTemp.length; i++)
                                        dataUnitChange.push(dataUnitChangeTemp[i]);
                                }
                                let item = dataMaterialItem[0];
                                let itemContent = MaterialList_RenderEach(item);
                                let tr = `
                                    <tr id="rowMaterial_${item.ID}" class="rowService type${item.CatID} vt-number ${((item.IsDisabled == 1) ? 'table-active' : '')}" data-id="${item.ID}">
                                        ${itemContent}
                                    </tr>`;
                                let rowMaterial = $("#rowMaterial_" + id);
                                if (rowMaterial && rowMaterial.length != 0) {
                                    $("#rowMaterial_" + id).replaceWith(tr);
                                }
                                else {
                                    document.getElementById('dtContentMaterialBody').insertAdjacentHTML('afterbegin', tr);
                                }
                                shtable.Refresh();
                            }
                            else {
                                let rowMaterial = $("#rowMaterial_" + id);
                                if (rowMaterial && rowMaterial.length != 0) rowMaterial.remove();
                                dataMaterial = dataMaterial.filter((product) => { return product.ID != id; })
                            }
                        }
                    }
                },
                before = function () {
                    $("#MainMaterial").hide();
                    $("#loaderList").show();
                },
                complete = function (e) {
                    $("#MainMaterial").show();
                    $("#loaderList").hide();
                }
            );
        })
    }

    //#region // RENDER MATERIAL

    async function MaterialList_Render(data, id) {
        return new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                if (data && data.length > 0) {
                    let totalMaterial = 0;
                    for (let i = 0; i < data.length; i++) {
                        totalMaterial += 1;
                        let item = data[i];
                        let tr = MaterialList_RenderEach(item);
                        tr = `
                        <tr id="rowMaterial_${item.ID}" class="rowService type${item.CatID} vt-number ${((item.IsDisabled == 1) ? 'table-active' : '')}" data-id="${item.ID}">
                            ${tr}
                        </tr>`;
                        myNode.insertAdjacentHTML('beforeend', tr);
                    }
                    Count_Up('totalMaterial', totalMaterial)
                }
            }
            shtable.Refresh();
            resolve();
        })
    }

    function MaterialList_RenderEach(item) {
        try {
            let tr = `
            <td class="d-none">${item.ID}</td>
            <td class="vt-number-order text-center"></td>
            <td class="SearchFilter">
                <a class="text-dark fw-bold border-bottom border-dark buttonEditClass cursor-pointer" data-id="${item.ID}">${item.Code}</a>
                <p class="mb-0">${item.MaterialName}</p>
            </td>
            <td data-name="type">${item.TypeName}</td>
            <td data-name="ismedicine">
               ${((item.IsMedicine == 1) ? '<span title="Installment" class="badge bg-gradient-warning">@Local["Thuốc"]</span>' : '')}
            </td>
            <td>${MaterialList_Render_Unit(item.UnitID)}</td>
            <td>${MaterialList_Render_UnitChange(item.ID)}</td>
            <td data-name="norm">${MaterialList_Render_Norm(item.N1, item.N2, item.N3)}</td>
            <td data-name="attribute">
                ${item.Property}
                <p class="mb-0 text-secondary">${item.Description}</p>
            </td>
            <td data-name="SalePrice">
                ${formatNumber(item.PriceToSale)}
            </td>
            <td class="text-nowrap MaterialList_rowBtnHandle">${MaterialList_Render_Execute(item.ID, item.IsClone, item.IsDisabled)}</td>
            `
            return tr;
        }
        catch (ex) {
            return '';
        }
    }

    function MaterialList_Render_Unit(id) {
        try {
            let result = '';
            if (id && id != 0) {
                result = dataUnit.reduce((pre, arr) => {
                    if (arr.ID == id) {
                        pre = arr.Name;
                    }
                    return pre;
                }, '');
            }
            return result;
        }
        catch (ex) {
            return '';
        }
    }

    function MaterialList_Render_Execute(id, isclone, isdisabled) {
        let buttons = [];
        if (isclone == 1) {
            buttons.push('<button class="buttonGrid"  value="' + id + '">'
                + '<i data-id="' + id + '" class="buttonCloneClass fa fa-clone"></i>'
                + '</button>')
        }
        buttons.push('<button class="buttonGrid"  value="' + id + '">'
            + ((isdisabled === 1)
                ? '<i data-id="' + id + '" class="buttonDisabledClass vtt-icon vttech-icon-hide"></i>'
                : '<i data-id="' + id + '" class="buttonDisabledClass vtt-icon vttech-icon-nohide"></i>')
            + '</button>')

        return Render_Button_Grid(buttons)
    }

    function MaterialList_Render_Norm(n1, n2, n3) {
        return formatNumber(n1) + ' - ' + formatNumber(n2) + " - " + formatNumber(n3)
    }

    function MaterialList_Render_UnitChange(id) {
        let result = "";
        let data_Filter_Unit_Change = dataUnitChange.filter(work => {
            return (work["ProductID"] == id)
        });
        if (data_Filter_Unit_Change != undefined && data_Filter_Unit_Change.length != 0) {
            for (i = 0; i < data_Filter_Unit_Change.length; i++) {
                let item = data_Filter_Unit_Change[i];
                let datafiler = dataUnit.filter(word => {
                    return (word["ID"] == data_Filter_Unit_Change[i].UnitID);
                });
                if (datafiler && datafiler.length != 0) {
                    result += '<div><span class="badge bg-light p-1 m-2 text-sm text-dark">'
                        + '<span class="text-lowercase font-weight-normal px-2">' + datafiler[0].Name + '</span>'
                        + '<span class="badge bg-gradient-dark"><span class="pe-3">x '
                        + ((item.Number > 1) ? formatNumber(item.Number) : item.Number)
                        + '</span></span>'
                        + '</span></div>'
                }
            }
        }
        return result;
    }

    //#endregion



    function MaterialList_Type_Event() {
        $(".rowGroupService").unbind('click').on('click', function (event) {
            let id = Number($(this).attr("data-id"));
            let TTMaterial = Number($(this).attr("data-total"));
            CurrentServiceGroup = id;
            MaterialList_FilterByType();
            $(this).addClass('active').siblings('.rowGroupService').removeClass('active')
            $("#TTMaterialType").html(' / ' + TTMaterial);
        });

    }

    async function MaterialList_FilterByType() {
        $("#loaderList").show();
        return new Promise((resolve) => {
            setTimeout(() => {
                if (CurrentServiceGroup == 0) $("#dtContentMaterialBody tr.rowService").removeClass('d-none');
                else {
                    $("#dtContentMaterialBody tr.rowService").addClass('d-none');
                    $("#dtContentMaterialBody tr.rowService.type" + CurrentServiceGroup).removeClass('d-none');
                }
                $("#loaderList").hide();
            }, 10);
        })
    }

    async function MaterialList_FilterList() {
        return new Promise((resolve) => {
            let search = xoa_dau($('#filterMaterial').val().toLowerCase()).trim();
            let data = dataMaterial;
            if (search != "") {
                data = dataMaterial.filter(function (item) {
                    if (xoa_dau(item["Code"]).toLowerCase().includes(search)
                        || xoa_dau(item["MaterialName"]).toLowerCase().includes(search))
                        return true;
                    return false;
                });
            }
            let isCheck = $("#checkedProducHide").is(":checked");
            if (!isCheck) data = data.filter((word) => Number(word.IsDisabled) != 1)
            else data = data;

            $("#dtContentMaterialBody").empty();
            fnRenderBlock(data, "dtContentMaterialBody"
                , blocknum = 200
                , fnrender = MaterialList_Render
                , fnsuccess = function (e) { }
                , fnbegin = function (e) { }
            );
            $("#divFilterMaterial .fa-search").show();
            $("#divFilterMaterial .spinner-border").addClass('d-none');
            resolve();
        })
    }

    function MaterialList_ExecuteDisabled(id) {
        AjaxLoad(url = "/WareHouse/Material/MaterialList/?handler=DisableItem"
            , data = { id: id }
            , async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    notiSuccess();
                    MaterialList_Load(id);
                    syslog_whr('u', result);
                } else {
                    notiError_SW();
                }
            });
    }

    function AddNewMaterial() {
        OpenDetail();
        $("#MaterialDetail").load("/WareHouse/Material/MaterialDetail" + "?ver=" + versionofWebApplication);
        $("#MaterialDetail").show();
        return false;
    }

    function EditMaterial(CurrentID) {
        OpenDetail();
        $("#MaterialDetail").load("/WareHouse/Material/MaterialDetail?CurrentID=" + CurrentID + "&ver=" + versionofWebApplication);
        $("#MaterialDetail").show();
        return false;
    }

    function OpenDetail() {
        $("#MaterialDetail").empty();
        $("#MaterialtList").hide();
        document.getElementById("MaterialDetail").innerHTML = '';
    }

    // #region // MATERIAL TYPE

    function MaterialList_LoadType(id = 0) {
        AjaxLoad(url = "/WareHouse/Material/MaterialList/?handler=LoadataMaterialType"
            , data = {
                id: id
            }
            , async = true
            , error = null
            , success = function (result) {
                if (id == 0) {
                    dataMaterialType = JSON.parse(result);
                    if (dataMaterialType && dataMaterialType.length != 0) {
                        MaterialList_Type_Render(dataMaterialType, 'dtContentMaterialTypeBody');
                    }
                }
                else {
                    let data = JSON.parse(result);
                    if (data && data.length != 0) {
                        let item = data[0];
                        dataMaterialType = dataMaterialType.reduce((pre, arr) => {
                            if (arr.ID == id) arr = item;
                            pre.push(arr);
                            return pre;
                        }, []);
                        let tr = MaterialList_Type_RenderEach(item);
                        let rowType = $("#rstype_" + id);
                        if (rowType && rowType.length != 0) $("#rstype_" + id).replaceWith(tr);
                        else document.getElementById('dtContentMaterialTypeBody').insertAdjacentHTML('beforeend', tr)

                        MaterialList_Type_Event();
                    }
                    else {
                        let rowType = $("#rstype_" + id);
                        if (rowType && rowType.length != 0) {
                            rowType.remove();
                        }
                    }
                    let total = MaterialList_Type_Total();
                    $("#rstype_total").html(formatNumber(total))
                }
            });
    }

    async function MaterialList_Type_Render(data, id) {
        new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                let total = 0;
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let tr = MaterialList_Type_RenderEach(item);
                        total += Number(item.TotalMaterial);
                        myNode.insertAdjacentHTML('beforeend', tr);
                    }
                }
                let stringContent = `
                        <li class="nav-item" role="presentation">
                            <a data-id="0" class="text-sm item-menu rowGroupService nav-link cursor-pointer" data-hover data-bs-toggle="tab">
                                <div class="ps-1 text-bolder text-lowercase">
                                    <span class="fw-bolder text-primary">${formatNumber(total)}</span>
                                    <span class="ps-2">@Local["Đơn vị"]</span>
                                </div>
                            </a>
                            <hr class="horizontal dark my-0 opacity-2">
                        </li>`;
                myNode.insertAdjacentHTML('afterbegin', stringContent);
            }
            MaterialList_Type_Event();
            MaterialList_Type_TriggerClickType();
        })
    }

    function MaterialList_Type_Total() {
        try {
            return dataMaterialType.reduce((pre, acc) => {
                pre += acc.TotalMaterial;
                return pre;
            }, 0)
        }
        catch (ex) {
            return 0;
        }
    }

    function MaterialList_Type_RenderEach (item) {
        let med = '';
        if (item.IsMedicine == 1) med=`<span class="px-1 text-lowercase text-primary">@Local["Thuốc"]</span>`
        let tr=
            `<li id="rstype_${item.ID}" data-id="${item.ID}" class="nav-item" role="presentation">
                 <a data-id="${item.ID}" class="text-sm item-menu  rowGroupService nav-link cursor-pointer" data-hover data-bs-toggle="tab">
                     <div class="px-1">
                         <div data-id="${item.ID}" class="d-inline buttonEditClass">
                             <span class="ps-0 text-sm text-dark">
                                 ${item.Name}
                             </span>
                         </div>
                         <div class="d-flex align-items-center mt-0">
                             <div class="ps-0">
                                  <span class="fw-bold text-primary">${formatNumber(item.TotalMaterial)}</span>
                                  <span class="px-1 text-lowercase text-secondary">@Local["Đơn vị"]</span>
                                   ${med}
                             </div>
                         </div>
                     </div>
                 </a>
                 <hr class="horizontal dark my-0">
             </li>`
        return tr;
    }

    function MaterialList_Type_TriggerClickType(id = CurrentServiceGroup) {
        let rowTypeMaterial = $('.rowGroupService[data-id=' + id + ']');
        if (rowTypeMaterial && rowTypeMaterial.length != 0) {
            rowTypeMaterial.addClass("active").siblings('.rowGroupService').removeClass("active");
        }
    }

    function AddNewMaterialType() {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/WareHouse/Material/MaterialTypeDetail" + "?ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    function EditMaterialType(CurrentID) {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/WareHouse/Material/MaterialTypeDetail?CurrentID=" + CurrentID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    // #endregion

    function exportData_materiallist() {
        exportToExcel("dtContentMaterial", Outlang['Nguyen-vat-lieu']);
        syslog_whr('e', '');
    }

</script>

<style>
    .rowGroupService .buttonEditClass:hover {
        border-bottom: 1px solid var(--color--primary)
    }
    
    .unit_change_name {
        color: #009688;
        padding: 3px 4px;
        margin: 2px;
        display: inline-block;
        background: #eef7ff;
        white-space: nowrap;
        border: 1px solid #c3e5ff;
        text-overflow: ellipsis;
        overflow: hidden;
    }

    .unit_change_number {
        color: #f63200;
        padding: 3px 4px;
        margin: 2px;
        display: inline-block;
        background: #eef7ff;
        text-align: center;
        border: 1px solid #c3e5ff;
    }

    .metarial_column_right {
        flex-grow: 1;
        width: calc(100% - 350px);
        padding-left: 10px;
    }

    .vt-table tr td {
        border-left: 1px solid var(--color--table--border) !important;
        white-space: normal !important;
    }

    @@media only screen and (max-width:767px) {
        .metarial_column_right {
            padding-top: 1em;
            padding-left: 0;
            width: 100%;
        }
    }
</style>
