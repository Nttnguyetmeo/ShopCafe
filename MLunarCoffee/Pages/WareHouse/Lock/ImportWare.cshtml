@page
@model MLunarCoffee.Pages.WareHouse.Lock.ImportWareModel
@{
    Layout=null;
}
<script>js_require('/js/comon/initialize_setting.js');</script>


<div class="row m-0">
    <div class="col-12 px-0">
        <!--Master-->
        <div class="card card-plain">
            <div class="vtcardheader card-header pb-0">
                <div class="left">
                    <h6><span class="mb-0">@Local["Thực hiện nhập dữ liệu"]</span> <span class="fw-bold text-primary ps-2" id="I_WareName"></span></h6>
                    <p class="text-sm mb-0">@Local["Không được thêm hay bớt dòng dữ liệu nào, số lượng tồn và giá trị sản phẩm không được âm"].</p>
                </div>
            </div>
            <div class="card-body pt-2 ">
                <div class="vtcondition">
                    <a class="sign" data-open="@Local["Hiển thị"]" data-close="@Local["Thu gọn"]" data-bs-toggle="collapse" aria-expanded="true"></a>
                    <div class="fulllap collapse collapsesticky show">
                        <div class="row px-2 form3" id="form3">
                            <div class="col-12 col-md-6 col-xl-3 p-1">
                                <div class="input-group">
                                    <div type="text" class=" text-primary input-group-text text-gradient">@Local["Tổng"]</div>
                                    <span class="form-control font-weight-bolder" id="txtWareImport_Num">0</span>
                                </div>
                            </div>
                            <div class="col-12 col-md-6 col-xl-3 p-1">
                                <input id="WareImport_Num" class="flatpickr form-control" type="text" placeholder="eg .@Local["Ngày"]" />
                            </div>
                            <div class="col-12 col-md-6 col-xl-6 p-1">
                                <button class="btn bg-gradient-info " onclick="WareImport_GetTemplate()">@Local["Lấy mẫu"]</button>
                                <div class="position-relative d-inline-block">
                                    <button id="WareImport_Filename" class="btn bg-gradient-primary ">@Local["Tải tệp lên"] (.xlsx)</button>
                                    <div class="upload-btn-wrapper d-block mt-3">
                                        <input style="width:180px!important;" type="file" class="position-absolute opacity-0 cursor-pointer z-3 top-5" onchange="event.preventDefault();return WareImport_Handle(event)" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div style="display: none;">
                    <table class="ui celled table vt-table" id="TableWareImport">
                        <thead>
                            <tr>
                                <th>STT</th>
                                <th>ProductCode</th>
                                <th>ProductName</th>
                                <th>NumberLeft</th>
                                <th>UnitName</th>
                                <th>UnitPrice</th>
                            </tr>
                        </thead>
                        <tbody id="TableWareImportBody">
                        </tbody>
                    </table>
                </div>
                <div class="m-0 my-0 mobile-responsive vt-header-sticky">
                    <div id="WareImport_Wait" class="waitingdiv text-center" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>

                    </div>
                    <table class="table vt-table mb-0" id="dtProductList_Main">
                        <thead>
                            <tr>
                                <th class="d-none">ID</th>
                                <th class="no">@Local["#"]</th>
                                <th>@Local["Mã sản phẩm"]</th>
                                <th>@Local["Tên sản phẩm"]</th>
                                <th>@Local["Số lượng tồn"]</th>
                                <th>@Local["Đơn vị"]</th>
                                <th>@Local["Đơn giá"]</th>
                            </tr>
                        </thead>
                        <tbody id="dtProductList_MainBody">
                        </tbody>
                    </table>
                </div>
                <div class="fixed-botombutton">
                    <div class="action_Save">
                        <div class="text-danger text-gradient text-sm font-weight-bold" id="WareImport_Message"></div>
                        <div class="text-danger text-gradient text-sm font-weight-bold" id="WareImport_ExeMess"></div>
                        <div class="action_Save-Content">
                            <button class="btn btn-secondary" form="form3" onclick="LockWare_Cancel()">Cancel</button>
                            <button form="form3" type="button" class="btn bg-gradient-primary mt-2 me-2" onclick="WareImport_Execute()">Import</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- #endregion -->
        </div>

    </div>
</div>
<script type="text/javascript">
    let DataTableExcelImport = [];
    let ser_WareID = '@Model._WareID';
    let data_product_import = {};
    let data_product_main = {}

    $(document).ready(function () {
        $("#WareImport_Num").flatpickr({
            dateFormat: 'd-m-Y H:i:s',
            enableTime: true,
            time_24hr: true,
            maxDate: new Date(),
            defaultDate: new Date()
        });
        getNameWareHouse();
        DataTableExcelImport = new Array();
        document.getElementById("WareImport_Message").innerHTML = "";
        WareImport_LoadProduct();

    });
    function getNameWareHouse() {
        let data = data_ware.filter(word => word['ID'] == ser_WareID);
        if (data.length > 0) {
            $("#I_WareName").html(data[0].Name);
        }
    }
    function WareImport_LoadProduct() {
        AjaxLoad(url = "/WareHouse/Lock/ImportWare/?handler=LoadDataProduct"
            , data = {  'WareID': ser_WareID}, async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    let ProductList = JSON.parse(result);
                    if (ProductList.length > 0) {
                        if (ProductList[0].RESULT == undefined) {
                            WareImport_RenderProduct(ProductList, "TableWareImportBody");
                            let totalRow = ProductList.length;
                            data_product_main = {};

                            for (let i = 0; i < ProductList.length; i++) {
                                let item = ProductList[i];
                                let element = {};
                                element.ProductID = item.ProductID;
                                element.ProductCode = item.ProductCode;
                                element.ProductName = item.ProductName;
                                element.Unit_ID = item.Unit_ID;
                                element.UnitName = item.UnitName;
                                element.NumberLeft = item.NumberLeft;
                                element.UnitPrice = item.UnitPrice;
                                data_product_main[item.ProductID] = element;
                            }
                            fnRenderBlock(ProductList, "dtProductList_MainBody"
                                , blocknum = 100
                                , fnrender = WareImport_RenderImport
                                , fnsuccess = function () { }
                            );
                            $('#txtWareImport_Num').html(totalRow);
                        }
                        else {
                            notiError("Lần chốt kho trước chưa hoàn thành hoặc thời gian chốt kho không phù hợp");
                            LockWare_Cancel();
                        }
                    } else {
                        notiWarning("Setting Material!");
                    }
                }
            },
            before = function () {
                $("#dtProductList_Main").hide();
                $("#WareImport_Wait").show();
            },
            complete = function (e) {
                $("#dtProductList_Main").show();
                $("#WareImport_Wait").hide();
            }
        );

    }
    function WareImport_Execute () {
        $('#WareImport_ExeMess').html('');
        WareImport_Validate();
        var dateImport = $('#WareImport_Num').val() ? $('#WareImport_Num').val() : "";
        if (dateImport == "") {
            $('#WareImport_Num').css('background-color', 'rgb(255 216 216)'); isError_ = 1;
            $('#WareImport_ExeMess').html('Kiểm tra dữ liệu');
        }
        if ($('#WareImport_ExeMess').html() == "" && Object.entries(data_product_main).length > 0) {
            const promise = notiConfirm();
            promise.then(function () {
                let product = [];
                for ([key, value] of Object.entries(data_product_main)) {
                    product.push(value);
                }
                AjaxLoad(url = "/WareHouse/Lock/ImportWare/?handler=ExcuteData"
                    , data = {
                        'data': JSON.stringify(product)
                        , 'wareID': ser_WareID
                        , 'dateImport': dateImport
                    }, async = true, error = null
                    , success = function (result) {
                        if (result != "0") {
                            notiSuccess();
                            if (typeof LockWare_Cancel !== 'undefined') LockWare_Cancel();
                            if (typeof LockWare_Load !== 'undefined') LockWare_Load(0);
                            syslog_whr('i', result);
                        }
                        else {
                            notiError("Lần chốt kho trước chưa hoàn thành hoặc thời gian chốt kho không phù hợp");

                        }
                    }
                );
                return false;
            }, function () { });
        }
    }
    async function WareImport_RenderImport(data, id) {
        return new Promise((resolve) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let tr =
                            '<td class="d-none">' + item.ProductID + '</td>'
                            + '<td class="vt-number-order"></td>'
                            + '<td>' + item.ProductCode + '</td>'
                            + '<td>' + item.ProductName + '</td>'
                            + '<td>' + AddCell_NumberLeft(item.ProductID, item.NumberLeft) + '</td>'
                            + '<td>' + item.UnitName + '</td>'
                            + '<td>' + AddCell_UnitPrice(item.ProductID, item.UnitPrice) + '</td>';

                        tr = '<tr class="vt-number rowVTTH"  id=row_' + item.ProductID + '>' + tr + '</tr>';
                        myNode.insertAdjacentHTML('beforeend', tr)
                    }
                }
            }
            WareImport_EventImport();
        });
    }
    function AddCell_NumberLeft (randomNumber, value) {
        let resulf = '<input name="numberFloat" class="form-control numberLeft" id="numberLeft_' + randomNumber + '"  value="' + value + '" />';
        resulf = resulf;
        return resulf;
    }
    function AddCell_UnitPrice (randomNumber, value) {
        let resulf = '<input class="form-control unitPrice" id="unitPrice_' + randomNumber + '" value="' + value + '" />';
        resulf = resulf;
        return resulf;
    }

    function WareImport_EventImport () {
        $(".numberLeft").change(function () {
            let id = this.id.replace("numberLeft_", "")
            data_product_main[id].NumberLeft = (this.value == "" ? "0" : this.value);

        });
        $(".unitPrice").change(function () {
            let id = this.id.replace("unitPrice_", "")
            data_product_main[id].UnitPrice = (this.value.replace(",", "")) == "" ? "0" : this.value.replaceAll(",", "");

        });
    }
    function WareImport_Validate () {
        let isError_ = 0;
        for ([key, value] of Object.entries(data_product_main)) {
            if (value.NumberLeft == "") {
                data_product_main[key].NumberLeft = "0";
            }
            if (value.UnitPrice == "") {
                data_product_main[key].UnitPrice = "0";
            }

            if (isNaN(value.NumberLeft) || Number(value.NumberLeft) < 0) {
                $('#numberLeft_' + key).css('background-color', 'rgb(255 216 216)'); isError_ = 1;
            }
            else $('#numberLeft_' + key).css('background-color', 'white');

            if (isNaN(value.UnitPrice) || Number(value.UnitPrice) < 0) {
                $('#unitPrice_' + key).css('background-color', 'rgb(255 216 216)'); isError_ = 1;
            }
            else $('#unitPrice_' + key).css('background-color', 'white');

            if (Number(value.NumberLeft) == 0 && Number(value.UnitPrice) > 0) {
                $('#unitPrice_' + key).css('background-color', 'rgb(255 216 216)'); isError_ = 1;
                $('#numberLeft_' + key).css('background-color', 'rgb(255 216 216)'); isError_ = 1;
            }
        }
        if (isError_ == 1) $('#WareImport_ExeMess').html('@Local["Kiểm tra dữ liệu"]');
    }

    function WareImport_RenderProduct (data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    let item = data[i];
                    let tr =
                        '<td style="width:50px">' + (i + 1) + '</td>'
                        + '<td class="tableexport-string">' + item.ProductCode + '</td>'
                        + '<td class="tableexport-string">' + item.ProductName + '</td>'
                        + '<td>' + item.NumberLeft + '</td>'
                        + '<td class="tableexport-string">' + item.UnitName + '</td>'
                        + '<td>' + item.UnitPrice + '</td>'

                    stringContent = stringContent + '<tr role="row">' + tr + '</tr>';
                }
            }
            document.getElementById(id).innerHTML = stringContent;
        }
    }
    // import file excel
    function WareImport_GetTemplate () {
        GetTemplateXLSX("TableWareImport", 'ProductListImport');
        syslog_whr('e', '');
        return false;
    }

    //handle
    function WareImport_Handle (e) {

        DataTableExcelImport = [];
        let cols = {
            ProductCode: {Validation: {Name: "", Value: ""}, ReplaceNull: {isReplace: 1, ColName: "", Value: ""}},
            ProductName: {Validation: {Name: "", Value: ""}, ReplaceNull: {isReplace: 1, ColName: "", Value: ""}},
            UnitName: {Validation: {Name: "", Value: ""}, ReplaceNull: {isReplace: 1, ColName: "", Value: ""}},
            NumberLeft: {Validation: {Name: "", Value: ""}, ReplaceNull: {isReplace: 0, ColName: "", Value: ""}},
            UnitPrice: {Validation: {Name: "", Value: ""}, ReplaceNull: {isReplace: 0, ColName: "", Value: ""}}
        };
        $("#WareImport_Filename").html(e.target.files[0].name);
        handleFileImport(e, cols, fnfinish=WareImport_BeforeHandle );
        return false;
    }

    function WareImport_BeforeHandle (data) {
        $("#WareImport_Message").html("");
        if (data.result == "success") {
            for ([id, item] of Object.entries(data.data)) {
                for ([key, value] of Object.entries(data_product_main)) {
                    if (value.ProductCode.toLowerCase() == item.ProductCode.toLowerCase()) {
                        data_product_main[key].NumberLeft = item.NumberLeft;
                        data_product_main[key].UnitPrice = item.UnitPrice;
                    }
                }
            }
            WareImport_FillImport(data_product_main);
        }
        else {
            $("#WareImport_Message").html(data.data);
        }
    }
    function WareImport_FillImport(data) {
        for ([key, value] of Object.entries(data)) {
            $('#unitPrice_' + key).val(value.UnitPrice != '' ? value.UnitPrice : 0);
            $('#numberLeft_' + key).val(value.NumberLeft != '' ? value.NumberLeft : 0);
        }
    }
</script>
<script>js_require('/js/comon/Import.js');</script>
