@page
@model MLunarCoffee.Pages.Labo.Setting.Color.SettingColorListModel
@{
    Layout = null;
}
<div class="row">
    <div class="col-12 px-0">
        <div class="card card-plain" id="list_labo">
            <div class="vtcardheader card-header pb-0 pt-2">
                <div class="left">
                    <h6 class="mb-0">@Local["Màu"]</h6>
                    <p class="text-sm mb-0">@Local["Danh sách màu"]</p>
                </div>
                <div class="right">
                    <button class="btn bg-gradient-primary btn-sm mt-1" onclick="SColor_New();">@Local["Thêm mới"]</button>
                </div>
            </div>
            <div class="card-body pt-2">
                <div class="m-0 mobile-responsive">
                    <table data-name="" class="table vt-table mb-0" id="">
                        <thead>
                            <tr>
                                <th class="d-none">ID</th>
                                <th style="width:40px;">#</th>
                                <th>@Local["Tên"]</th>
                                <th>@Local["Màu"]</th>
                                <th style="width:40px;">@Local["Xóa"]</th>
                            </tr>
                        </thead>
                        <tbody id="SC_BodyColor">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        SColor_Load();
    })

    //#region //Load
    function SColor_Load () {
        AjaxLoad(url = "/Labo/Setting/Color/SettingColorList/?handler=LoadData"
            , data = {}
            , async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    SColor_Render(data, "SC_BodyColor");
                }
            }
        )
    }
    //#endregion


    //#region //Render
    async function SColor_Render (data, id) {
        new Promise((resolve) => {
            setTimeout(() => {
                let myNode = document.getElementById(id);
                if (myNode != null) {
                    myNode.innerHTML = '';
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            let tr = `
                                <td class="d-none">${item.ID}</td>
                                <td class="vt-number-order"></td>
                                <td><span class="border-bottom text-primary border-primary cursor-pointer btnEdit">${item.Name}</span></td>
                                <td><span class="badge ms-auto text-primary" style="background-color: ${item.Value};">${item.Value}</span></td>
                                <td class="text-center">
                                    <button class="buttonGrid">
                                        <i class="btnDelete vtt-icon vttech-icon-delete"></i>
                                    </button>
                                </td>
                            `
                            tr = `<tr role="row" class="vt-number">${tr}</tr>`
                            myNode.insertAdjacentHTML('beforeend', tr);
                        }
                    }
                    resolve();
                }
                SColor_Event();
            }, 100)
        })
    }

    //#endregion

    //#region //Event

    function SColor_Event () {
        $('#SC_BodyColor .btnEdit').unbind('click').click(function () {
            let ID = Number($(this).closest('tr').children()[0].innerHTML);
            SColor_Edit(ID);
        });
        $('#SC_BodyColor .btnDelete').unbind('click').click(function () {
            let ID = Number($(this).closest('tr').children()[0].innerHTML);
            SColor_Delete(ID);
        });
    }

    //#endregion

    //#region //Delete

    function SColor_Delete (ID) {
        const promise = notiConfirm();
        promise.then(function () {SColor_DeleteExecuted(ID);}, function () { });
    }

    function SColor_DeleteExecuted (ID) {
        AjaxLoad(url = "/Labo/Setting/Color/SettingColorList/?handler=Delete"
            , data = {
                "CurrentID": ID
            }, async = false, error = null
            , success = function (result) {
                if (result == "1") {
                    notiSuccess();
                    SColor_Load();
                } else {
                    notiError_SW();
                }
            }
        );
    }

    //#endregion

    //#region //Detail

    function SColor_New () {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Labo/Setting/Color/SettingColorDetail?CurrentID=" + 0 + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    function SColor_Edit (ID) {
        $("#DetailModal_Content").html('');
        $("#DetailModal_Content").load("/Labo/Setting/Color/SettingColorDetail?CurrentID=" + ID + "&ver=" + versionofWebApplication);
        $('#DetailModal').modal('show');
        return false;
    }

    //#endregion
</script>