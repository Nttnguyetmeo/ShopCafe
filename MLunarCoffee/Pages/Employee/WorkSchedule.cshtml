@page
@model MLunarCoffee.Pages.Employee.WorkScheduleModel
@{
    if (@Model.layout == "none") Layout = null;
}
@Html.AntiForgeryToken()
<script>js_require('/js/Calendar_Custom/appointment.js')</script>
<script src="/assets/js/plugins/fullcalendar.min.js"></script>
<script>js_require('/js/Calendar/Detect_Calendar_Type.js');</script>
<script>js_require_notasync('/js/Calendar_Custom/datetime.js', true)</script>
<script>js_require_notasync('/js/WorkScheduler/workscheduler.js', true)</script>


<div id="WorkScheduleMain">
    <div class="d-lg-flex">
        <div class="col-w-350">
            <div class="card card-plain">
                <div class="vtcardheader card-header pb-0 px-2">
                    <div class="left">
                        <h6 class="mb-0">@Local["Lịch làm việc"]</h6>
                        <p class="text-sm mb-0">@Local["Cập nhật lịch làm việc"]</p>
                    </div>
                </div>
                <div class="card-body pt-2 px-2">
                    <div class="vtcondition">
                        <a class="sign" data-open="@Local["Hiển thị"]" data-close="@Local["Thu gọn"]" data-bs-toggle="collapse" aria-expanded="true"></a>
                        <div class="fulllap collapse collapsesticky show">
                            <div class="card-body px-0 pt-2 ms-n1">
                                <div class="col-12 p-1 px-0">
                                    <div class="ui fluid search selection form-control dropdown" id="WSBranchEmp" onchange="event.preventDefault(); WSEmp_Load();">
                                        <input type="hidden" name="branch" />
                                        <input class="search" autocomplete="off" tabindex="0" />
                                        <div class="default text">@Local["Chọn chi nhánh"]</div>
                                        <div id="cbbWSBranchEmp" class="menu" tabindex="-1">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 p-1 px-0">
                                    <div class="ui fluid search selection form-control dropdown" id="WSGroupID" onchange="event.preventDefault(); WSEmp_Load();">
                                        <input type="hidden" name="branch" />
                                        <input class="search" autocomplete="off" tabindex="0" />
                                        <div class="default text">@Local["Bộ phận"]</div>
                                        <div id="cbbWorkGroupEmp" class="menu" tabindex="-1">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 p-1 px-0">
                                    <div class="input-group flex-nowrap mb-2" id="WSSearch_Area">
                                        <div class="input-group-text input-group-text px-2">
                                            <i class="fas fa-search" aria-hidden="true"></i>
                                            <div class="spinner-border spinner-border-sm d-none"></div>
                                        </div>
                                        <input id="WSSearch_Input" type="text" class="form-control" placeholder="eg .@Local["Tìm kiếm"]">
                                        <div class="input-group-text"><i class="btn_clear fas fa-minus-circle opacity-1"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="m-0 mobile-responsive overflow-auto position-relative" style="max-height: calc(100vh );">
                        <div id="WSContent_Wait" class="waitingdiv position-absolute top-0 start-50 translate-middle-x mt-2" style="display: none;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">@Local["Đang tải"]...</span>
                            </div>
                        </div>
                        <table class="table vt-table mb-0">
                            <thead>
                                <tr>
                                    <th class="d-none"></th>
                                    <th style="width:40px;">#</th>
                                    <th>@Local["Nhân viên"]</th>
                                </tr>
                            </thead>
                            <tbody id="dtWSContent_Emp">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="w-100 ps-lg-3 ps-0">
            <div class="card card-plain">
                <div class="vtcardheader card-header pb-0 px-2">
                    <div class="left">
                        <h6 id="WS_Empname" class="text-capitalize text-sm mb-0 fw-bold text-primary"></h6>
                        <p class="text-sm mb-0">@Local["Thông tin ca làm việc"]</p>
                    </div>
                    <div class="right overflow-unset">
                        <div class="ui fluid search selection form-control dropdown" id="WSBranchWork" style="width:200px;" onchange="WSD_BranchChange()">
                            <input type="hidden" name="branch" />
                            <input class="search" autocomplete="off" tabindex="0" />
                            <div class="default text">@Local["Chọn chi nhánh"]</div>
                            <div id="cbbWSBranchWork" class="menu" tabindex="-1">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body pt-2 px-2">
                    <div class="fc fc-media-screen fc-direction-ltr fc-theme-standard">
                        <div class="vtcardheader card-header p-0 pb-2">
                            <div class="left">
                                <div class="fc-toolbar-chunk">
                                    <h2 class="fc-toolbar-title text-capitalize text-sm mb-0 fw-bold text-primary">--</h2>
                                </div>
                            </div>
                            <div class="right">                                
                                <div class="fc-toolbar-chunk">
                                    <div class="fc-button-group">
                                        <button class="btn btn-dark btn-sm m-0 me-1" type="button"
                                                onclick="event.preventDefault(); return WorkSchedule_Export();">
                                            @Local["Xuất"]
                                        </button>
                                        <button id="EWordSche_btnUpdate" data-tab="workscheduler_btn_update"
                                                class="btn btn-dark btn-sm m-0 me-1  _tab_control_" type="button"
                                                onclick="event.preventDefault(); return WorkSchedule_UpdateWork();">
                                            @Local["Cập nhật"]
                                        </button>

                                        <button class="btn btn-dark btn-sm m-0 fc-today-button me-1" type="button">@Local["Hôm nay"]</button>
                                        <button class="fc-prev-button btn btn-dark btn-sm m-0 px-3 me-1" type="button" aria-label="prev">
                                            <span class="fc-icon fc-icon-chevron-left"></span>
                                        </button>
                                        <button class="fc-next-button btn btn-dark btn-sm m-0 px-3" type="button" aria-label="next">
                                            <span class="fc-icon fc-icon-chevron-right"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="ms-n1 mb-2">
                        <div class="d-flex bg-gray-200 p-1 rounded-2" id="WS_Shift"></div>
                    </div>
                    <div class="row position-relative">
                        <div id="WaitingWorkCalendar" class="waitingdiv text-center position-absolute top-0 start-50 translate-middle-x mt-2" style="display:none">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">@Local["Đang tải"]...</span>
                            </div>
                        </div>
                        <div class="calendar" data-bs-toggle="calendar" id="WorkCalendar"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="WorkScheduleDetail" class="col-12">

</div>
<div id="popupExecute" class="ui dropdown item _tab_control_ position-absolute" tabindex="0" data-tab="update_work_schedule" style="display:none;width:150px">
    <div class="menu d-block w-100" tabindex="-1">
        <h6 id="popupExecute_title" class="p-2 ps-3 ms-1 text-sm mb-0 fw-bold text-primary"></h6>
        <hr class="horizontal dark my-0">
        <a class="item w-100 text-sm cursor-pointer" id="off_work_scheduler" onclick="WorkSchedule_ExecuteSetOffWork()">@Local["Nhân viên nghỉ phép"]</a>
        <a class="item w-100 text-sm cursor-pointer" id="change_work_scheduler" onclick="WorkSchedule_ChangeWorkByDate()">@Local["Đổi lịch làm việc ngày này"]</a>
    </div>
</div>

<script>

    //#region // Declare & Init
    var WSSearch_Timer;
    var WorkCalendar;
    var WorkScheduleCurrentID = 0;
    var WorkScheduleCurrentDate;
    var WorkScheduleCurrentTimeline;
    var WorkScheduleBranch;
    var WSDCurrentBranch = 0;
    var WSDCurrentShift = 0;

    var WSFlag = 0;
    var WSDataEmp;
    let WSObjEmp = {};
    let WSDataEvent = [];
    $(document).ready(function () {
        WS_Initialize();
        WS_Event();
        Checking_TabControl_Permission();
    })
    function WS_Initialize() {
        AjaxLoad(url = "/Employee/WorkSchedule/?handler=LoadInitialize"
            , data = {}, async = true, error = null
            , success = function (result) {
                if (result != "0") {
                    let data = JSON.parse(result);
                    Load_Combo(data.Branch, "cbbWSBranchEmp", true, "@Local["Tất cả chi nhánh"]");
                    $("#WSBranchEmp").dropdown("refresh");
                    $("#WSBranchEmp").dropdown("set selected", '0');
                    Load_Combo(data.Branch, "cbbWSBranchWork", false, "@Local["Tất cả chi nhánh"]");
                    $("#WSBranchWork").dropdown("refresh");
                    $("#WSBranchWork").dropdown("set selected", '0');

                    Load_Combo(data.GroupEmployee, "cbbWorkGroupEmp", true, "@Local["Tất cả nhóm"]");
                    $("#WSGroupID").dropdown("refresh");
                    $("#WSGroupID").dropdown("set selected", '0');
                    WS_ShiftRender(data.Shift,"WS_Shift");
                    WSFlag = 1;
                    WSEmp_Load();
                }
            });
    }
    async function WS_ShiftRender (data, id) {
        return new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let tr = `
                            <a data-id="${item.ID}" style="background-color:${item.ColorCode} !important" class="shift m-1 d-flex justify-content-center align-items-center p-2 py-1 bg-gray-200 rounded-3">
                            <h6 class="text-xs text-white text mb-0">${item.Code}</h6>
                            </a>`
                        document.getElementById(id).insertAdjacentHTML('beforeend', tr);
                    }
                }
            }
            WS_ShiftEvent();
        })
    }
    function WS_ShiftEvent () {
        $("#WS_Shift .shift").unbind('click').click(function () {
            if ($(this).hasClass("active")) {
                $('#WS_Shift .shift').removeClass("active");
                WSDCurrentShift = 0;
            }
            else {
                $('#WS_Shift .shift').removeClass("active");
                $(this).addClass("active");
                WSDCurrentShift = Number($(this).attr('data-id'));
            }
            WSD_Load();
        })
    }
    //#endregion

    //#region // Master Emp

    function WSEmp_Load () {
        if (WSFlag == 1) {
            let BranchID = Number($('#WSBranchEmp').dropdown('get value')) ? Number($('#WSBranchEmp').dropdown('get value')) : 0;
            let GroupID = Number($('#WSGroupID').dropdown('get value')) ? Number($('#WSGroupID').dropdown('get value')) : 0;
            AjaxLoad(url = "/Employee/WorkSchedule/?handler=LoadEmp"
                , data = {
                    "BranchID": BranchID,
                    "GroupID": GroupID
                }
                , async = true, error = null
                , success = function (result) {
                    if (result != "[]") {
                        WSDataEmp = JSON.parse(result);
                        WSObjEmp = WSDataEmp.reduce((pre, arr) => {
                            if (arr.ID) pre[arr.ID] = arr;
                            return pre;
                        }, {})
                        WSEmp_Render(WSDataEmp, "dtWSContent_Emp"
                            , function () {
                                if ($('#dtWSContent_Emp .rowEmployee')[0] != undefined)
                                    $('#dtWSContent_Emp .rowEmployee')[0].click()
                            }
                        );
                    }
                }
                , sender = null
                ,before = function (e) {
                    $("#WSContent_Wait").show();
                },
                complete = function (e) {
                    $("#WSContent_Wait").hide();
                }
            );
        }
    }
    function WS_Event () {
        $('#WSSearch_Input').keyup(function () {
            if ($(this).val().length > 0) $("#WSSearch_Area .btn_clear").removeClass('opacity-1');
            else $("#WSSearch_Area .btn_clear").addClass('opacity-1');
            $("#WSSearch_Area .fa-search").hide();
            $("#WSSearch_Area .spinner-border").removeClass('d-none');
            clearTimeout(WSSearch_Timer);
            WSSearch_Timer = setTimeout(function (e) {
                WS_Filter("dtWSContent_Emp");
            }, 500);
        });
        $("#WSSearch_Area").on('click', '.btn_clear', function (e) {
            $('#WSSearch_Input').val('');
            $("#WSSearch_Area .btn_clear").addClass('opacity-1');
            WS_Filter("dtWSContent_Emp");
        });

        //View Calendar
        $(".fc-prev-button").on('click', function () {
            WorkCalendar.prev();
        });
        $(".fc-next-button").on('click', function () {
            WorkCalendar.next();
        });
        $(".fc-today-button").on('click', function () {
            WorkCalendar.today();
            $(".fc-toolbar-title").html(WorkCalendar.view.title);
        });

        document.addEventListener("mouseup", function (e) {
            var container = $("#popupExecute");
            if (!container.is(e.target) && container.has(e.target).length === 0) {
                container.hide();
                container.find(".item").removeClass("active");
            }
        });


    }
    async function WS_Filter (id) {
        await new Promise((resolve, reject) => {
            setTimeout(
                () => {

                    let textsearch = $('#WSSearch_Input').val().trim();
                    if (textsearch == "") {
                        WSEmp_Render(WSDataEmp, id);
                    }
                    else {
                        let search = xoa_dau(textsearch.toLowerCase());
                        if (search == "") {
                            WSEmp_Render(WSDataEmp, id);
                        }
                        else {

                            let data = WSDataEmp.filter(word => {
                                return (xoa_dau(word.Name.toLowerCase()).includes(search));
                            });
                            WSEmp_Render(data, id);
                        }
                    }
                    $("#WSSearch_Area .fa-search").show();
                    $("#WSSearch_Area .spinner-border").addClass('d-none');
                    resolve()
                }
            )
        })
    }
    async function WSEmp_Render (data, id, callback) {
        return new Promise((resolve, reject) => {
            var myNode = document.getElementById(id);
            if (myNode != null) {
                myNode.innerHTML = '';
                if (data && data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i];
                        let tr = `
                            <tr class="rowEmployee cursor-pointer vt-number" data-name="${item.Name}" data-id="${item.ID}">
                                <td class="d-none">${item.ID}</td>
                                <td class="vt-number-order"></td>
                                <td class=""><a href="#" class="buttonEditClass">${item.Name}</a></td>
                            </tr>
                        `
                        document.getElementById(id).insertAdjacentHTML('beforeend', tr);
                    }
                }
            }
            WS_EmpEvent();
            if (typeof callback == 'function') callback();
        })
    }
    function WS_EmpEvent () {
        $("#dtWSContent_Emp .rowEmployee").unbind('click').click(function () {
            $("#dtWSContent_Emp .rowEmployee").removeClass("active");
            $(this).addClass("active");
            WorkScheduleCurrentID = Number($(this).attr('data-id'));
            $('#WS_Empname').html($(this).attr('data-name'));
            WSD_Load();
        })
    }

    //#endregion

    //#region // Load Data

    async function WSD_Load () {
        return new Promise((reslove, reject) => {
            WorkCalendar = new FullCalendar.Calendar(document.getElementById("WorkCalendar"), {
                headerToolbar: false,
                firstDay: 1,
                locale: author_get("UserLang") == 'en' ? 'en' : 'vi',
                initialView: "dayGridMonth",
                displayEventTime: true,
                displayEventEnd: true,
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                },
                selectable: true,
                editable: true,
                stickyHeaderDates: false,
                fixedWeekCount: false,
                lazyFetching: true,
                handleWindowResize: true,
                eventDisplay: 'block',
                eventDidMount: function (info) {
                    new bootstrap.Tooltip(info.el, {
                        title: info.event.extendedProps.BranchName != undefined ? info.event.extendedProps.BranchName : "",
                        placement: 'top',
                        trigger: 'hover',
                        container: 'body',
                        html: true
                    })
                },
                views: {
                    month: {
                        titleFormat: {
                            month: "long",
                            year: "numeric"
                        }
                    },
                    agendaWeek: {
                        titleFormat: {
                            month: "long",
                            year: "numeric",
                            day: "numeric"
                        }
                    },
                    agendaDay: {
                        titleFormat: {
                            month: "short",
                            year: "numeric",
                            day: "numeric"
                        }
                    }
                },
                events: function (info, successCallback, failureCallback) {
                    AjaxLoad(url = "/Employee/WorkSchedule/?handler=LoadScheduler"
                        , data = {
                            'employeeID': WorkScheduleCurrentID
                            , 'dateFrom': ConvertDateTimeUTC_YMD(new Date(info.start))
                            , 'dateTo': ConvertDateTimeUTC_YMD(new Date(info.end))
                        }
                        , async = true
                        , error = function () { notiError_SW(); }
                        , success = function (result) {
                            if (result != "0") {
                                let datas = JSON.parse(result);
                                let _bra = datas.Table4;
                                WorkScheduleBranch = {};
                                for (let i = 0; i < _bra.length; i++) {
                                    WorkScheduleBranch[_bra[i].ID] = _bra[i];
                                }
                                let data = Work_Scheduler_GetfromEmp(datas, new Date(info.start), new Date(info.end));
                                let dataEvents = [];
                                WSDataEvent = data;
                                for (let i = 0; i < data.length; i++) {

                                    let item = data[i];
                                    let e = {};
                                    e.id = WorkScheduleCurrentID;
                                    e.title = (item.IsWork == 0) ? decodeHtml(`@Local["Ngày nghỉ"]`) : (item.BranchID != "0" && WorkScheduleBranch[item.BranchID] != undefined) ? WorkScheduleBranch[item.BranchID].Name : '';
                                    e.start = item.Date_From;
                                    e.end = item.Date_To;
                                    e.allDay = (item.IsWork == 0);
                                    e.DateSchedule = item.Date;
                                    e.BranchName = '';
                                    e.backgroundColor = item.Color ? item.Color : '#888';
                                    e.className = (item.IsWork == 1 ? '' : 'bg-danger') + ' text-white';
                                    dataEvents.push(e);
                                }
                                successCallback(dataEvents)
                            }
                            else {
                                notiError();
                                failureCallback([]);
                            }
                        }
                        , sender = null
                    );
                },
                eventClick: function (info) {
                    if (info != undefined) {
                        WorkScheduleCurrentDate = info.event.start;
                        WorkScheduleCurrentTimeline = info.event.extendedProps.DateSchedule;
                        WorkSchedule_Popup(info.event.title, ConvertDateTimeUTC_DMY(info.event.start) , info.jsEvent.pageX, info.jsEvent.pageY);
                    }
                },
                dateClick: function (info) {
                    if (info != undefined) {
                        WorkScheduleCurrentDate = info.date;
                        WorkScheduleCurrentTimeline = ConvertDateTime_To_YMDInt(info.date);
                        WorkSchedule_Popup('', ConvertDateTimeUTC_DMY(WorkScheduleCurrentDate), info.jsEvent.pageX, info.jsEvent.pageY);
                    }
                },
                editable: false, // Disabled Drag & Drop
                eventDragStart: function (info) {
                },
                eventDrop: function (info) {
                },
                eventResize: function (info) {
                },
                eventMouseEnter: function (info) {
                },
                eventMouseLeave: function (info) {
                },
                loading: function (isComplete) {
                    if (isComplete) {
                        $("#WaitingWorkCalendar").show();
                        $("#calendar").addClass("opacity-5");
                    }
                    else {
                       $("#WaitingWorkCalendar").hide();
                        $("#calendar").removeClass("opacity-5");
                        $(".fc-toolbar-title").html(WorkCalendar.view.title);
                    }
                },

            });
            WorkCalendar.render();
        })
    }
    function Work_Scheduler_GetfromEmp (datas,datebegin, dateto) {
        let obj = Work_Scheduler_Get_From_Employee(_branchid = WSDCurrentBranch
            , _shiftid = WSDCurrentShift
            , data_begin = datebegin
            , data_end = dateto
            , _timeline=datas.Table
            , _extension=datas.Table1
            , shiftdata = datas.Table3
            , empid = WorkScheduleCurrentID);

        return obj;
    }
    async function WorkSchedule_Popup(title, datecurrent, x, y) {
        return new Promise((resolve, reject) => {
            $("#popupExecute_title").html('@Local["Ngày"] ' + datecurrent);
            if (title.toLowerCase() != 'off') $("#off_work_scheduler").show();
            else $("#off_work_scheduler").hide();
            let windowWidth = window.innerWidth;
            let popupWidth = $("#popupExecute").outerWidth()
            x = (windowWidth > popupWidth + x) ? x : windowWidth - popupWidth -120 ;
            $("#popupExecute").css({
                "top": (y+30) + 'px',
                "left": x + 'px'
            }).fadeIn(100);
        })
    }
    function WorkSchedule_ChangeWorkByDate () {
        let stringDate = ConvertDateTimeUTC_DMY(WorkScheduleCurrentDate);

        $("#WorkScheduleDetail").load(`/Employee/WorkScheduleDetail?ver=${versionofWebApplication}&DateTimeCurrent=${stringDate}&CurrentID=${WorkScheduleCurrentID}`
            , function () {
                WorkSchedule_OpenDetail();
            });

        $('#popupExecute').hide();
        return false;
    }
    async function WorkSchedule_ExecuteSetOffWork() {
        return new Promise((resolve, reject) => {
            if (WorkScheduleCurrentID != 0 && WorkScheduleCurrentDate != null) {
                AjaxLoad(url = "/Employee/WorkSchedule/?handler=OffScheduler"
                    , data = {
                        'employeeID': WorkScheduleCurrentID,
                        'date': ConvertDateTimeUTC_DMY(WorkScheduleCurrentDate)
                    }
                    , async = true
                    , error = null
                    , success = function (result) {
                        if (result == "1") {
                            $("#popupExecute").hide();
                            WorkCalendar.refetchEvents();
                        }
                    });
            }
            else {
                notiWarning("@Local["Chưa chọn nhân viên hoặc chưa có ngày làm việc"]");
            }
        })
    }
    function WorkSchedule_UpdateWork() {
        if (WorkScheduleCurrentID != 0) {
            $("#WorkScheduleDetail").load(`/Employee/WorkScheduleDetail?ver=${versionofWebApplication}&DateTimeCurrent=${0}&CurrentID=${WorkScheduleCurrentID}`
                , function () {
                WorkSchedule_OpenDetail();
            });
            return false;
        }
    }
    function WSD_BranchChange () {
        if (WSFlag == 1) {

            WSDCurrentBranch = Number($('#WSBranchWork').dropdown('get value')) ? Number($('#WSBranchWork').dropdown('get value')) : 0;
            WSD_Load();
        }
    }
    //#endregion


    //#region // Other
    function WorkSchedule_OpenDetail() {
        $("#WorkScheduleMain").hide();
        $("#WorkScheduleDetail").show();
    }
    function WorkSchedule_CloseDetail() {
        $("#WorkScheduleMain").show();
        $("#WorkScheduleDetail").hide();
        $("#WorkScheduleDetail").empty();
    }
    async function WorkSchedule_Export () {
        let dataRoot = WSDataEvent;
        let dataExport = {
            "STT": ["@Local["STT"]", (value, { }, idx) => {return idx + 1}]
            , "Date": ["@Local["Ngày"]", (v) => {return (v != 0 ? BigIntToDDMMYYYY(v) : '')}]
            , "EmpID": ["@Local["Nhân viên"]", (v) => {return (WSObjEmp[v] != undefined ? WSObjEmp[v].Name : '')}]
            , "BranchID": ["@Local["Chi nhánh"]", (v) => {return (WorkScheduleBranch[v] != undefined ? WorkScheduleBranch[v].BranchName : '')}]
            , "IsWork": ["@Local["Ngày nghỉ"]", (v) => {return (v != 1 ? 'X' : '')}]
            , "Date_From": ["@Local["Ngày bắt đầu"]", (v) => {return (!ConvertDateTimeUTC_DMYHM(v).includes('1900') ? ConvertDateTimeUTC_DMYHM(v) : '')}]
            , "Date_To": ["@Local["Ngày kết thúc"]", (v) => {return (!ConvertDateTimeUTC_DMYHM(v).includes('1900') ? ConvertDateTimeUTC_DMYHM(v) : '')}]
        };
        let nameFile = Outlang["Sys_lich_lam_viec"];
        await exportJsonToExcel(nameFile, dataRoot, dataExport);
        return false;
    }

    //#endregion

</script>



<style id="WorkScheduleMain">
    .fc-daygrid-event {
        cursor: pointer !important;
    }

    .fc .fc-more-popover .fc-popover-body {
        max-height: 500px;
        overflow-y: auto;
        overflow-x: hidden;
    }



    .fc .fc-daygrid-more-link {
        color: #344767;
        font-size: 12px;
    }

    .tooltip-inner {
        box-shadow: 0 0.25rem 0.375rem -0.0625rem rgb(20 20 20 / 12%), 0 0.125rem 0.25rem -0.0625rem rgb(20 20 20 / 7%) !important;
        background-image: linear-gradient( 310deg,#141727,#3a416f);
        max-width: 350px;
        padding: 10px 15px;
    }

    .fc-daygrid-block-event .fc-event-time, .fc-daygrid-block-event .fc-event-title {
        font-size: 0.85em;
    }

    .fc .fc-more-popover .fc-popover-body {
        max-height: 500px;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .fc .fc-daygrid-more-link {
        color: rgb(var(--bs-primary));
        font-size: 12px;
    }

    #WorkScheduleMain .btn {
        display: inline-block !important;
        font-weight: 700 !important;
    }

    .fc .fc-button {
        padding-block: 8px !important;
    }

    .fc .fc-button-primary {
        padding: 12px !important;
    }

        .fc .fc-button-primary:not(:disabled):active,
        .fc .fc-button-primary:not(:disabled).fc-button-active,
        .fc .fc-button-primary.btn-dark {
            background-color: #344767 !important;
            border-color: #344767 !important;
        }

        .fc .fc-button-primary:first-child {
            border-top-left-radius: 0.5em !important;
            border-bottom-left-radius: 0.5em !important;
        }

        .fc .fc-button-primary:last-child {
            border-top-right-radius: 0.5em !important;
            border-bottom-right-radius: 0.5em !important;
        }

    div#calendar .fc-v-event {
        border: 1px solid white !important;
        border-radius: 7px;
        padding-left: 3px;
    }

    .shift.active .text {
        border-bottom: 2px solid white;
    }
    .fc .fc-col-header-cell-cushion {
        font-weight: 500;
        color: #344767;
    }
</style>